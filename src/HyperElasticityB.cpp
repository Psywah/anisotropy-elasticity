// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              4
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          True

#include "HyperElasticityB.h"

hyperelasticityb_finite_element_0::hyperelasticityb_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticityb_finite_element_0::~hyperelasticityb_finite_element_0()
{
    // Do nothing
}

const char * hyperelasticityb_finite_element_0::signature() const
{
    return "FiniteElement('Real', tetrahedron, 0)";
}

ufc::shape hyperelasticityb_finite_element_0::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticityb_finite_element_0::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_0::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_0::space_dimension() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_0::value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_0::degree() const
{
    return 0;
}

const char * hyperelasticityb_finite_element_0::family() const
{
    return "Real";
}

void hyperelasticityb_finite_element_0::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
}

void hyperelasticityb_finite_element_0::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
}

void hyperelasticityb_finite_element_0::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
}

void hyperelasticityb_finite_element_0::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
}

double hyperelasticityb_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticityb_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

void hyperelasticityb_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

void hyperelasticityb_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
}

std::size_t hyperelasticityb_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_0::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_0::create() const
{
    return new hyperelasticityb_finite_element_0();
}


hyperelasticityb_finite_element_1::hyperelasticityb_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticityb_finite_element_1::~hyperelasticityb_finite_element_1()
{
    // Do nothing
}

const char * hyperelasticityb_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Real', tetrahedron, 0), dim=3)";
}

ufc::shape hyperelasticityb_finite_element_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticityb_finite_element_1::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_1::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_1::space_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_1::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_finite_element_1::value_size() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_1::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_finite_element_1::reference_value_size() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_1::degree() const
{
    return 0;
}

const char * hyperelasticityb_finite_element_1::family() const
{
    return "Real";
}

void hyperelasticityb_finite_element_1::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_1::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void hyperelasticityb_finite_element_1::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
}

void hyperelasticityb_finite_element_1::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticityb_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 2:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticityb_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[1] = vals[1];
    values[2] = vals[2];
}

void hyperelasticityb_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[0];
    vertex_values[6] = dof_values[0];
    vertex_values[9] = dof_values[0];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[1];
    vertex_values[4] = dof_values[1];
    vertex_values[7] = dof_values[1];
    vertex_values[10] = dof_values[1];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[2];
    vertex_values[5] = dof_values[2];
    vertex_values[8] = dof_values[2];
    vertex_values[11] = dof_values[2];
}

void hyperelasticityb_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    dof_coordinates[3] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[4] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[5] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    dof_coordinates[6] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[7] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[8] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
}

std::size_t hyperelasticityb_finite_element_1::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * hyperelasticityb_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_1::create() const
{
    return new hyperelasticityb_finite_element_1();
}


hyperelasticityb_finite_element_2::hyperelasticityb_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticityb_finite_element_2::~hyperelasticityb_finite_element_2()
{
    // Do nothing
}

const char * hyperelasticityb_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 2)";
}

ufc::shape hyperelasticityb_finite_element_2::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticityb_finite_element_2::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_2::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_2::space_dimension() const
{
    return 10;
}

std::size_t hyperelasticityb_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_2::value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_2::degree() const
{
    return 2;
}

const char * hyperelasticityb_finite_element_2::family() const
{
    return "Lagrange";
}

void hyperelasticityb_finite_element_2::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_2::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void hyperelasticityb_finite_element_2::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[9][2];
    for (unsigned int row = 0; row < 9; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[9][9];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_2::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 10; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticityb_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticityb_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
}

void hyperelasticityb_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void hyperelasticityb_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    dof_coordinates[13] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    dof_coordinates[14] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    dof_coordinates[15] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    dof_coordinates[16] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    dof_coordinates[17] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    dof_coordinates[18] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    dof_coordinates[19] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    dof_coordinates[20] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    dof_coordinates[21] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    dof_coordinates[22] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    dof_coordinates[23] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    dof_coordinates[24] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    dof_coordinates[25] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    dof_coordinates[26] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    dof_coordinates[27] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    dof_coordinates[28] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    dof_coordinates[29] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
}

std::size_t hyperelasticityb_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_2::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_2::create() const
{
    return new hyperelasticityb_finite_element_2();
}


hyperelasticityb_finite_element_3::hyperelasticityb_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticityb_finite_element_3::~hyperelasticityb_finite_element_3()
{
    // Do nothing
}

const char * hyperelasticityb_finite_element_3::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3)";
}

ufc::shape hyperelasticityb_finite_element_3::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticityb_finite_element_3::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_3::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_3::space_dimension() const
{
    return 30;
}

std::size_t hyperelasticityb_finite_element_3::value_rank() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_3::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_finite_element_3::value_size() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_3::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_finite_element_3::reference_value_size() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_3::degree() const
{
    return 2;
}

const char * hyperelasticityb_finite_element_3::family() const
{
    return "Lagrange";
}

void hyperelasticityb_finite_element_3::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_3::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 30; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void hyperelasticityb_finite_element_3::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[9][2];
    for (unsigned int row = 0; row < 9; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[9][9];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.864385262357669e-15, 11.22497216032182, 0.0, 1.404377772271542e-15, 0.0, -2.047657646544701e-15, 0.0, 1.794203153479978e-15, 0.0, 0.0},
      {4.582575694955854, 0.0, 8.366600265340763, -1.183215956619927, 0.0, 0.0, 0.0, 0.0, -1.039906054920983e-15, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 1.255361955252562e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, -1.341955415397163e-15, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477959, 7.245688373094726, 4.18330013267038, -0.5916079783099707, 0.0, -1.392787297899376e-15, -1.760572863245088e-15, 0.0, 1.487904563901115e-15, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064623, 0.0, 9.660917830792958, 0.6831300510639818, 0.0, 1.830646624217708e-15, 0.0, 1.25506560557729e-15, -1.129086710066566e-15, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 1.101828818824078e-15},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, -1.374336540127653e-15, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160911, -1.080123449734644, -0.7637626158259727, 0.0, -1.076980539160753e-15, 0.0, 1.801449909144712e-15, 0.0, 1.038805165429468e-15},
      {2.291287847477918, 1.449137674618943, 4.183300132670374, -0.5916079783099608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387014, 7.099295739719546, 0.0, 4.347413023856834, 0.0, -1.799529619535308e-15, -1.791464861849477e-15, 4.371390990381942e-15, 0.0, 3.316793489944699e-15},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734633, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 1.557784673267022e-15, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_3::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 30; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[27];
    for (unsigned int r = 0; r < 27; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 30; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticityb_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 14:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 15:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 16:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 17:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 18:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 19:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 20:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 21:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 22:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 23:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 24:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 25:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 26:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 27:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 28:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 29:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticityb_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[10] = vals[1];
    values[20] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[11] = vals[1];
    values[21] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[12] = vals[1];
    values[22] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[13] = vals[1];
    values[23] = vals[2];
    y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    values[14] = vals[1];
    values[24] = vals[2];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    values[15] = vals[1];
    values[25] = vals[2];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    values[16] = vals[1];
    values[26] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    values[17] = vals[1];
    values[27] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    values[18] = vals[1];
    values[28] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    values[19] = vals[1];
    values[29] = vals[2];
}

void hyperelasticityb_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[4] = dof_values[11];
    vertex_values[7] = dof_values[12];
    vertex_values[10] = dof_values[13];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[20];
    vertex_values[5] = dof_values[21];
    vertex_values[8] = dof_values[22];
    vertex_values[11] = dof_values[23];
}

void hyperelasticityb_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    dof_coordinates[13] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    dof_coordinates[14] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    dof_coordinates[15] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    dof_coordinates[16] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    dof_coordinates[17] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    dof_coordinates[18] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    dof_coordinates[19] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    dof_coordinates[20] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    dof_coordinates[21] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    dof_coordinates[22] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    dof_coordinates[23] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    dof_coordinates[24] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    dof_coordinates[25] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    dof_coordinates[26] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    dof_coordinates[27] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    dof_coordinates[28] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    dof_coordinates[29] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[0];
    dof_coordinates[31] = coordinate_dofs[1];
    dof_coordinates[32] = coordinate_dofs[2];
    dof_coordinates[33] = coordinate_dofs[3];
    dof_coordinates[34] = coordinate_dofs[4];
    dof_coordinates[35] = coordinate_dofs[5];
    dof_coordinates[36] = coordinate_dofs[6];
    dof_coordinates[37] = coordinate_dofs[7];
    dof_coordinates[38] = coordinate_dofs[8];
    dof_coordinates[39] = coordinate_dofs[9];
    dof_coordinates[40] = coordinate_dofs[10];
    dof_coordinates[41] = coordinate_dofs[11];
    dof_coordinates[42] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    dof_coordinates[43] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    dof_coordinates[44] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    dof_coordinates[45] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    dof_coordinates[46] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    dof_coordinates[47] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    dof_coordinates[48] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    dof_coordinates[49] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    dof_coordinates[50] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    dof_coordinates[51] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    dof_coordinates[52] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    dof_coordinates[53] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    dof_coordinates[54] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    dof_coordinates[55] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    dof_coordinates[56] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    dof_coordinates[57] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    dof_coordinates[58] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    dof_coordinates[59] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
    dof_coordinates[60] = coordinate_dofs[0];
    dof_coordinates[61] = coordinate_dofs[1];
    dof_coordinates[62] = coordinate_dofs[2];
    dof_coordinates[63] = coordinate_dofs[3];
    dof_coordinates[64] = coordinate_dofs[4];
    dof_coordinates[65] = coordinate_dofs[5];
    dof_coordinates[66] = coordinate_dofs[6];
    dof_coordinates[67] = coordinate_dofs[7];
    dof_coordinates[68] = coordinate_dofs[8];
    dof_coordinates[69] = coordinate_dofs[9];
    dof_coordinates[70] = coordinate_dofs[10];
    dof_coordinates[71] = coordinate_dofs[11];
    dof_coordinates[72] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    dof_coordinates[73] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    dof_coordinates[74] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    dof_coordinates[75] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    dof_coordinates[76] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    dof_coordinates[77] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    dof_coordinates[78] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    dof_coordinates[79] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    dof_coordinates[80] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    dof_coordinates[81] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    dof_coordinates[82] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    dof_coordinates[83] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    dof_coordinates[84] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    dof_coordinates[85] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    dof_coordinates[86] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    dof_coordinates[87] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    dof_coordinates[88] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    dof_coordinates[89] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
}

std::size_t hyperelasticityb_finite_element_3::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * hyperelasticityb_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_2();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_2();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_finite_element_2();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_3::create() const
{
    return new hyperelasticityb_finite_element_3();
}


hyperelasticityb_finite_element_4::hyperelasticityb_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticityb_finite_element_4::~hyperelasticityb_finite_element_4()
{
    // Do nothing
}

const char * hyperelasticityb_finite_element_4::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 1)";
}

ufc::shape hyperelasticityb_finite_element_4::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticityb_finite_element_4::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_4::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_4::space_dimension() const
{
    return 4;
}

std::size_t hyperelasticityb_finite_element_4::value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_4::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_4::value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_4::reference_value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_4::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_4::reference_value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_4::degree() const
{
    return 1;
}

const char * hyperelasticityb_finite_element_4::family() const
{
    return "Lagrange";
}

void hyperelasticityb_finite_element_4::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_4::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void hyperelasticityb_finite_element_4::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_4::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticityb_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticityb_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

void hyperelasticityb_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void hyperelasticityb_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
}

std::size_t hyperelasticityb_finite_element_4::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_4::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_4::create() const
{
    return new hyperelasticityb_finite_element_4();
}


hyperelasticityb_finite_element_5::hyperelasticityb_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticityb_finite_element_5::~hyperelasticityb_finite_element_5()
{
    // Do nothing
}

const char * hyperelasticityb_finite_element_5::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::shape hyperelasticityb_finite_element_5::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticityb_finite_element_5::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_5::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_5::space_dimension() const
{
    return 12;
}

std::size_t hyperelasticityb_finite_element_5::value_rank() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_5::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_finite_element_5::value_size() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_5::reference_value_rank() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_5::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_finite_element_5::reference_value_size() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_5::degree() const
{
    return 1;
}

const char * hyperelasticityb_finite_element_5::family() const
{
    return "Lagrange";
}

void hyperelasticityb_finite_element_5::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_5::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void hyperelasticityb_finite_element_5::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticityb_finite_element_5::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticityb_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticityb_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
}

void hyperelasticityb_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

void hyperelasticityb_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
}

std::size_t hyperelasticityb_finite_element_5::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * hyperelasticityb_finite_element_5::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_4();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_4();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_finite_element_4();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_5::create() const
{
    return new hyperelasticityb_finite_element_5();
}


hyperelasticityb_finite_element_6::hyperelasticityb_finite_element_6() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticityb_finite_element_6::~hyperelasticityb_finite_element_6()
{
    // Do nothing
}

const char * hyperelasticityb_finite_element_6::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
}

ufc::shape hyperelasticityb_finite_element_6::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticityb_finite_element_6::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_6::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_finite_element_6::space_dimension() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_6::value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_6::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_6::value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_6::reference_value_rank() const
{
    return 0;
}

std::size_t hyperelasticityb_finite_element_6::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_6::reference_value_size() const
{
    return 1;
}

std::size_t hyperelasticityb_finite_element_6::degree() const
{
    return 0;
}

const char * hyperelasticityb_finite_element_6::family() const
{
    return "Discontinuous Lagrange";
}

void hyperelasticityb_finite_element_6::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
}

void hyperelasticityb_finite_element_6::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
}

void hyperelasticityb_finite_element_6::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
}

void hyperelasticityb_finite_element_6::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
}

double hyperelasticityb_finite_element_6::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticityb_finite_element_6::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

void hyperelasticityb_finite_element_6::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

void hyperelasticityb_finite_element_6::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
}

std::size_t hyperelasticityb_finite_element_6::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_6::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * hyperelasticityb_finite_element_6::create() const
{
    return new hyperelasticityb_finite_element_6();
}


hyperelasticityb_dofmap_0::hyperelasticityb_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticityb_dofmap_0::~hyperelasticityb_dofmap_0()
{
    // Do nothing
}

const char * hyperelasticityb_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
}

bool hyperelasticityb_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t hyperelasticityb_dofmap_0::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 1;
}

std::size_t hyperelasticityb_dofmap_0::num_element_dofs() const
{
    return 1;
}

std::size_t hyperelasticityb_dofmap_0::num_facet_dofs() const
{
    return 0;
}

std::size_t hyperelasticityb_dofmap_0::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_dofmap_0::num_entity_closure_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

void hyperelasticityb_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 0;
}

void hyperelasticityb_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_0::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

std::size_t hyperelasticityb_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_0::create() const
{
    return new hyperelasticityb_dofmap_0();
}


hyperelasticityb_dofmap_1::hyperelasticityb_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticityb_dofmap_1::~hyperelasticityb_dofmap_1()
{
    // Do nothing
}

const char * hyperelasticityb_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Real', tetrahedron, 0), dim=3)";
}

bool hyperelasticityb_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

std::size_t hyperelasticityb_dofmap_1::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_1::num_element_dofs() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_1::num_facet_dofs() const
{
    return 0;
}

std::size_t hyperelasticityb_dofmap_1::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_dofmap_1::num_entity_closure_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

void hyperelasticityb_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset;
    offset += 1;
    dofs[1] = offset;
    offset += 1;
    dofs[2] = offset;
    offset += 1;
}

void hyperelasticityb_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_1::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

std::size_t hyperelasticityb_dofmap_1::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * hyperelasticityb_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_1::create() const
{
    return new hyperelasticityb_dofmap_1();
}


hyperelasticityb_dofmap_2::hyperelasticityb_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticityb_dofmap_2::~hyperelasticityb_dofmap_2()
{
    // Do nothing
}

const char * hyperelasticityb_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 2)";
}

bool hyperelasticityb_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t hyperelasticityb_dofmap_2::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + num_global_entities[1];
}

std::size_t hyperelasticityb_dofmap_2::num_element_dofs() const
{
    return 10;
}

std::size_t hyperelasticityb_dofmap_2::num_facet_dofs() const
{
    return 6;
}

std::size_t hyperelasticityb_dofmap_2::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_dofmap_2::num_entity_closure_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 3;
        break;
      }
    case 2:
      {
        return 6;
        break;
      }
    case 3:
      {
        return 10;
        break;
      }
    }
    
    return 0;
}

void hyperelasticityb_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
}

void hyperelasticityb_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 7;
      dofs[5] = 8;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 9;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
          break;
        }
      case 2:
        {
          dofs[0] = 6;
          break;
        }
      case 3:
        {
          dofs[0] = 7;
          break;
        }
      case 4:
        {
          dofs[0] = 8;
          break;
        }
      case 5:
        {
          dofs[0] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_2::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 6;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 7;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 8;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
        break;
      }
    }
    
}

std::size_t hyperelasticityb_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_2::create() const
{
    return new hyperelasticityb_dofmap_2();
}


hyperelasticityb_dofmap_3::hyperelasticityb_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticityb_dofmap_3::~hyperelasticityb_dofmap_3()
{
    // Do nothing
}

const char * hyperelasticityb_dofmap_3::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3)";
}

bool hyperelasticityb_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t hyperelasticityb_dofmap_3::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3*num_global_entities[0] + 3*num_global_entities[1];
}

std::size_t hyperelasticityb_dofmap_3::num_element_dofs() const
{
    return 30;
}

std::size_t hyperelasticityb_dofmap_3::num_facet_dofs() const
{
    return 18;
}

std::size_t hyperelasticityb_dofmap_3::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 3;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_dofmap_3::num_entity_closure_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 9;
        break;
      }
    case 2:
      {
        return 18;
        break;
      }
    case 3:
      {
        return 30;
        break;
      }
    }
    
    return 0;
}

void hyperelasticityb_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[10] = offset + entity_indices[0][0];
    dofs[11] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    dofs[13] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[14] = offset + entity_indices[1][0];
    dofs[15] = offset + entity_indices[1][1];
    dofs[16] = offset + entity_indices[1][2];
    dofs[17] = offset + entity_indices[1][3];
    dofs[18] = offset + entity_indices[1][4];
    dofs[19] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    dofs[23] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[24] = offset + entity_indices[1][0];
    dofs[25] = offset + entity_indices[1][1];
    dofs[26] = offset + entity_indices[1][2];
    dofs[27] = offset + entity_indices[1][3];
    dofs[28] = offset + entity_indices[1][4];
    dofs[29] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
}

void hyperelasticityb_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 11;
      dofs[7] = 12;
      dofs[8] = 13;
      dofs[9] = 14;
      dofs[10] = 15;
      dofs[11] = 16;
      dofs[12] = 21;
      dofs[13] = 22;
      dofs[14] = 23;
      dofs[15] = 24;
      dofs[16] = 25;
      dofs[17] = 26;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 7;
      dofs[5] = 8;
      dofs[6] = 10;
      dofs[7] = 12;
      dofs[8] = 13;
      dofs[9] = 14;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 20;
      dofs[13] = 22;
      dofs[14] = 23;
      dofs[15] = 24;
      dofs[16] = 27;
      dofs[17] = 28;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 9;
      dofs[6] = 10;
      dofs[7] = 11;
      dofs[8] = 13;
      dofs[9] = 15;
      dofs[10] = 17;
      dofs[11] = 19;
      dofs[12] = 20;
      dofs[13] = 21;
      dofs[14] = 23;
      dofs[15] = 25;
      dofs[16] = 27;
      dofs[17] = 29;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 10;
      dofs[7] = 11;
      dofs[8] = 12;
      dofs[9] = 16;
      dofs[10] = 18;
      dofs[11] = 19;
      dofs[12] = 20;
      dofs[13] = 21;
      dofs[14] = 22;
      dofs[15] = 26;
      dofs[16] = 28;
      dofs[17] = 29;
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 10;
        dofs[2] = 20;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 11;
        dofs[2] = 21;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 12;
        dofs[2] = 22;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 13;
        dofs[2] = 23;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 4;
        dofs[1] = 14;
        dofs[2] = 24;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 15;
        dofs[2] = 25;
          break;
        }
      case 2:
        {
          dofs[0] = 6;
        dofs[1] = 16;
        dofs[2] = 26;
          break;
        }
      case 3:
        {
          dofs[0] = 7;
        dofs[1] = 17;
        dofs[2] = 27;
          break;
        }
      case 4:
        {
          dofs[0] = 8;
        dofs[1] = 18;
        dofs[2] = 28;
          break;
        }
      case 5:
        {
          dofs[0] = 9;
        dofs[1] = 19;
        dofs[2] = 29;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_3::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 10;
        dofs[2] = 20;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 11;
        dofs[2] = 21;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 12;
        dofs[2] = 22;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 13;
        dofs[2] = 23;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 22;
        dofs[7] = 23;
        dofs[8] = 24;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 11;
        dofs[4] = 13;
        dofs[5] = 15;
        dofs[6] = 21;
        dofs[7] = 23;
        dofs[8] = 25;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 6;
        dofs[3] = 11;
        dofs[4] = 12;
        dofs[5] = 16;
        dofs[6] = 21;
        dofs[7] = 22;
        dofs[8] = 26;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 7;
        dofs[3] = 10;
        dofs[4] = 13;
        dofs[5] = 17;
        dofs[6] = 20;
        dofs[7] = 23;
        dofs[8] = 27;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 8;
        dofs[3] = 10;
        dofs[4] = 12;
        dofs[5] = 18;
        dofs[6] = 20;
        dofs[7] = 22;
        dofs[8] = 28;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 9;
        dofs[3] = 10;
        dofs[4] = 11;
        dofs[5] = 19;
        dofs[6] = 20;
        dofs[7] = 21;
        dofs[8] = 29;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 15;
        dofs[11] = 16;
        dofs[12] = 21;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 25;
        dofs[17] = 26;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
        dofs[6] = 10;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 17;
        dofs[11] = 18;
        dofs[12] = 20;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 27;
        dofs[17] = 28;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 13;
        dofs[9] = 15;
        dofs[10] = 17;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 23;
        dofs[15] = 25;
        dofs[16] = 27;
        dofs[17] = 29;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 12;
        dofs[9] = 16;
        dofs[10] = 18;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 22;
        dofs[15] = 26;
        dofs[16] = 28;
        dofs[17] = 29;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
      dofs[20] = 20;
      dofs[21] = 21;
      dofs[22] = 22;
      dofs[23] = 23;
      dofs[24] = 24;
      dofs[25] = 25;
      dofs[26] = 26;
      dofs[27] = 27;
      dofs[28] = 28;
      dofs[29] = 29;
        break;
      }
    }
    
}

std::size_t hyperelasticityb_dofmap_3::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * hyperelasticityb_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_2();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_2();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_dofmap_2();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_3::create() const
{
    return new hyperelasticityb_dofmap_3();
}


hyperelasticityb_dofmap_4::hyperelasticityb_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticityb_dofmap_4::~hyperelasticityb_dofmap_4()
{
    // Do nothing
}

const char * hyperelasticityb_dofmap_4::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
}

bool hyperelasticityb_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t hyperelasticityb_dofmap_4::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t hyperelasticityb_dofmap_4::num_element_dofs() const
{
    return 4;
}

std::size_t hyperelasticityb_dofmap_4::num_facet_dofs() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_4::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_dofmap_4::num_entity_closure_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
}

void hyperelasticityb_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
}

void hyperelasticityb_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_4::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
}

std::size_t hyperelasticityb_dofmap_4::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_4::create() const
{
    return new hyperelasticityb_dofmap_4();
}


hyperelasticityb_dofmap_5::hyperelasticityb_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticityb_dofmap_5::~hyperelasticityb_dofmap_5()
{
    // Do nothing
}

const char * hyperelasticityb_dofmap_5::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

bool hyperelasticityb_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t hyperelasticityb_dofmap_5::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3*num_global_entities[0];
}

std::size_t hyperelasticityb_dofmap_5::num_element_dofs() const
{
    return 12;
}

std::size_t hyperelasticityb_dofmap_5::num_facet_dofs() const
{
    return 9;
}

std::size_t hyperelasticityb_dofmap_5::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_dofmap_5::num_entity_closure_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    case 3:
      {
        return 12;
        break;
      }
    }
    
    return 0;
}

void hyperelasticityb_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
}

void hyperelasticityb_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_5::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
        break;
      }
    }
    
}

std::size_t hyperelasticityb_dofmap_5::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * hyperelasticityb_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_4();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_4();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_dofmap_4();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_5::create() const
{
    return new hyperelasticityb_dofmap_5();
}


hyperelasticityb_dofmap_6::hyperelasticityb_dofmap_6() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticityb_dofmap_6::~hyperelasticityb_dofmap_6()
{
    // Do nothing
}

const char * hyperelasticityb_dofmap_6::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
}

bool hyperelasticityb_dofmap_6::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

std::size_t hyperelasticityb_dofmap_6::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticityb_dofmap_6::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[3];
}

std::size_t hyperelasticityb_dofmap_6::num_element_dofs() const
{
    return 1;
}

std::size_t hyperelasticityb_dofmap_6::num_facet_dofs() const
{
    return 0;
}

std::size_t hyperelasticityb_dofmap_6::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_dofmap_6::num_entity_closure_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

void hyperelasticityb_dofmap_6::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[3][0];
}

void hyperelasticityb_dofmap_6::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_6::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

void hyperelasticityb_dofmap_6::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

std::size_t hyperelasticityb_dofmap_6::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_6::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * hyperelasticityb_dofmap_6::create() const
{
    return new hyperelasticityb_dofmap_6();
}


hyperelasticityb_cell_integral_0_otherwise::hyperelasticityb_cell_integral_0_otherwise() : ufc::cell_integral()
{

}

hyperelasticityb_cell_integral_0_otherwise::~hyperelasticityb_cell_integral_0_otherwise()
{

}

const std::vector<bool> & hyperelasticityb_cell_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true, true, false});
return enabled;
}

void hyperelasticityb_cell_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 24
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE21_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000003, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000005, 0.0, -2.0, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 1.999999999999998, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000004, 0.0, 2.0, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991836, -0.5978929390991861, 0.4021070609008199, 2.793678817297555, 0.0, -0.4021070609008182, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008198, 0.4021070609008229, 2.391571756396729, -0.4021070609008185, -0.4021070609008184 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008144, 0.4021070609008263, -2.39157175639673, -0.4021070609008171, -0.402107060900819 },
            { 0.5978929390991841, -0.5978929390991863, 2.79367881729755, 0.4021070609008244, 0.0, -2.793678817297547, -0.4021070609008175 },
            { -0.2574914939727682, 0.2574914939727652, 1.257491493972769, 0.2275255180816996, 0.0, -1.257491493972769, -0.2275255180816941 },
            { 0.7724744819183069, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727681, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891075, -1.257491493972769, -1.257491493972769 },
            { -0.257491493972768, 0.2574914939727655, 0.2275255180816934, 1.257491493972776, 0.0, -0.2275255180816934, -1.25749149397277 } } };
    alignas(32) static const double FE21_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.000000000000001 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000003, -1.999999999999999 },
            { -1.0, -1.0, 0.0, 2.000000000000007, 0.0, 1.999999999999998, -2.000000000000001 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991843, -0.5978929390991847, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991851, 0.4021070609008187, 0.4021070609008227, -0.4021070609008185, 2.391571756396729, -0.4021070609008189 },
            { 0.5978929390991842, -0.5978929390991837, 2.793678817297549, 0.4021070609008198, -2.793678817297548, 0.0, -0.4021070609008182 },
            { 0.5978929390991838, 1.793678817297543, 0.402107060900819, 0.4021070609008254, -0.4021070609008185, -2.39157175639673, -0.4021070609008194 },
            { -0.2574914939727676, 0.2574914939727658, 1.25749149397277, 0.2275255180816987, -1.25749149397277, 0.0, -0.2275255180816943 },
            { 0.7724744819183077, 0.2574914939727662, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727675, 0.2574914939727655, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.257491493972769 },
            { -0.2574914939727673, -0.7724744819183084, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE21_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -1.999999999999999 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 1.999999999999999 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999999 },
            { 0.5978929390991834, 1.793678817297545, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396729 },
            { -1.793678817297545, -0.5978929390991823, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396728 },
            { 0.597892939099184, -0.5978929390991828, 2.79367881729755, 0.402107060900818, -2.793678817297549, -0.402107060900818, 0.0 },
            { 0.5978929390991843, -0.5978929390991833, 0.4021070609008183, 2.793678817297548, -0.4021070609008183, -2.793678817297549, 0.0 },
            { -0.2574914939727672, -0.772474481918307, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183076, 0.2574914939727675, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727678, 0.2574914939727679, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727674, 0.2574914939727682, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.227525518081694, 0.0 } } };
    alignas(32) static const double FE21_C0_Q14[1][14][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
            { -0.08031550417191763, 0.2771604624527405, -0.08031550417191768, -0.0803155041719177, 0.04042252210657349, 0.2808394945810975, 0.2808394945810974, 0.04042252210657362, 0.04042252210657341, 0.2808394945810972 },
            { 0.2771604624527406, -0.08031550417191766, -0.08031550417191771, -0.08031550417191771, 0.04042252210657353, 0.04042252210657352, 0.04042252210657354, 0.2808394945810975, 0.2808394945810973, 0.2808394945810972 },
            { -0.08031550417191761, -0.0803155041719177, -0.08031550417191774, 0.2771604624527406, 0.2808394945810973, 0.2808394945810974, 0.04042252210657356, 0.2808394945810972, 0.04042252210657342, 0.04042252210657358 },
            { -0.08031550417191761, -0.08031550417191767, 0.2771604624527405, -0.08031550417191773, 0.2808394945810974, 0.04042252210657359, 0.2808394945810974, 0.04042252210657361, 0.2808394945810971, 0.04042252210657359 },
            { -0.1167122663164589, -0.05041039684813044, -0.1167122663164589, -0.116712266316459, 0.3953212143534665, 0.07152785091236927, 0.07152785091236925, 0.3953212143534666, 0.3953212143534665, 0.07152785091236932 },
            { -0.05041039684813041, -0.1167122663164589, -0.1167122663164588, -0.1167122663164589, 0.3953212143534665, 0.3953212143534666, 0.3953212143534665, 0.07152785091236935, 0.07152785091236906, 0.07152785091236935 },
            { -0.1167122663164588, -0.1167122663164589, -0.1167122663164588, -0.05041039684813049, 0.07152785091236927, 0.07152785091236931, 0.3953212143534665, 0.07152785091236935, 0.3953212143534663, 0.3953212143534666 },
            { -0.1167122663164589, -0.1167122663164589, -0.05041039684813052, -0.1167122663164589, 0.0715278509123693, 0.3953212143534665, 0.07152785091236932, 0.3953212143534665, 0.07152785091236921, 0.3953212143534665 } } };
    alignas(32) static const double FE31_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE31_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE31_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE31_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE31_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE31_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE31_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE31_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE31_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE31_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE31_C0_D001_Q14[0][0][1];
    alignas(32) double sp[45];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w[8][0] / w[9][0];
    sp[44] = std::abs(sp[13]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c0 = w[0][0] * FE21_C0_D100_Q14[0][iq][0] + w[0][1] * FE21_C0_D100_Q14[0][iq][1] + w[0][5] * FE21_C0_D100_Q14[0][iq][2] + w[0][6] * FE21_C0_D100_Q14[0][iq][3] + w[0][7] * FE21_C0_D100_Q14[0][iq][4] + w[0][8] * FE21_C0_D100_Q14[0][iq][5] + w[0][9] * FE21_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE21_C0_D010_Q14[0][iq][0] + w[0][2] * FE21_C0_D010_Q14[0][iq][1] + w[0][4] * FE21_C0_D010_Q14[0][iq][2] + w[0][6] * FE21_C0_D010_Q14[0][iq][3] + w[0][7] * FE21_C0_D010_Q14[0][iq][4] + w[0][8] * FE21_C0_D010_Q14[0][iq][5] + w[0][9] * FE21_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE21_C0_D001_Q14[0][iq][0] + w[0][3] * FE21_C0_D001_Q14[0][iq][1] + w[0][4] * FE21_C0_D001_Q14[0][iq][2] + w[0][5] * FE21_C0_D001_Q14[0][iq][3] + w[0][7] * FE21_C0_D001_Q14[0][iq][4] + w[0][8] * FE21_C0_D001_Q14[0][iq][5] + w[0][9] * FE21_C0_D001_Q14[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE21_C0_D100_Q14[0][iq][0] + w[0][11] * FE21_C0_D100_Q14[0][iq][1] + w[0][15] * FE21_C0_D100_Q14[0][iq][2] + w[0][16] * FE21_C0_D100_Q14[0][iq][3] + w[0][17] * FE21_C0_D100_Q14[0][iq][4] + w[0][18] * FE21_C0_D100_Q14[0][iq][5] + w[0][19] * FE21_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE21_C0_D010_Q14[0][iq][0] + w[0][12] * FE21_C0_D010_Q14[0][iq][1] + w[0][14] * FE21_C0_D010_Q14[0][iq][2] + w[0][16] * FE21_C0_D010_Q14[0][iq][3] + w[0][17] * FE21_C0_D010_Q14[0][iq][4] + w[0][18] * FE21_C0_D010_Q14[0][iq][5] + w[0][19] * FE21_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE21_C0_D001_Q14[0][iq][0] + w[0][13] * FE21_C0_D001_Q14[0][iq][1] + w[0][14] * FE21_C0_D001_Q14[0][iq][2] + w[0][15] * FE21_C0_D001_Q14[0][iq][3] + w[0][17] * FE21_C0_D001_Q14[0][iq][4] + w[0][18] * FE21_C0_D001_Q14[0][iq][5] + w[0][19] * FE21_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE21_C0_D100_Q14[0][iq][0] + w[0][21] * FE21_C0_D100_Q14[0][iq][1] + w[0][25] * FE21_C0_D100_Q14[0][iq][2] + w[0][26] * FE21_C0_D100_Q14[0][iq][3] + w[0][27] * FE21_C0_D100_Q14[0][iq][4] + w[0][28] * FE21_C0_D100_Q14[0][iq][5] + w[0][29] * FE21_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE21_C0_D010_Q14[0][iq][0] + w[0][22] * FE21_C0_D010_Q14[0][iq][1] + w[0][24] * FE21_C0_D010_Q14[0][iq][2] + w[0][26] * FE21_C0_D010_Q14[0][iq][3] + w[0][27] * FE21_C0_D010_Q14[0][iq][4] + w[0][28] * FE21_C0_D010_Q14[0][iq][5] + w[0][29] * FE21_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE21_C0_D001_Q14[0][iq][0] + w[0][23] * FE21_C0_D001_Q14[0][iq][1] + w[0][24] * FE21_C0_D001_Q14[0][iq][2] + w[0][25] * FE21_C0_D001_Q14[0][iq][3] + w[0][27] * FE21_C0_D001_Q14[0][iq][4] + w[0][28] * FE21_C0_D001_Q14[0][iq][5] + w[0][29] * FE21_C0_D001_Q14[0][iq][6];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c0 += w[0][ic] * FE21_C0_Q14[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c1 += w[0][ic + 10] * FE21_C0_Q14[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c2 += w[0][ic + 20] * FE21_C0_Q14[0][iq][ic];
        alignas(32) double sv14[157];
        sv14[0] = w0_d0_c0 * sp[14];
        sv14[1] = w0_d1_c0 * sp[17];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c0 * sp[18];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = (1 + sv14[4]) * (1 + sv14[4]);
        sv14[6] = w0_d0_c1 * sp[14];
        sv14[7] = w0_d1_c1 * sp[17];
        sv14[8] = sv14[6] + sv14[7];
        sv14[9] = w0_d2_c1 * sp[18];
        sv14[10] = sv14[8] + sv14[9];
        sv14[11] = sv14[10] * sv14[10];
        sv14[12] = sv14[5] + sv14[11];
        sv14[13] = w0_d0_c2 * sp[14];
        sv14[14] = w0_d1_c2 * sp[17];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = w0_d2_c2 * sp[18];
        sv14[17] = sv14[15] + sv14[16];
        sv14[18] = sv14[17] * sv14[17];
        sv14[19] = sv14[12] + sv14[18];
        sv14[20] = w0_d0_c1 * sp[22];
        sv14[21] = w0_d1_c1 * sp[26];
        sv14[22] = sv14[20] + sv14[21];
        sv14[23] = w0_d2_c1 * sp[30];
        sv14[24] = sv14[22] + sv14[23];
        sv14[25] = (1 + sv14[24]) * (1 + sv14[24]);
        sv14[26] = w0_d0_c0 * sp[22];
        sv14[27] = w0_d1_c0 * sp[26];
        sv14[28] = sv14[26] + sv14[27];
        sv14[29] = w0_d2_c0 * sp[30];
        sv14[30] = sv14[28] + sv14[29];
        sv14[31] = sv14[30] * sv14[30];
        sv14[32] = sv14[25] + sv14[31];
        sv14[33] = w0_d0_c2 * sp[22];
        sv14[34] = w0_d1_c2 * sp[26];
        sv14[35] = sv14[33] + sv14[34];
        sv14[36] = w0_d2_c2 * sp[30];
        sv14[37] = sv14[35] + sv14[36];
        sv14[38] = sv14[37] * sv14[37];
        sv14[39] = sv14[32] + sv14[38];
        sv14[40] = sv14[19] + sv14[39];
        sv14[41] = w0_d0_c0 * sp[34];
        sv14[42] = w0_d1_c0 * sp[38];
        sv14[43] = sv14[41] + sv14[42];
        sv14[44] = w0_d2_c0 * sp[42];
        sv14[45] = sv14[43] + sv14[44];
        sv14[46] = sv14[45] * sv14[45];
        sv14[47] = w0_d0_c1 * sp[34];
        sv14[48] = w0_d1_c1 * sp[38];
        sv14[49] = sv14[47] + sv14[48];
        sv14[50] = w0_d2_c1 * sp[42];
        sv14[51] = sv14[49] + sv14[50];
        sv14[52] = sv14[51] * sv14[51];
        sv14[53] = sv14[46] + sv14[52];
        sv14[54] = w0_d0_c2 * sp[34];
        sv14[55] = w0_d1_c2 * sp[38];
        sv14[56] = sv14[54] + sv14[55];
        sv14[57] = w0_d2_c2 * sp[42];
        sv14[58] = sv14[56] + sv14[57];
        sv14[59] = (1 + sv14[58]) * (1 + sv14[58]);
        sv14[60] = sv14[53] + sv14[59];
        sv14[61] = sv14[40] + sv14[60];
        sv14[62] = sv14[60] * sv14[39];
        sv14[63] = (1 + sv14[24]) * sv14[51];
        sv14[64] = sv14[45] * sv14[30];
        sv14[65] = sv14[63] + sv14[64];
        sv14[66] = (1 + sv14[58]) * sv14[37];
        sv14[67] = sv14[65] + sv14[66];
        sv14[68] = sv14[67] * sv14[67];
        sv14[69] = sv14[62] + -1 * sv14[68];
        sv14[70] = sv14[19] * sv14[69];
        sv14[71] = (1 + sv14[24]) * sv14[10];
        sv14[72] = (1 + sv14[4]) * sv14[30];
        sv14[73] = sv14[71] + sv14[72];
        sv14[74] = sv14[17] * sv14[37];
        sv14[75] = sv14[73] + sv14[74];
        sv14[76] = (1 + sv14[4]) * sv14[45];
        sv14[77] = sv14[51] * sv14[10];
        sv14[78] = sv14[76] + sv14[77];
        sv14[79] = (1 + sv14[58]) * sv14[17];
        sv14[80] = sv14[78] + sv14[79];
        sv14[81] = sv14[80] * sv14[67];
        sv14[82] = sv14[60] * sv14[75];
        sv14[83] = sv14[81] + -1 * sv14[82];
        sv14[84] = sv14[75] * sv14[83];
        sv14[85] = sv14[70] + sv14[84];
        sv14[86] = sv14[67] * sv14[75];
        sv14[87] = sv14[80] * sv14[39];
        sv14[88] = sv14[86] + -1 * sv14[87];
        sv14[89] = sv14[80] * sv14[88];
        sv14[90] = sv14[85] + sv14[89];
        sv14[91] = sv14[61] / std::pow(sv14[90], 0.3333333333333333);
        sv14[92] = (-3.0 + sv14[91]) * w[4][0];
        sv14[93] = std::pow(sv14[90], w[6][0]);
        sv14[94] = 1.0 / sv14[93] + sv14[93];
        sv14[95] = std::pow(-2.0 + sv14[94], w[7][0]);
        sv14[96] = sv14[95] * w[5][0];
        sv14[97] = sv14[92] + sv14[96];
        sv14[98] = w0_c0 * w[1][0];
        sv14[99] = w0_c1 * w[1][1];
        sv14[100] = sv14[98] + sv14[99];
        sv14[101] = w0_c2 * w[1][2];
        sv14[102] = sv14[100] + sv14[101];
        sv14[103] = sv14[97] + -1 * sv14[102];
        sv14[104] = w[2][0] * sv14[19];
        sv14[105] = w[2][1] * sv14[75];
        sv14[106] = sv14[104] + sv14[105];
        sv14[107] = w[2][2] * sv14[80];
        sv14[108] = sv14[106] + sv14[107];
        sv14[109] = w[2][0] * sv14[108];
        sv14[110] = w[2][0] * sv14[75];
        sv14[111] = w[2][1] * sv14[39];
        sv14[112] = sv14[110] + sv14[111];
        sv14[113] = w[2][2] * sv14[67];
        sv14[114] = sv14[112] + sv14[113];
        sv14[115] = w[2][1] * sv14[114];
        sv14[116] = sv14[109] + sv14[115];
        sv14[117] = w[2][0] * sv14[80];
        sv14[118] = w[2][1] * sv14[67];
        sv14[119] = sv14[117] + sv14[118];
        sv14[120] = w[2][2] * sv14[60];
        sv14[121] = sv14[119] + sv14[120];
        sv14[122] = w[2][2] * sv14[121];
        sv14[123] = sv14[116] + sv14[122];
        sv14[124] = sv14[123] / std::pow(sv14[90], 0.3333333333333333);
        sv14[125] = std::pow(-1 + sv14[124], 2) * w[9][0];
        sv14[126] = std::exp(sv14[125]);
        sv14[127] = (-1 + sv14[126]) * (sp[43] / 2.0);
        sv14[128] = sv14[127] * (-1 + sv14[124] <= 1e-10 ? 0.0 : 1);
        sv14[129] = sv14[103] + sv14[128];
        sv14[130] = w[3][0] * sv14[19];
        sv14[131] = w[3][1] * sv14[75];
        sv14[132] = sv14[130] + sv14[131];
        sv14[133] = w[3][2] * sv14[80];
        sv14[134] = sv14[132] + sv14[133];
        sv14[135] = w[3][0] * sv14[134];
        sv14[136] = w[3][0] * sv14[75];
        sv14[137] = w[3][1] * sv14[39];
        sv14[138] = sv14[136] + sv14[137];
        sv14[139] = w[3][2] * sv14[67];
        sv14[140] = sv14[138] + sv14[139];
        sv14[141] = w[3][1] * sv14[140];
        sv14[142] = sv14[135] + sv14[141];
        sv14[143] = w[3][0] * sv14[80];
        sv14[144] = w[3][1] * sv14[67];
        sv14[145] = sv14[143] + sv14[144];
        sv14[146] = w[3][2] * sv14[60];
        sv14[147] = sv14[145] + sv14[146];
        sv14[148] = w[3][2] * sv14[147];
        sv14[149] = sv14[142] + sv14[148];
        sv14[150] = sv14[149] / std::pow(sv14[90], 0.3333333333333333);
        sv14[151] = std::pow(-1 + sv14[150], 2) * w[9][0];
        sv14[152] = std::exp(sv14[151]);
        sv14[153] = (-1 + sv14[152]) * (sp[43] / 2.0);
        sv14[154] = sv14[153] * (-1 + sv14[150] <= 1e-10 ? 0.0 : 1);
        sv14[155] = sv14[129] + sv14[154];
        sv14[156] = sv14[155] * sp[44];
        const double fw0 = sv14[156] * weights14[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}


hyperelasticityb_exterior_facet_integral_0_1::hyperelasticityb_exterior_facet_integral_0_1() : ufc::exterior_facet_integral()
{

}

hyperelasticityb_exterior_facet_integral_0_1::~hyperelasticityb_exterior_facet_integral_0_1()
{

}

const std::vector<bool> & hyperelasticityb_exterior_facet_integral_0_1::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, false, false, false, false, false, false, false, false, false, true});
return enabled;
}

void hyperelasticityb_exterior_facet_integral_0_1::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    std::size_t facet,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.054975871827661, 0.054975871827661, 0.054975871827661, 0.1116907948390055, 0.1116907948390055, 0.1116907948390055 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D001_F_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE2_C0_F_Q6[4][6][10] =
        { { { 0.0, -0.07480380774819603, 0.5176323419876735, -0.07480380774819671, 0.2992152309927871, 0.03354481152314839, 0.299215230992784, 0.0, 0.0, 0.0 },
            { 0.0, -0.07480380774819607, -0.0748038077481967, 0.5176323419876735, 0.299215230992787, 0.2992152309927841, 0.0335448115231484, 0.0, 0.0, 0.0 },
            { 0.0, 0.5176323419876714, -0.0748038077481966, -0.07480380774819667, 0.0335448115231487, 0.2992152309927867, 0.2992152309927867, 0.0, 0.0, 0.0 },
            { 0.0, -0.04820837781551193, -0.08473049309397783, -0.04820837781551192, 0.1928335112620478, 0.7954802262009063, 0.1928335112620478, 0.0, 0.0, 0.0 },
            { 0.0, -0.04820837781551193, -0.04820837781551179, -0.08473049309397787, 0.1928335112620478, 0.192833511262048, 0.7954802262009061, 0.0, 0.0, 0.0 },
            { 0.0, -0.08473049309397782, -0.04820837781551193, -0.04820837781551199, 0.7954802262009062, 0.192833511262048, 0.1928335112620478, 0.0, 0.0, 0.0 } },
          { { -0.07480380774819598, 0.0, 0.5176323419876735, -0.07480380774819671, 0.2992152309927871, 0.0, 0.0, 0.03354481152314846, 0.2992152309927838, 0.0 },
            { -0.07480380774819598, 0.0, -0.07480380774819673, 0.5176323419876735, 0.299215230992787, 0.0, 0.0, 0.299215230992784, 0.0335448115231483, 0.0 },
            { 0.5176323419876713, 0.0, -0.07480380774819667, -0.0748038077481967, 0.03354481152314873, 0.0, 0.0, 0.2992152309927867, 0.2992152309927867, 0.0 },
            { -0.04820837781551188, 0.0, -0.08473049309397787, -0.048208377815512, 0.1928335112620479, 0.0, 0.0, 0.7954802262009062, 0.1928335112620478, 0.0 },
            { -0.0482083778155119, 0.0, -0.04820837781551199, -0.0847304930939779, 0.1928335112620479, 0.0, 0.0, 0.192833511262048, 0.7954802262009062, 0.0 },
            { -0.0847304930939778, 0.0, -0.04820837781551197, -0.04820837781551202, 0.7954802262009062, 0.0, 0.0, 0.192833511262048, 0.1928335112620478, 0.0 } },
          { { -0.07480380774819595, 0.5176323419876734, 0.0, -0.07480380774819667, 0.0, 0.2992152309927871, 0.0, 0.03354481152314845, 0.0, 0.2992152309927838 },
            { -0.07480380774819601, -0.07480380774819666, 0.0, 0.5176323419876735, 0.0, 0.2992152309927871, 0.0, 0.2992152309927839, 0.0, 0.03354481152314839 },
            { 0.5176323419876713, -0.07480380774819663, 0.0, -0.0748038077481967, 0.0, 0.03354481152314868, 0.0, 0.2992152309927868, 0.0, 0.2992152309927867 },
            { -0.0482083778155119, -0.08473049309397784, 0.0, -0.04820837781551197, 0.0, 0.1928335112620479, 0.0, 0.7954802262009063, 0.0, 0.1928335112620479 },
            { -0.04820837781551187, -0.04820837781551189, 0.0, -0.08473049309397787, 0.0, 0.1928335112620478, 0.0, 0.192833511262048, 0.0, 0.7954802262009062 },
            { -0.08473049309397783, -0.04820837781551194, 0.0, -0.0482083778155119, 0.0, 0.7954802262009063, 0.0, 0.192833511262048, 0.0, 0.1928335112620479 } },
          { { -0.07480380774819596, 0.5176323419876736, -0.07480380774819662, 0.0, 0.0, 0.0, 0.2992152309927871, 0.0, 0.03354481152314816, 0.2992152309927838 },
            { -0.07480380774819598, -0.07480380774819663, 0.5176323419876736, 0.0, 0.0, 0.0, 0.2992152309927871, 0.0, 0.2992152309927838, 0.03354481152314835 },
            { 0.5176323419876714, -0.0748038077481966, -0.07480380774819664, 0.0, 0.0, 0.0, 0.03354481152314867, 0.0, 0.2992152309927867, 0.2992152309927867 },
            { -0.04820837781551188, -0.08473049309397777, -0.04820837781551191, 0.0, 0.0, 0.0, 0.1928335112620479, 0.0, 0.7954802262009061, 0.1928335112620479 },
            { -0.04820837781551187, -0.04820837781551188, -0.08473049309397783, 0.0, 0.0, 0.0, 0.1928335112620479, 0.0, 0.1928335112620478, 0.7954802262009062 },
            { -0.08473049309397776, -0.04820837781551189, -0.04820837781551179, 0.0, 0.0, 0.0, 0.7954802262009062, 0.0, 0.1928335112620476, 0.192833511262048 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[7] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[11] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[10] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[8] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[3] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[6] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[5] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[4] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[9] * FE12_C0_D001_F_Q6[0][0][1];
    alignas(32) double sp[115];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = tetrahedron_reference_facet_normals[facet][0] * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = tetrahedron_reference_facet_normals[facet][1] * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = tetrahedron_reference_facet_normals[facet][2] * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = sp[23] * sp[23];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = tetrahedron_reference_facet_normals[facet][0] * sp[28];
    sp[30] = J_c0 * J_c8;
    sp[31] = J_c6 * (-1 * J_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = tetrahedron_reference_facet_normals[facet][1] * sp[33];
    sp[35] = sp[29] + sp[34];
    sp[36] = J_c1 * J_c6;
    sp[37] = J_c0 * J_c7;
    sp[38] = sp[36] + -1 * sp[37];
    sp[39] = sp[38] / sp[13];
    sp[40] = tetrahedron_reference_facet_normals[facet][2] * sp[39];
    sp[41] = sp[35] + sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = sp[24] + sp[42];
    sp[44] = J_c1 * J_c5;
    sp[45] = J_c2 * J_c4;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = tetrahedron_reference_facet_normals[facet][0] * sp[47];
    sp[49] = J_c2 * J_c3;
    sp[50] = J_c0 * J_c5;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = tetrahedron_reference_facet_normals[facet][1] * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = J_c0 * J_c4;
    sp[56] = J_c1 * J_c3;
    sp[57] = sp[55] + -1 * sp[56];
    sp[58] = sp[57] / sp[13];
    sp[59] = tetrahedron_reference_facet_normals[facet][2] * sp[58];
    sp[60] = sp[54] + sp[59];
    sp[61] = sp[60] * sp[60];
    sp[62] = sp[43] + sp[61];
    sp[63] = std::sqrt(sp[62]);
    sp[64] = sp[23] / sp[63];
    sp[65] = -1 * w[10][0] * sp[64];
    sp[66] = sp[41] / sp[63];
    sp[67] = -1 * w[10][0] * sp[66];
    sp[68] = sp[60] / sp[63];
    sp[69] = -1 * w[10][0] * sp[68];
    sp[70] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[71] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[72] = sp[70] + sp[71];
    sp[73] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[74] = sp[72] + sp[73];
    sp[75] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[76] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[77] = sp[75] + sp[76];
    sp[78] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[79] = sp[77] + sp[78];
    sp[80] = sp[74] * sp[79];
    sp[81] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[82] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[83] = sp[81] + sp[82];
    sp[84] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[85] = sp[83] + sp[84];
    sp[86] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[87] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[88] = sp[86] + sp[87];
    sp[89] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[90] = sp[88] + sp[89];
    sp[91] = sp[85] * sp[90];
    sp[92] = sp[80] + -1 * sp[91];
    sp[93] = sp[92] * sp[92];
    sp[94] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[95] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[96] = sp[94] + sp[95];
    sp[97] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * sp[90];
    sp[100] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[101] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[102] = sp[100] + sp[101];
    sp[103] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * sp[79];
    sp[106] = sp[99] + -1 * sp[105];
    sp[107] = sp[106] * sp[106];
    sp[108] = sp[93] + sp[107];
    sp[109] = sp[104] * sp[85];
    sp[110] = sp[74] * sp[98];
    sp[111] = sp[109] + -1 * sp[110];
    sp[112] = sp[111] * sp[111];
    sp[113] = sp[108] + sp[112];
    sp[114] = std::sqrt(sp[113]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c0 += w[0][ic] * FE2_C0_F_Q6[facet][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c1 += w[0][ic + 10] * FE2_C0_F_Q6[facet][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c2 += w[0][ic + 20] * FE2_C0_F_Q6[facet][iq][ic];
        alignas(32) double sv6[6];
        sv6[0] = w0_c0 * sp[65];
        sv6[1] = w0_c1 * sp[67];
        sv6[2] = sv6[0] + sv6[1];
        sv6[3] = w0_c2 * sp[69];
        sv6[4] = sv6[2] + sv6[3];
        sv6[5] = -1 * sv6[4] * sp[114];
        const double fw0 = sv6[5] * weights6[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}


hyperelasticityb_cell_integral_1_otherwise::hyperelasticityb_cell_integral_1_otherwise() : ufc::cell_integral()
{

}

hyperelasticityb_cell_integral_1_otherwise::~hyperelasticityb_cell_integral_1_otherwise()
{

}

const std::vector<bool> & hyperelasticityb_cell_integral_1_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true});
return enabled;
}

void hyperelasticityb_cell_integral_1_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 108
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE33_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000003, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000005, 0.0, -2.0, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 1.999999999999998, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000004, 0.0, 2.0, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991836, -0.5978929390991861, 0.4021070609008199, 2.793678817297555, 0.0, -0.4021070609008182, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008198, 0.4021070609008229, 2.391571756396729, -0.4021070609008185, -0.4021070609008184 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008144, 0.4021070609008263, -2.39157175639673, -0.4021070609008171, -0.402107060900819 },
            { 0.5978929390991841, -0.5978929390991863, 2.79367881729755, 0.4021070609008244, 0.0, -2.793678817297547, -0.4021070609008175 },
            { -0.2574914939727682, 0.2574914939727652, 1.257491493972769, 0.2275255180816996, 0.0, -1.257491493972769, -0.2275255180816941 },
            { 0.7724744819183069, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727681, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891075, -1.257491493972769, -1.257491493972769 },
            { -0.257491493972768, 0.2574914939727655, 0.2275255180816934, 1.257491493972776, 0.0, -0.2275255180816934, -1.25749149397277 } } };
    alignas(32) static const double FE33_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.000000000000001 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000003, -1.999999999999999 },
            { -1.0, -1.0, 0.0, 2.000000000000007, 0.0, 1.999999999999998, -2.000000000000001 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991843, -0.5978929390991847, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991851, 0.4021070609008187, 0.4021070609008227, -0.4021070609008185, 2.391571756396729, -0.4021070609008189 },
            { 0.5978929390991842, -0.5978929390991837, 2.793678817297549, 0.4021070609008198, -2.793678817297548, 0.0, -0.4021070609008182 },
            { 0.5978929390991838, 1.793678817297543, 0.402107060900819, 0.4021070609008254, -0.4021070609008185, -2.39157175639673, -0.4021070609008194 },
            { -0.2574914939727676, 0.2574914939727658, 1.25749149397277, 0.2275255180816987, -1.25749149397277, 0.0, -0.2275255180816943 },
            { 0.7724744819183077, 0.2574914939727662, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727675, 0.2574914939727655, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.257491493972769 },
            { -0.2574914939727673, -0.7724744819183084, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE33_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -1.999999999999999 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 1.999999999999999 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999999 },
            { 0.5978929390991834, 1.793678817297545, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396729 },
            { -1.793678817297545, -0.5978929390991823, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396728 },
            { 0.597892939099184, -0.5978929390991828, 2.79367881729755, 0.402107060900818, -2.793678817297549, -0.402107060900818, 0.0 },
            { 0.5978929390991843, -0.5978929390991833, 0.4021070609008183, 2.793678817297548, -0.4021070609008183, -2.793678817297549, 0.0 },
            { -0.2574914939727672, -0.772474481918307, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183076, 0.2574914939727675, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727678, 0.2574914939727679, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727674, 0.2574914939727682, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.227525518081694, 0.0 } } };
    alignas(32) static const double FE43_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE43_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE43_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE43_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE43_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE43_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE43_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE43_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE43_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE43_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE43_C0_D001_Q14[0][0][1];
    alignas(32) double sp[378];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = sp[19] + sp[19];
    sp[26] = sp[20] + sp[20];
    sp[27] = sp[21] + sp[21];
    sp[28] = sp[22] + sp[22];
    sp[29] = sp[23] + sp[23];
    sp[30] = sp[24] + sp[24];
    sp[31] = J_c2 * J_c7;
    sp[32] = J_c8 * (-1 * J_c1);
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c0 * J_c8;
    sp[36] = J_c6 * (-1 * J_c2);
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c1 * J_c6;
    sp[40] = J_c0 * J_c7;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = sp[34] * sp[34];
    sp[44] = sp[34] * sp[38];
    sp[45] = sp[34] * sp[42];
    sp[46] = sp[38] * sp[38];
    sp[47] = sp[38] * sp[42];
    sp[48] = sp[42] * sp[42];
    sp[49] = sp[43] + sp[43];
    sp[50] = sp[44] + sp[44];
    sp[51] = sp[45] + sp[45];
    sp[52] = sp[46] + sp[46];
    sp[53] = sp[47] + sp[47];
    sp[54] = sp[48] + sp[48];
    sp[55] = sp[49] + sp[25];
    sp[56] = sp[50] + sp[26];
    sp[57] = sp[51] + sp[27];
    sp[58] = sp[52] + sp[28];
    sp[59] = sp[53] + sp[29];
    sp[60] = sp[30] + sp[54];
    sp[61] = J_c1 * J_c5;
    sp[62] = J_c2 * J_c4;
    sp[63] = sp[61] + -1 * sp[62];
    sp[64] = sp[63] / sp[13];
    sp[65] = J_c2 * J_c3;
    sp[66] = J_c0 * J_c5;
    sp[67] = sp[65] + -1 * sp[66];
    sp[68] = sp[67] / sp[13];
    sp[69] = J_c0 * J_c4;
    sp[70] = J_c1 * J_c3;
    sp[71] = sp[69] + -1 * sp[70];
    sp[72] = sp[71] / sp[13];
    sp[73] = sp[64] * sp[64];
    sp[74] = sp[64] * sp[68];
    sp[75] = sp[72] * sp[64];
    sp[76] = sp[68] * sp[68];
    sp[77] = sp[72] * sp[68];
    sp[78] = sp[72] * sp[72];
    sp[79] = sp[73] + sp[73];
    sp[80] = sp[74] + sp[74];
    sp[81] = sp[75] + sp[75];
    sp[82] = sp[76] + sp[76];
    sp[83] = sp[77] + sp[77];
    sp[84] = sp[78] + sp[78];
    sp[85] = sp[55] + sp[79];
    sp[86] = sp[56] + sp[80];
    sp[87] = sp[57] + sp[81];
    sp[88] = sp[58] + sp[82];
    sp[89] = sp[59] + sp[83];
    sp[90] = sp[60] + sp[84];
    sp[91] = sp[34] * sp[64];
    sp[92] = sp[38] * sp[64];
    sp[93] = sp[64] * sp[42];
    sp[94] = sp[34] * sp[68];
    sp[95] = sp[38] * sp[68];
    sp[96] = sp[68] * sp[42];
    sp[97] = sp[34] * sp[72];
    sp[98] = sp[38] * sp[72];
    sp[99] = sp[72] * sp[42];
    sp[100] = sp[91] + sp[91];
    sp[101] = sp[92] + sp[94];
    sp[102] = sp[97] + sp[93];
    sp[103] = sp[95] + sp[95];
    sp[104] = sp[98] + sp[96];
    sp[105] = sp[99] + sp[99];
    sp[106] = sp[64] * sp[14];
    sp[107] = sp[64] * sp[17];
    sp[108] = sp[64] * sp[18];
    sp[109] = sp[68] * sp[14];
    sp[110] = sp[68] * sp[17];
    sp[111] = sp[68] * sp[18];
    sp[112] = sp[72] * sp[14];
    sp[113] = sp[72] * sp[17];
    sp[114] = sp[72] * sp[18];
    sp[115] = sp[106] + sp[106];
    sp[116] = sp[109] + sp[107];
    sp[117] = sp[108] + sp[112];
    sp[118] = sp[110] + sp[110];
    sp[119] = sp[111] + sp[113];
    sp[120] = sp[114] + sp[114];
    sp[121] = sp[34] * sp[14];
    sp[122] = sp[38] * sp[14];
    sp[123] = sp[42] * sp[14];
    sp[124] = sp[34] * sp[17];
    sp[125] = sp[38] * sp[17];
    sp[126] = sp[42] * sp[17];
    sp[127] = sp[34] * sp[18];
    sp[128] = sp[38] * sp[18];
    sp[129] = sp[18] * sp[42];
    sp[130] = sp[121] + sp[121];
    sp[131] = sp[122] + sp[124];
    sp[132] = sp[127] + sp[123];
    sp[133] = sp[125] + sp[125];
    sp[134] = sp[128] + sp[126];
    sp[135] = sp[129] + sp[129];
    sp[136] = w[1][0] * sp[25];
    sp[137] = w[1][0] * sp[26];
    sp[138] = w[1][0] * sp[27];
    sp[139] = w[1][0] * sp[28];
    sp[140] = w[1][0] * sp[29];
    sp[141] = w[1][0] * sp[30];
    sp[142] = w[1][1] * sp[130];
    sp[143] = w[1][1] * sp[131];
    sp[144] = w[1][1] * sp[132];
    sp[145] = w[1][1] * sp[133];
    sp[146] = w[1][1] * sp[134];
    sp[147] = w[1][1] * sp[135];
    sp[148] = sp[142] + sp[136];
    sp[149] = sp[143] + sp[137];
    sp[150] = sp[138] + sp[144];
    sp[151] = sp[145] + sp[139];
    sp[152] = sp[140] + sp[146];
    sp[153] = sp[141] + sp[147];
    sp[154] = w[1][2] * sp[115];
    sp[155] = w[1][2] * sp[116];
    sp[156] = w[1][2] * sp[117];
    sp[157] = w[1][2] * sp[118];
    sp[158] = w[1][2] * sp[119];
    sp[159] = w[1][2] * sp[120];
    sp[160] = sp[148] + sp[154];
    sp[161] = sp[149] + sp[155];
    sp[162] = sp[150] + sp[156];
    sp[163] = sp[151] + sp[157];
    sp[164] = sp[152] + sp[158];
    sp[165] = sp[153] + sp[159];
    sp[166] = w[1][0] * sp[160];
    sp[167] = w[1][0] * sp[161];
    sp[168] = w[1][0] * sp[162];
    sp[169] = w[1][0] * sp[163];
    sp[170] = w[1][0] * sp[164];
    sp[171] = w[1][0] * sp[165];
    sp[172] = w[1][0] * sp[130];
    sp[173] = w[1][0] * sp[131];
    sp[174] = w[1][0] * sp[132];
    sp[175] = w[1][0] * sp[133];
    sp[176] = w[1][0] * sp[134];
    sp[177] = w[1][0] * sp[135];
    sp[178] = w[1][1] * sp[49];
    sp[179] = w[1][1] * sp[50];
    sp[180] = w[1][1] * sp[51];
    sp[181] = w[1][1] * sp[52];
    sp[182] = w[1][1] * sp[53];
    sp[183] = w[1][1] * sp[54];
    sp[184] = sp[178] + sp[172];
    sp[185] = sp[179] + sp[173];
    sp[186] = sp[180] + sp[174];
    sp[187] = sp[181] + sp[175];
    sp[188] = sp[182] + sp[176];
    sp[189] = sp[177] + sp[183];
    sp[190] = w[1][2] * sp[100];
    sp[191] = w[1][2] * sp[101];
    sp[192] = w[1][2] * sp[102];
    sp[193] = w[1][2] * sp[103];
    sp[194] = w[1][2] * sp[104];
    sp[195] = w[1][2] * sp[105];
    sp[196] = sp[184] + sp[190];
    sp[197] = sp[185] + sp[191];
    sp[198] = sp[186] + sp[192];
    sp[199] = sp[187] + sp[193];
    sp[200] = sp[188] + sp[194];
    sp[201] = sp[189] + sp[195];
    sp[202] = w[1][1] * sp[196];
    sp[203] = w[1][1] * sp[197];
    sp[204] = w[1][1] * sp[198];
    sp[205] = w[1][1] * sp[199];
    sp[206] = w[1][1] * sp[200];
    sp[207] = w[1][1] * sp[201];
    sp[208] = sp[202] + sp[166];
    sp[209] = sp[203] + sp[167];
    sp[210] = sp[204] + sp[168];
    sp[211] = sp[205] + sp[169];
    sp[212] = sp[206] + sp[170];
    sp[213] = sp[171] + sp[207];
    sp[214] = w[1][0] * sp[115];
    sp[215] = w[1][0] * sp[116];
    sp[216] = w[1][0] * sp[117];
    sp[217] = w[1][0] * sp[118];
    sp[218] = w[1][0] * sp[119];
    sp[219] = w[1][0] * sp[120];
    sp[220] = w[1][1] * sp[100];
    sp[221] = w[1][1] * sp[101];
    sp[222] = w[1][1] * sp[102];
    sp[223] = w[1][1] * sp[103];
    sp[224] = w[1][1] * sp[104];
    sp[225] = w[1][1] * sp[105];
    sp[226] = sp[220] + sp[214];
    sp[227] = sp[221] + sp[215];
    sp[228] = sp[222] + sp[216];
    sp[229] = sp[223] + sp[217];
    sp[230] = sp[224] + sp[218];
    sp[231] = sp[219] + sp[225];
    sp[232] = w[1][2] * sp[79];
    sp[233] = w[1][2] * sp[80];
    sp[234] = w[1][2] * sp[81];
    sp[235] = w[1][2] * sp[82];
    sp[236] = w[1][2] * sp[83];
    sp[237] = w[1][2] * sp[84];
    sp[238] = sp[226] + sp[232];
    sp[239] = sp[227] + sp[233];
    sp[240] = sp[228] + sp[234];
    sp[241] = sp[229] + sp[235];
    sp[242] = sp[230] + sp[236];
    sp[243] = sp[231] + sp[237];
    sp[244] = w[1][2] * sp[238];
    sp[245] = w[1][2] * sp[239];
    sp[246] = w[1][2] * sp[240];
    sp[247] = w[1][2] * sp[241];
    sp[248] = w[1][2] * sp[242];
    sp[249] = w[1][2] * sp[243];
    sp[250] = sp[208] + sp[244];
    sp[251] = sp[209] + sp[245];
    sp[252] = sp[210] + sp[246];
    sp[253] = sp[211] + sp[247];
    sp[254] = sp[212] + sp[248];
    sp[255] = sp[213] + sp[249];
    sp[256] = w[7][0] / w[8][0];
    sp[257] = w[2][0] * sp[25];
    sp[258] = w[2][0] * sp[26];
    sp[259] = w[2][0] * sp[27];
    sp[260] = w[2][0] * sp[28];
    sp[261] = w[2][0] * sp[29];
    sp[262] = w[2][0] * sp[30];
    sp[263] = w[2][1] * sp[130];
    sp[264] = w[2][1] * sp[131];
    sp[265] = w[2][1] * sp[132];
    sp[266] = w[2][1] * sp[133];
    sp[267] = w[2][1] * sp[134];
    sp[268] = w[2][1] * sp[135];
    sp[269] = sp[263] + sp[257];
    sp[270] = sp[264] + sp[258];
    sp[271] = sp[259] + sp[265];
    sp[272] = sp[266] + sp[260];
    sp[273] = sp[261] + sp[267];
    sp[274] = sp[262] + sp[268];
    sp[275] = w[2][2] * sp[115];
    sp[276] = w[2][2] * sp[116];
    sp[277] = w[2][2] * sp[117];
    sp[278] = w[2][2] * sp[118];
    sp[279] = w[2][2] * sp[119];
    sp[280] = w[2][2] * sp[120];
    sp[281] = sp[269] + sp[275];
    sp[282] = sp[270] + sp[276];
    sp[283] = sp[271] + sp[277];
    sp[284] = sp[272] + sp[278];
    sp[285] = sp[273] + sp[279];
    sp[286] = sp[274] + sp[280];
    sp[287] = w[2][0] * sp[281];
    sp[288] = w[2][0] * sp[282];
    sp[289] = w[2][0] * sp[283];
    sp[290] = w[2][0] * sp[284];
    sp[291] = w[2][0] * sp[285];
    sp[292] = w[2][0] * sp[286];
    sp[293] = w[2][0] * sp[130];
    sp[294] = w[2][0] * sp[131];
    sp[295] = w[2][0] * sp[132];
    sp[296] = w[2][0] * sp[133];
    sp[297] = w[2][0] * sp[134];
    sp[298] = w[2][0] * sp[135];
    sp[299] = w[2][1] * sp[49];
    sp[300] = w[2][1] * sp[50];
    sp[301] = w[2][1] * sp[51];
    sp[302] = w[2][1] * sp[52];
    sp[303] = w[2][1] * sp[53];
    sp[304] = w[2][1] * sp[54];
    sp[305] = sp[299] + sp[293];
    sp[306] = sp[300] + sp[294];
    sp[307] = sp[301] + sp[295];
    sp[308] = sp[302] + sp[296];
    sp[309] = sp[303] + sp[297];
    sp[310] = sp[298] + sp[304];
    sp[311] = w[2][2] * sp[100];
    sp[312] = w[2][2] * sp[101];
    sp[313] = w[2][2] * sp[102];
    sp[314] = w[2][2] * sp[103];
    sp[315] = w[2][2] * sp[104];
    sp[316] = w[2][2] * sp[105];
    sp[317] = sp[305] + sp[311];
    sp[318] = sp[306] + sp[312];
    sp[319] = sp[307] + sp[313];
    sp[320] = sp[308] + sp[314];
    sp[321] = sp[309] + sp[315];
    sp[322] = sp[310] + sp[316];
    sp[323] = w[2][1] * sp[317];
    sp[324] = w[2][1] * sp[318];
    sp[325] = w[2][1] * sp[319];
    sp[326] = w[2][1] * sp[320];
    sp[327] = w[2][1] * sp[321];
    sp[328] = w[2][1] * sp[322];
    sp[329] = sp[323] + sp[287];
    sp[330] = sp[324] + sp[288];
    sp[331] = sp[325] + sp[289];
    sp[332] = sp[326] + sp[290];
    sp[333] = sp[327] + sp[291];
    sp[334] = sp[292] + sp[328];
    sp[335] = w[2][0] * sp[115];
    sp[336] = w[2][0] * sp[116];
    sp[337] = w[2][0] * sp[117];
    sp[338] = w[2][0] * sp[118];
    sp[339] = w[2][0] * sp[119];
    sp[340] = w[2][0] * sp[120];
    sp[341] = w[2][1] * sp[100];
    sp[342] = w[2][1] * sp[101];
    sp[343] = w[2][1] * sp[102];
    sp[344] = w[2][1] * sp[103];
    sp[345] = w[2][1] * sp[104];
    sp[346] = w[2][1] * sp[105];
    sp[347] = sp[341] + sp[335];
    sp[348] = sp[342] + sp[336];
    sp[349] = sp[343] + sp[337];
    sp[350] = sp[344] + sp[338];
    sp[351] = sp[345] + sp[339];
    sp[352] = sp[340] + sp[346];
    sp[353] = w[2][2] * sp[79];
    sp[354] = w[2][2] * sp[80];
    sp[355] = w[2][2] * sp[81];
    sp[356] = w[2][2] * sp[82];
    sp[357] = w[2][2] * sp[83];
    sp[358] = w[2][2] * sp[84];
    sp[359] = sp[347] + sp[353];
    sp[360] = sp[348] + sp[354];
    sp[361] = sp[349] + sp[355];
    sp[362] = sp[350] + sp[356];
    sp[363] = sp[351] + sp[357];
    sp[364] = sp[352] + sp[358];
    sp[365] = w[2][2] * sp[359];
    sp[366] = w[2][2] * sp[360];
    sp[367] = w[2][2] * sp[361];
    sp[368] = w[2][2] * sp[362];
    sp[369] = w[2][2] * sp[363];
    sp[370] = w[2][2] * sp[364];
    sp[371] = sp[329] + sp[365];
    sp[372] = sp[330] + sp[366];
    sp[373] = sp[331] + sp[367];
    sp[374] = sp[332] + sp[368];
    sp[375] = sp[333] + sp[369];
    sp[376] = sp[334] + sp[370];
    sp[377] = std::abs(sp[13]);
    alignas(32) double BF0[7][7] = {};
    alignas(32) double BF1[7][7] = {};
    alignas(32) double BF2[7][7] = {};
    alignas(32) double BF3[7][7] = {};
    alignas(32) double BF4[7][7] = {};
    alignas(32) double BF5[7][7] = {};
    alignas(32) double BF6[7][7] = {};
    alignas(32) double BF7[7][7] = {};
    alignas(32) double BF8[7][7] = {};
    alignas(32) double BF9[7][7] = {};
    alignas(32) double BF10[7][7] = {};
    alignas(32) double BF11[7][7] = {};
    alignas(32) double BF12[7][7] = {};
    alignas(32) double BF13[7][7] = {};
    alignas(32) double BF14[7][7] = {};
    alignas(32) double BF15[7][7] = {};
    alignas(32) double BF16[7][7] = {};
    alignas(32) double BF17[7][7] = {};
    alignas(32) double BF18[7][7] = {};
    alignas(32) double BF19[7][7] = {};
    alignas(32) double BF20[7][7] = {};
    alignas(32) double BF21[7][7] = {};
    alignas(32) double BF22[7][7] = {};
    alignas(32) double BF23[7][7] = {};
    alignas(32) double BF24[7][7] = {};
    alignas(32) double BF25[7][7] = {};
    alignas(32) double BF26[7][7] = {};
    alignas(32) double BF27[7][7] = {};
    alignas(32) double BF28[7][7] = {};
    alignas(32) double BF29[7][7] = {};
    alignas(32) double BF30[7][7] = {};
    alignas(32) double BF31[7][7] = {};
    alignas(32) double BF32[7][7] = {};
    alignas(32) double BF33[7][7] = {};
    alignas(32) double BF34[7][7] = {};
    alignas(32) double BF35[7][7] = {};
    alignas(32) double BF36[7][7] = {};
    alignas(32) double BF37[7][7] = {};
    alignas(32) double BF38[7][7] = {};
    alignas(32) double BF39[7][7] = {};
    alignas(32) double BF40[7][7] = {};
    alignas(32) double BF41[7][7] = {};
    alignas(32) double BF42[7][7] = {};
    alignas(32) double BF43[7][7] = {};
    alignas(32) double BF44[7][7] = {};
    alignas(32) double BF45[7][7] = {};
    alignas(32) double BF46[7][7] = {};
    alignas(32) double BF47[7][7] = {};
    alignas(32) double BF48[7][7] = {};
    alignas(32) double BF49[7][7] = {};
    alignas(32) double BF50[7][7] = {};
    alignas(32) double BF51[7][7] = {};
    alignas(32) double BF52[7][7] = {};
    alignas(32) double BF53[7][7] = {};
    alignas(32) double BF54[7][7] = {};
    alignas(32) double BF55[7][7] = {};
    alignas(32) double BF56[7][7] = {};
    alignas(32) double BF57[7][7] = {};
    alignas(32) double BF58[7][7] = {};
    alignas(32) double BF59[7][7] = {};
    alignas(32) double BF60[7][7] = {};
    alignas(32) double BF61[7][7] = {};
    alignas(32) double BF62[7][7] = {};
    alignas(32) double BF63[7][7] = {};
    alignas(32) double BF64[7][7] = {};
    alignas(32) double BF65[7][7] = {};
    alignas(32) double BF66[7][7] = {};
    alignas(32) double BF67[7][7] = {};
    alignas(32) double BF68[7][7] = {};
    alignas(32) double BF69[7][7] = {};
    alignas(32) double BF70[7][7] = {};
    alignas(32) double BF71[7][7] = {};
    alignas(32) double BF72[7][7] = {};
    alignas(32) double BF73[7][7] = {};
    alignas(32) double BF74[7][7] = {};
    alignas(32) double BF75[7][7] = {};
    alignas(32) double BF76[7][7] = {};
    alignas(32) double BF77[7][7] = {};
    alignas(32) double BF78[7][7] = {};
    alignas(32) double BF79[7][7] = {};
    alignas(32) double BF80[7][7] = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c0 = w[0][0] * FE33_C0_D100_Q14[0][iq][0] + w[0][1] * FE33_C0_D100_Q14[0][iq][1] + w[0][5] * FE33_C0_D100_Q14[0][iq][2] + w[0][6] * FE33_C0_D100_Q14[0][iq][3] + w[0][7] * FE33_C0_D100_Q14[0][iq][4] + w[0][8] * FE33_C0_D100_Q14[0][iq][5] + w[0][9] * FE33_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE33_C0_D010_Q14[0][iq][0] + w[0][2] * FE33_C0_D010_Q14[0][iq][1] + w[0][4] * FE33_C0_D010_Q14[0][iq][2] + w[0][6] * FE33_C0_D010_Q14[0][iq][3] + w[0][7] * FE33_C0_D010_Q14[0][iq][4] + w[0][8] * FE33_C0_D010_Q14[0][iq][5] + w[0][9] * FE33_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE33_C0_D001_Q14[0][iq][0] + w[0][3] * FE33_C0_D001_Q14[0][iq][1] + w[0][4] * FE33_C0_D001_Q14[0][iq][2] + w[0][5] * FE33_C0_D001_Q14[0][iq][3] + w[0][7] * FE33_C0_D001_Q14[0][iq][4] + w[0][8] * FE33_C0_D001_Q14[0][iq][5] + w[0][9] * FE33_C0_D001_Q14[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE33_C0_D100_Q14[0][iq][0] + w[0][11] * FE33_C0_D100_Q14[0][iq][1] + w[0][15] * FE33_C0_D100_Q14[0][iq][2] + w[0][16] * FE33_C0_D100_Q14[0][iq][3] + w[0][17] * FE33_C0_D100_Q14[0][iq][4] + w[0][18] * FE33_C0_D100_Q14[0][iq][5] + w[0][19] * FE33_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE33_C0_D010_Q14[0][iq][0] + w[0][12] * FE33_C0_D010_Q14[0][iq][1] + w[0][14] * FE33_C0_D010_Q14[0][iq][2] + w[0][16] * FE33_C0_D010_Q14[0][iq][3] + w[0][17] * FE33_C0_D010_Q14[0][iq][4] + w[0][18] * FE33_C0_D010_Q14[0][iq][5] + w[0][19] * FE33_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE33_C0_D001_Q14[0][iq][0] + w[0][13] * FE33_C0_D001_Q14[0][iq][1] + w[0][14] * FE33_C0_D001_Q14[0][iq][2] + w[0][15] * FE33_C0_D001_Q14[0][iq][3] + w[0][17] * FE33_C0_D001_Q14[0][iq][4] + w[0][18] * FE33_C0_D001_Q14[0][iq][5] + w[0][19] * FE33_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE33_C0_D100_Q14[0][iq][0] + w[0][21] * FE33_C0_D100_Q14[0][iq][1] + w[0][25] * FE33_C0_D100_Q14[0][iq][2] + w[0][26] * FE33_C0_D100_Q14[0][iq][3] + w[0][27] * FE33_C0_D100_Q14[0][iq][4] + w[0][28] * FE33_C0_D100_Q14[0][iq][5] + w[0][29] * FE33_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE33_C0_D010_Q14[0][iq][0] + w[0][22] * FE33_C0_D010_Q14[0][iq][1] + w[0][24] * FE33_C0_D010_Q14[0][iq][2] + w[0][26] * FE33_C0_D010_Q14[0][iq][3] + w[0][27] * FE33_C0_D010_Q14[0][iq][4] + w[0][28] * FE33_C0_D010_Q14[0][iq][5] + w[0][29] * FE33_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE33_C0_D001_Q14[0][iq][0] + w[0][23] * FE33_C0_D001_Q14[0][iq][1] + w[0][24] * FE33_C0_D001_Q14[0][iq][2] + w[0][25] * FE33_C0_D001_Q14[0][iq][3] + w[0][27] * FE33_C0_D001_Q14[0][iq][4] + w[0][28] * FE33_C0_D001_Q14[0][iq][5] + w[0][29] * FE33_C0_D001_Q14[0][iq][6];
        alignas(32) double sv14[8229];
        sv14[0] = w0_d0_c0 * sp[34];
        sv14[1] = w0_d1_c0 * sp[38];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c0 * sp[42];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = sv14[4] * sp[34];
        sv14[6] = sv14[4] * sp[38];
        sv14[7] = sv14[4] * sp[42];
        sv14[8] = sv14[5] + sv14[5];
        sv14[9] = sv14[6] + sv14[6];
        sv14[10] = sv14[7] + sv14[7];
        sv14[11] = w0_d0_c1 * sp[34];
        sv14[12] = w0_d1_c1 * sp[38];
        sv14[13] = sv14[11] + sv14[12];
        sv14[14] = w0_d2_c1 * sp[42];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = (1 + sv14[15]) * sp[34];
        sv14[17] = (1 + sv14[15]) * sp[38];
        sv14[18] = (1 + sv14[15]) * sp[42];
        sv14[19] = sv14[16] + sv14[16];
        sv14[20] = sv14[17] + sv14[17];
        sv14[21] = sv14[18] + sv14[18];
        sv14[22] = w0_d0_c2 * sp[34];
        sv14[23] = w0_d1_c2 * sp[38];
        sv14[24] = sv14[22] + sv14[23];
        sv14[25] = w0_d2_c2 * sp[42];
        sv14[26] = sv14[24] + sv14[25];
        sv14[27] = sv14[26] * sp[34];
        sv14[28] = sv14[26] * sp[38];
        sv14[29] = sv14[26] * sp[42];
        sv14[30] = sv14[27] + sv14[27];
        sv14[31] = sv14[28] + sv14[28];
        sv14[32] = sv14[29] + sv14[29];
        sv14[33] = w0_d0_c0 * sp[64];
        sv14[34] = w0_d1_c0 * sp[68];
        sv14[35] = sv14[33] + sv14[34];
        sv14[36] = w0_d2_c0 * sp[72];
        sv14[37] = sv14[35] + sv14[36];
        sv14[38] = sv14[37] * sv14[37];
        sv14[39] = w0_d0_c1 * sp[64];
        sv14[40] = w0_d1_c1 * sp[68];
        sv14[41] = sv14[39] + sv14[40];
        sv14[42] = w0_d2_c1 * sp[72];
        sv14[43] = sv14[41] + sv14[42];
        sv14[44] = sv14[43] * sv14[43];
        sv14[45] = sv14[38] + sv14[44];
        sv14[46] = w0_d0_c2 * sp[64];
        sv14[47] = w0_d1_c2 * sp[68];
        sv14[48] = sv14[46] + sv14[47];
        sv14[49] = w0_d2_c2 * sp[72];
        sv14[50] = sv14[48] + sv14[49];
        sv14[51] = (1 + sv14[50]) * (1 + sv14[50]);
        sv14[52] = sv14[45] + sv14[51];
        sv14[53] = sv14[52] * sv14[8];
        sv14[54] = sv14[52] * sv14[9];
        sv14[55] = sv14[52] * sv14[10];
        sv14[56] = sv14[52] * sv14[19];
        sv14[57] = sv14[52] * sv14[20];
        sv14[58] = sv14[52] * sv14[21];
        sv14[59] = sv14[52] * sv14[30];
        sv14[60] = sv14[52] * sv14[31];
        sv14[61] = sv14[52] * sv14[32];
        sv14[62] = sv14[37] * sp[64];
        sv14[63] = sv14[37] * sp[68];
        sv14[64] = sv14[37] * sp[72];
        sv14[65] = sv14[62] + sv14[62];
        sv14[66] = sv14[63] + sv14[63];
        sv14[67] = sv14[64] + sv14[64];
        sv14[68] = sv14[43] * sp[64];
        sv14[69] = sv14[43] * sp[68];
        sv14[70] = sv14[43] * sp[72];
        sv14[71] = sv14[68] + sv14[68];
        sv14[72] = sv14[69] + sv14[69];
        sv14[73] = sv14[70] + sv14[70];
        sv14[74] = (1 + sv14[50]) * sp[64];
        sv14[75] = (1 + sv14[50]) * sp[68];
        sv14[76] = (1 + sv14[50]) * sp[72];
        sv14[77] = sv14[74] + sv14[74];
        sv14[78] = sv14[75] + sv14[75];
        sv14[79] = sv14[76] + sv14[76];
        sv14[80] = (1 + sv14[15]) * (1 + sv14[15]);
        sv14[81] = sv14[4] * sv14[4];
        sv14[82] = sv14[80] + sv14[81];
        sv14[83] = sv14[26] * sv14[26];
        sv14[84] = sv14[82] + sv14[83];
        sv14[85] = sv14[84] * sv14[65];
        sv14[86] = sv14[84] * sv14[66];
        sv14[87] = sv14[84] * sv14[67];
        sv14[88] = sv14[84] * sv14[71];
        sv14[89] = sv14[84] * sv14[72];
        sv14[90] = sv14[84] * sv14[73];
        sv14[91] = sv14[84] * sv14[77];
        sv14[92] = sv14[84] * sv14[78];
        sv14[93] = sv14[84] * sv14[79];
        sv14[94] = sv14[53] + sv14[85];
        sv14[95] = sv14[54] + sv14[86];
        sv14[96] = sv14[87] + sv14[55];
        sv14[97] = sv14[56] + sv14[88];
        sv14[98] = sv14[57] + sv14[89];
        sv14[99] = sv14[90] + sv14[58];
        sv14[100] = sv14[59] + sv14[91];
        sv14[101] = sv14[60] + sv14[92];
        sv14[102] = sv14[93] + sv14[61];
        sv14[103] = sv14[37] * sp[34];
        sv14[104] = sv14[37] * sp[38];
        sv14[105] = sv14[37] * sp[42];
        sv14[106] = sv14[4] * sp[64];
        sv14[107] = sv14[4] * sp[68];
        sv14[108] = sv14[4] * sp[72];
        sv14[109] = sv14[103] + sv14[106];
        sv14[110] = sv14[104] + sv14[107];
        sv14[111] = sv14[108] + sv14[105];
        sv14[112] = (1 + sv14[15]) * sp[64];
        sv14[113] = (1 + sv14[15]) * sp[68];
        sv14[114] = (1 + sv14[15]) * sp[72];
        sv14[115] = sv14[43] * sp[34];
        sv14[116] = sv14[43] * sp[38];
        sv14[117] = sv14[43] * sp[42];
        sv14[118] = sv14[115] + sv14[112];
        sv14[119] = sv14[116] + sv14[113];
        sv14[120] = sv14[114] + sv14[117];
        sv14[121] = (1 + sv14[50]) * sp[34];
        sv14[122] = (1 + sv14[50]) * sp[38];
        sv14[123] = (1 + sv14[50]) * sp[42];
        sv14[124] = sv14[26] * sp[64];
        sv14[125] = sv14[26] * sp[68];
        sv14[126] = sv14[26] * sp[72];
        sv14[127] = sv14[121] + sv14[124];
        sv14[128] = sv14[122] + sv14[125];
        sv14[129] = sv14[126] + sv14[123];
        sv14[130] = (1 + sv14[15]) * sv14[43];
        sv14[131] = sv14[37] * sv14[4];
        sv14[132] = sv14[130] + sv14[131];
        sv14[133] = (1 + sv14[50]) * sv14[26];
        sv14[134] = sv14[132] + sv14[133];
        sv14[135] = sv14[134] * sv14[109];
        sv14[136] = sv14[134] * sv14[110];
        sv14[137] = sv14[134] * sv14[111];
        sv14[138] = sv14[134] * sv14[118];
        sv14[139] = sv14[134] * sv14[119];
        sv14[140] = sv14[134] * sv14[120];
        sv14[141] = sv14[134] * sv14[127];
        sv14[142] = sv14[134] * sv14[128];
        sv14[143] = sv14[134] * sv14[129];
        sv14[144] = sv14[135] + sv14[135];
        sv14[145] = sv14[136] + sv14[136];
        sv14[146] = sv14[137] + sv14[137];
        sv14[147] = sv14[138] + sv14[138];
        sv14[148] = sv14[139] + sv14[139];
        sv14[149] = sv14[140] + sv14[140];
        sv14[150] = sv14[141] + sv14[141];
        sv14[151] = sv14[142] + sv14[142];
        sv14[152] = sv14[143] + sv14[143];
        sv14[153] = sv14[94] + -1 * sv14[144];
        sv14[154] = sv14[95] + -1 * sv14[145];
        sv14[155] = sv14[96] + -1 * sv14[146];
        sv14[156] = sv14[97] + -1 * sv14[147];
        sv14[157] = sv14[98] + -1 * sv14[148];
        sv14[158] = sv14[99] + -1 * sv14[149];
        sv14[159] = sv14[100] + -1 * sv14[150];
        sv14[160] = sv14[101] + -1 * sv14[151];
        sv14[161] = sv14[102] + -1 * sv14[152];
        sv14[162] = w0_d0_c0 * sp[14];
        sv14[163] = w0_d1_c0 * sp[17];
        sv14[164] = sv14[162] + sv14[163];
        sv14[165] = w0_d2_c0 * sp[18];
        sv14[166] = sv14[164] + sv14[165];
        sv14[167] = (1 + sv14[166]) * (1 + sv14[166]);
        sv14[168] = w0_d0_c1 * sp[14];
        sv14[169] = w0_d1_c1 * sp[17];
        sv14[170] = sv14[168] + sv14[169];
        sv14[171] = w0_d2_c1 * sp[18];
        sv14[172] = sv14[170] + sv14[171];
        sv14[173] = sv14[172] * sv14[172];
        sv14[174] = sv14[167] + sv14[173];
        sv14[175] = w0_d0_c2 * sp[14];
        sv14[176] = w0_d1_c2 * sp[17];
        sv14[177] = sv14[175] + sv14[176];
        sv14[178] = w0_d2_c2 * sp[18];
        sv14[179] = sv14[177] + sv14[178];
        sv14[180] = sv14[179] * sv14[179];
        sv14[181] = sv14[174] + sv14[180];
        sv14[182] = sv14[153] * sv14[181];
        sv14[183] = sv14[154] * sv14[181];
        sv14[184] = sv14[155] * sv14[181];
        sv14[185] = sv14[156] * sv14[181];
        sv14[186] = sv14[157] * sv14[181];
        sv14[187] = sv14[158] * sv14[181];
        sv14[188] = sv14[159] * sv14[181];
        sv14[189] = sv14[160] * sv14[181];
        sv14[190] = sv14[161] * sv14[181];
        sv14[191] = (1 + sv14[166]) * sp[14];
        sv14[192] = (1 + sv14[166]) * sp[17];
        sv14[193] = (1 + sv14[166]) * sp[18];
        sv14[194] = sv14[191] + sv14[191];
        sv14[195] = sv14[192] + sv14[192];
        sv14[196] = sv14[193] + sv14[193];
        sv14[197] = sv14[172] * sp[14];
        sv14[198] = sv14[172] * sp[17];
        sv14[199] = sv14[172] * sp[18];
        sv14[200] = sv14[197] + sv14[197];
        sv14[201] = sv14[198] + sv14[198];
        sv14[202] = sv14[199] + sv14[199];
        sv14[203] = sv14[179] * sp[14];
        sv14[204] = sv14[179] * sp[17];
        sv14[205] = sv14[179] * sp[18];
        sv14[206] = sv14[203] + sv14[203];
        sv14[207] = sv14[204] + sv14[204];
        sv14[208] = sv14[205] + sv14[205];
        sv14[209] = sv14[52] * sv14[84];
        sv14[210] = sv14[134] * sv14[134];
        sv14[211] = sv14[209] + -1 * sv14[210];
        sv14[212] = sv14[211] * sv14[194];
        sv14[213] = sv14[211] * sv14[195];
        sv14[214] = sv14[211] * sv14[196];
        sv14[215] = sv14[211] * sv14[200];
        sv14[216] = sv14[211] * sv14[201];
        sv14[217] = sv14[211] * sv14[202];
        sv14[218] = sv14[211] * sv14[206];
        sv14[219] = sv14[211] * sv14[207];
        sv14[220] = sv14[211] * sv14[208];
        sv14[221] = sv14[182] + sv14[212];
        sv14[222] = sv14[183] + sv14[213];
        sv14[223] = sv14[184] + sv14[214];
        sv14[224] = sv14[185] + sv14[215];
        sv14[225] = sv14[186] + sv14[216];
        sv14[226] = sv14[187] + sv14[217];
        sv14[227] = sv14[188] + sv14[218];
        sv14[228] = sv14[189] + sv14[219];
        sv14[229] = sv14[190] + sv14[220];
        sv14[230] = (1 + sv14[166]) * sv14[37];
        sv14[231] = sv14[43] * sv14[172];
        sv14[232] = sv14[230] + sv14[231];
        sv14[233] = (1 + sv14[50]) * sv14[179];
        sv14[234] = sv14[232] + sv14[233];
        sv14[235] = sv14[234] * sv14[109];
        sv14[236] = sv14[234] * sv14[110];
        sv14[237] = sv14[234] * sv14[111];
        sv14[238] = sv14[234] * sv14[118];
        sv14[239] = sv14[234] * sv14[119];
        sv14[240] = sv14[234] * sv14[120];
        sv14[241] = sv14[234] * sv14[127];
        sv14[242] = sv14[234] * sv14[128];
        sv14[243] = sv14[234] * sv14[129];
        sv14[244] = (1 + sv14[166]) * sp[64];
        sv14[245] = (1 + sv14[166]) * sp[68];
        sv14[246] = (1 + sv14[166]) * sp[72];
        sv14[247] = sv14[37] * sp[14];
        sv14[248] = sv14[37] * sp[17];
        sv14[249] = sv14[37] * sp[18];
        sv14[250] = sv14[244] + sv14[247];
        sv14[251] = sv14[245] + sv14[248];
        sv14[252] = sv14[246] + sv14[249];
        sv14[253] = sv14[43] * sp[14];
        sv14[254] = sv14[43] * sp[17];
        sv14[255] = sv14[43] * sp[18];
        sv14[256] = sv14[172] * sp[64];
        sv14[257] = sv14[172] * sp[68];
        sv14[258] = sv14[172] * sp[72];
        sv14[259] = sv14[256] + sv14[253];
        sv14[260] = sv14[257] + sv14[254];
        sv14[261] = sv14[258] + sv14[255];
        sv14[262] = (1 + sv14[50]) * sp[14];
        sv14[263] = (1 + sv14[50]) * sp[17];
        sv14[264] = (1 + sv14[50]) * sp[18];
        sv14[265] = sv14[179] * sp[64];
        sv14[266] = sv14[179] * sp[68];
        sv14[267] = sv14[179] * sp[72];
        sv14[268] = sv14[265] + sv14[262];
        sv14[269] = sv14[266] + sv14[263];
        sv14[270] = sv14[267] + sv14[264];
        sv14[271] = sv14[134] * sv14[250];
        sv14[272] = sv14[134] * sv14[251];
        sv14[273] = sv14[134] * sv14[252];
        sv14[274] = sv14[134] * sv14[259];
        sv14[275] = sv14[134] * sv14[260];
        sv14[276] = sv14[134] * sv14[261];
        sv14[277] = sv14[134] * sv14[268];
        sv14[278] = sv14[134] * sv14[269];
        sv14[279] = sv14[134] * sv14[270];
        sv14[280] = sv14[235] + sv14[271];
        sv14[281] = sv14[236] + sv14[272];
        sv14[282] = sv14[273] + sv14[237];
        sv14[283] = sv14[238] + sv14[274];
        sv14[284] = sv14[239] + sv14[275];
        sv14[285] = sv14[276] + sv14[240];
        sv14[286] = sv14[241] + sv14[277];
        sv14[287] = sv14[242] + sv14[278];
        sv14[288] = sv14[279] + sv14[243];
        sv14[289] = (1 + sv14[166]) * sp[34];
        sv14[290] = (1 + sv14[166]) * sp[38];
        sv14[291] = (1 + sv14[166]) * sp[42];
        sv14[292] = sv14[4] * sp[14];
        sv14[293] = sv14[4] * sp[17];
        sv14[294] = sv14[4] * sp[18];
        sv14[295] = sv14[289] + sv14[292];
        sv14[296] = sv14[290] + sv14[293];
        sv14[297] = sv14[294] + sv14[291];
        sv14[298] = (1 + sv14[15]) * sp[14];
        sv14[299] = (1 + sv14[15]) * sp[17];
        sv14[300] = (1 + sv14[15]) * sp[18];
        sv14[301] = sv14[172] * sp[34];
        sv14[302] = sv14[172] * sp[38];
        sv14[303] = sv14[172] * sp[42];
        sv14[304] = sv14[301] + sv14[298];
        sv14[305] = sv14[302] + sv14[299];
        sv14[306] = sv14[300] + sv14[303];
        sv14[307] = sv14[179] * sp[34];
        sv14[308] = sv14[179] * sp[38];
        sv14[309] = sv14[179] * sp[42];
        sv14[310] = sv14[26] * sp[14];
        sv14[311] = sv14[26] * sp[17];
        sv14[312] = sv14[26] * sp[18];
        sv14[313] = sv14[307] + sv14[310];
        sv14[314] = sv14[308] + sv14[311];
        sv14[315] = sv14[312] + sv14[309];
        sv14[316] = sv14[52] * sv14[295];
        sv14[317] = sv14[52] * sv14[296];
        sv14[318] = sv14[52] * sv14[297];
        sv14[319] = sv14[52] * sv14[304];
        sv14[320] = sv14[52] * sv14[305];
        sv14[321] = sv14[52] * sv14[306];
        sv14[322] = sv14[52] * sv14[313];
        sv14[323] = sv14[52] * sv14[314];
        sv14[324] = sv14[52] * sv14[315];
        sv14[325] = (1 + sv14[15]) * sv14[172];
        sv14[326] = (1 + sv14[166]) * sv14[4];
        sv14[327] = sv14[325] + sv14[326];
        sv14[328] = sv14[179] * sv14[26];
        sv14[329] = sv14[327] + sv14[328];
        sv14[330] = sv14[329] * sv14[65];
        sv14[331] = sv14[329] * sv14[66];
        sv14[332] = sv14[329] * sv14[67];
        sv14[333] = sv14[329] * sv14[71];
        sv14[334] = sv14[329] * sv14[72];
        sv14[335] = sv14[329] * sv14[73];
        sv14[336] = sv14[329] * sv14[77];
        sv14[337] = sv14[329] * sv14[78];
        sv14[338] = sv14[329] * sv14[79];
        sv14[339] = sv14[330] + sv14[316];
        sv14[340] = sv14[331] + sv14[317];
        sv14[341] = sv14[332] + sv14[318];
        sv14[342] = sv14[333] + sv14[319];
        sv14[343] = sv14[334] + sv14[320];
        sv14[344] = sv14[335] + sv14[321];
        sv14[345] = sv14[336] + sv14[322];
        sv14[346] = sv14[337] + sv14[323];
        sv14[347] = sv14[338] + sv14[324];
        sv14[348] = sv14[280] + -1 * sv14[339];
        sv14[349] = sv14[281] + -1 * sv14[340];
        sv14[350] = sv14[282] + -1 * sv14[341];
        sv14[351] = sv14[283] + -1 * sv14[342];
        sv14[352] = sv14[284] + -1 * sv14[343];
        sv14[353] = sv14[285] + -1 * sv14[344];
        sv14[354] = sv14[286] + -1 * sv14[345];
        sv14[355] = sv14[287] + -1 * sv14[346];
        sv14[356] = sv14[288] + -1 * sv14[347];
        sv14[357] = sv14[348] * sv14[329];
        sv14[358] = sv14[349] * sv14[329];
        sv14[359] = sv14[350] * sv14[329];
        sv14[360] = sv14[351] * sv14[329];
        sv14[361] = sv14[352] * sv14[329];
        sv14[362] = sv14[353] * sv14[329];
        sv14[363] = sv14[354] * sv14[329];
        sv14[364] = sv14[355] * sv14[329];
        sv14[365] = sv14[356] * sv14[329];
        sv14[366] = sv14[234] * sv14[134];
        sv14[367] = sv14[52] * sv14[329];
        sv14[368] = sv14[366] + -1 * sv14[367];
        sv14[369] = sv14[368] * sv14[295];
        sv14[370] = sv14[368] * sv14[296];
        sv14[371] = sv14[368] * sv14[297];
        sv14[372] = sv14[368] * sv14[304];
        sv14[373] = sv14[368] * sv14[305];
        sv14[374] = sv14[368] * sv14[306];
        sv14[375] = sv14[368] * sv14[313];
        sv14[376] = sv14[368] * sv14[314];
        sv14[377] = sv14[368] * sv14[315];
        sv14[378] = sv14[357] + sv14[369];
        sv14[379] = sv14[358] + sv14[370];
        sv14[380] = sv14[359] + sv14[371];
        sv14[381] = sv14[360] + sv14[372];
        sv14[382] = sv14[361] + sv14[373];
        sv14[383] = sv14[362] + sv14[374];
        sv14[384] = sv14[363] + sv14[375];
        sv14[385] = sv14[364] + sv14[376];
        sv14[386] = sv14[365] + sv14[377];
        sv14[387] = sv14[221] + sv14[378];
        sv14[388] = sv14[222] + sv14[379];
        sv14[389] = sv14[223] + sv14[380];
        sv14[390] = sv14[381] + sv14[224];
        sv14[391] = sv14[382] + sv14[225];
        sv14[392] = sv14[226] + sv14[383];
        sv14[393] = sv14[227] + sv14[384];
        sv14[394] = sv14[228] + sv14[385];
        sv14[395] = sv14[229] + sv14[386];
        sv14[396] = sv14[134] * sv14[295];
        sv14[397] = sv14[134] * sv14[296];
        sv14[398] = sv14[134] * sv14[297];
        sv14[399] = sv14[134] * sv14[304];
        sv14[400] = sv14[134] * sv14[305];
        sv14[401] = sv14[134] * sv14[306];
        sv14[402] = sv14[134] * sv14[313];
        sv14[403] = sv14[134] * sv14[314];
        sv14[404] = sv14[134] * sv14[315];
        sv14[405] = sv14[329] * sv14[109];
        sv14[406] = sv14[329] * sv14[110];
        sv14[407] = sv14[329] * sv14[111];
        sv14[408] = sv14[329] * sv14[118];
        sv14[409] = sv14[329] * sv14[119];
        sv14[410] = sv14[329] * sv14[120];
        sv14[411] = sv14[329] * sv14[127];
        sv14[412] = sv14[329] * sv14[128];
        sv14[413] = sv14[329] * sv14[129];
        sv14[414] = sv14[405] + sv14[396];
        sv14[415] = sv14[406] + sv14[397];
        sv14[416] = sv14[398] + sv14[407];
        sv14[417] = sv14[408] + sv14[399];
        sv14[418] = sv14[409] + sv14[400];
        sv14[419] = sv14[410] + sv14[401];
        sv14[420] = sv14[411] + sv14[402];
        sv14[421] = sv14[412] + sv14[403];
        sv14[422] = sv14[413] + sv14[404];
        sv14[423] = sv14[234] * sv14[8];
        sv14[424] = sv14[234] * sv14[9];
        sv14[425] = sv14[234] * sv14[10];
        sv14[426] = sv14[234] * sv14[19];
        sv14[427] = sv14[234] * sv14[20];
        sv14[428] = sv14[234] * sv14[21];
        sv14[429] = sv14[234] * sv14[30];
        sv14[430] = sv14[234] * sv14[31];
        sv14[431] = sv14[234] * sv14[32];
        sv14[432] = sv14[84] * sv14[250];
        sv14[433] = sv14[84] * sv14[251];
        sv14[434] = sv14[84] * sv14[252];
        sv14[435] = sv14[84] * sv14[259];
        sv14[436] = sv14[84] * sv14[260];
        sv14[437] = sv14[84] * sv14[261];
        sv14[438] = sv14[84] * sv14[268];
        sv14[439] = sv14[84] * sv14[269];
        sv14[440] = sv14[84] * sv14[270];
        sv14[441] = sv14[423] + sv14[432];
        sv14[442] = sv14[424] + sv14[433];
        sv14[443] = sv14[434] + sv14[425];
        sv14[444] = sv14[426] + sv14[435];
        sv14[445] = sv14[427] + sv14[436];
        sv14[446] = sv14[437] + sv14[428];
        sv14[447] = sv14[429] + sv14[438];
        sv14[448] = sv14[430] + sv14[439];
        sv14[449] = sv14[440] + sv14[431];
        sv14[450] = sv14[414] + -1 * sv14[441];
        sv14[451] = sv14[415] + -1 * sv14[442];
        sv14[452] = sv14[416] + -1 * sv14[443];
        sv14[453] = sv14[417] + -1 * sv14[444];
        sv14[454] = sv14[418] + -1 * sv14[445];
        sv14[455] = sv14[419] + -1 * sv14[446];
        sv14[456] = sv14[420] + -1 * sv14[447];
        sv14[457] = sv14[421] + -1 * sv14[448];
        sv14[458] = sv14[422] + -1 * sv14[449];
        sv14[459] = sv14[450] * sv14[234];
        sv14[460] = sv14[451] * sv14[234];
        sv14[461] = sv14[452] * sv14[234];
        sv14[462] = sv14[453] * sv14[234];
        sv14[463] = sv14[454] * sv14[234];
        sv14[464] = sv14[455] * sv14[234];
        sv14[465] = sv14[456] * sv14[234];
        sv14[466] = sv14[457] * sv14[234];
        sv14[467] = sv14[458] * sv14[234];
        sv14[468] = sv14[134] * sv14[329];
        sv14[469] = sv14[234] * sv14[84];
        sv14[470] = sv14[468] + -1 * sv14[469];
        sv14[471] = sv14[470] * sv14[250];
        sv14[472] = sv14[470] * sv14[251];
        sv14[473] = sv14[470] * sv14[252];
        sv14[474] = sv14[470] * sv14[259];
        sv14[475] = sv14[470] * sv14[260];
        sv14[476] = sv14[470] * sv14[261];
        sv14[477] = sv14[470] * sv14[268];
        sv14[478] = sv14[470] * sv14[269];
        sv14[479] = sv14[470] * sv14[270];
        sv14[480] = sv14[459] + sv14[471];
        sv14[481] = sv14[460] + sv14[472];
        sv14[482] = sv14[461] + sv14[473];
        sv14[483] = sv14[462] + sv14[474];
        sv14[484] = sv14[463] + sv14[475];
        sv14[485] = sv14[464] + sv14[476];
        sv14[486] = sv14[465] + sv14[477];
        sv14[487] = sv14[466] + sv14[478];
        sv14[488] = sv14[467] + sv14[479];
        sv14[489] = sv14[387] + sv14[480];
        sv14[490] = sv14[388] + sv14[481];
        sv14[491] = sv14[389] + sv14[482];
        sv14[492] = sv14[390] + sv14[483];
        sv14[493] = sv14[391] + sv14[484];
        sv14[494] = sv14[392] + sv14[485];
        sv14[495] = sv14[393] + sv14[486];
        sv14[496] = sv14[394] + sv14[487];
        sv14[497] = sv14[395] + sv14[488];
        sv14[498] = sv14[181] * sv14[211];
        sv14[499] = sv14[329] * sv14[368];
        sv14[500] = sv14[498] + sv14[499];
        sv14[501] = sv14[234] * sv14[470];
        sv14[502] = sv14[500] + sv14[501];
        sv14[503] = -0.6666666666666667 * sv14[489] * std::pow(sv14[502], -1.666666666666667);
        sv14[504] = -0.6666666666666667 * sv14[490] * std::pow(sv14[502], -1.666666666666667);
        sv14[505] = -0.6666666666666667 * sv14[491] * std::pow(sv14[502], -1.666666666666667);
        sv14[506] = -0.6666666666666667 * sv14[492] * std::pow(sv14[502], -1.666666666666667);
        sv14[507] = -0.6666666666666667 * sv14[493] * std::pow(sv14[502], -1.666666666666667);
        sv14[508] = -0.6666666666666667 * sv14[494] * std::pow(sv14[502], -1.666666666666667);
        sv14[509] = -0.6666666666666667 * sv14[495] * std::pow(sv14[502], -1.666666666666667);
        sv14[510] = -0.6666666666666667 * sv14[496] * std::pow(sv14[502], -1.666666666666667);
        sv14[511] = -0.6666666666666667 * sv14[497] * std::pow(sv14[502], -1.666666666666667);
        sv14[512] = 0.3333333333333333 * sv14[489] * sv14[503];
        sv14[513] = 0.3333333333333333 * sv14[489] * sv14[504];
        sv14[514] = 0.3333333333333333 * sv14[489] * sv14[505];
        sv14[515] = 0.3333333333333333 * sv14[489] * sv14[506];
        sv14[516] = 0.3333333333333333 * sv14[489] * sv14[507];
        sv14[517] = 0.3333333333333333 * sv14[489] * sv14[508];
        sv14[518] = 0.3333333333333333 * sv14[489] * sv14[509];
        sv14[519] = 0.3333333333333333 * sv14[489] * sv14[510];
        sv14[520] = 0.3333333333333333 * sv14[489] * sv14[511];
        sv14[521] = 0.3333333333333333 * sv14[490] * sv14[503];
        sv14[522] = 0.3333333333333333 * sv14[490] * sv14[504];
        sv14[523] = 0.3333333333333333 * sv14[490] * sv14[505];
        sv14[524] = 0.3333333333333333 * sv14[490] * sv14[506];
        sv14[525] = 0.3333333333333333 * sv14[490] * sv14[507];
        sv14[526] = 0.3333333333333333 * sv14[490] * sv14[508];
        sv14[527] = 0.3333333333333333 * sv14[490] * sv14[509];
        sv14[528] = 0.3333333333333333 * sv14[490] * sv14[510];
        sv14[529] = 0.3333333333333333 * sv14[490] * sv14[511];
        sv14[530] = 0.3333333333333333 * sv14[491] * sv14[503];
        sv14[531] = 0.3333333333333333 * sv14[491] * sv14[504];
        sv14[532] = 0.3333333333333333 * sv14[491] * sv14[505];
        sv14[533] = 0.3333333333333333 * sv14[491] * sv14[506];
        sv14[534] = 0.3333333333333333 * sv14[491] * sv14[507];
        sv14[535] = 0.3333333333333333 * sv14[491] * sv14[508];
        sv14[536] = 0.3333333333333333 * sv14[491] * sv14[509];
        sv14[537] = 0.3333333333333333 * sv14[491] * sv14[510];
        sv14[538] = 0.3333333333333333 * sv14[491] * sv14[511];
        sv14[539] = 0.3333333333333333 * sv14[492] * sv14[503];
        sv14[540] = 0.3333333333333333 * sv14[492] * sv14[504];
        sv14[541] = 0.3333333333333333 * sv14[492] * sv14[505];
        sv14[542] = 0.3333333333333333 * sv14[492] * sv14[506];
        sv14[543] = 0.3333333333333333 * sv14[492] * sv14[507];
        sv14[544] = 0.3333333333333333 * sv14[492] * sv14[508];
        sv14[545] = 0.3333333333333333 * sv14[492] * sv14[509];
        sv14[546] = 0.3333333333333333 * sv14[492] * sv14[510];
        sv14[547] = 0.3333333333333333 * sv14[492] * sv14[511];
        sv14[548] = 0.3333333333333333 * sv14[493] * sv14[503];
        sv14[549] = 0.3333333333333333 * sv14[493] * sv14[504];
        sv14[550] = 0.3333333333333333 * sv14[493] * sv14[505];
        sv14[551] = 0.3333333333333333 * sv14[493] * sv14[506];
        sv14[552] = 0.3333333333333333 * sv14[493] * sv14[507];
        sv14[553] = 0.3333333333333333 * sv14[493] * sv14[508];
        sv14[554] = 0.3333333333333333 * sv14[493] * sv14[509];
        sv14[555] = 0.3333333333333333 * sv14[493] * sv14[510];
        sv14[556] = 0.3333333333333333 * sv14[493] * sv14[511];
        sv14[557] = 0.3333333333333333 * sv14[494] * sv14[503];
        sv14[558] = 0.3333333333333333 * sv14[494] * sv14[504];
        sv14[559] = 0.3333333333333333 * sv14[494] * sv14[505];
        sv14[560] = 0.3333333333333333 * sv14[494] * sv14[506];
        sv14[561] = 0.3333333333333333 * sv14[494] * sv14[507];
        sv14[562] = 0.3333333333333333 * sv14[494] * sv14[508];
        sv14[563] = 0.3333333333333333 * sv14[494] * sv14[509];
        sv14[564] = 0.3333333333333333 * sv14[494] * sv14[510];
        sv14[565] = 0.3333333333333333 * sv14[494] * sv14[511];
        sv14[566] = 0.3333333333333333 * sv14[495] * sv14[503];
        sv14[567] = 0.3333333333333333 * sv14[495] * sv14[504];
        sv14[568] = 0.3333333333333333 * sv14[495] * sv14[505];
        sv14[569] = 0.3333333333333333 * sv14[495] * sv14[506];
        sv14[570] = 0.3333333333333333 * sv14[495] * sv14[507];
        sv14[571] = 0.3333333333333333 * sv14[495] * sv14[508];
        sv14[572] = 0.3333333333333333 * sv14[495] * sv14[509];
        sv14[573] = 0.3333333333333333 * sv14[495] * sv14[510];
        sv14[574] = 0.3333333333333333 * sv14[495] * sv14[511];
        sv14[575] = 0.3333333333333333 * sv14[496] * sv14[503];
        sv14[576] = 0.3333333333333333 * sv14[496] * sv14[504];
        sv14[577] = 0.3333333333333333 * sv14[496] * sv14[505];
        sv14[578] = 0.3333333333333333 * sv14[496] * sv14[506];
        sv14[579] = 0.3333333333333333 * sv14[496] * sv14[507];
        sv14[580] = 0.3333333333333333 * sv14[496] * sv14[508];
        sv14[581] = 0.3333333333333333 * sv14[496] * sv14[509];
        sv14[582] = 0.3333333333333333 * sv14[496] * sv14[510];
        sv14[583] = 0.3333333333333333 * sv14[496] * sv14[511];
        sv14[584] = 0.3333333333333333 * sv14[497] * sv14[503];
        sv14[585] = 0.3333333333333333 * sv14[497] * sv14[504];
        sv14[586] = 0.3333333333333333 * sv14[497] * sv14[505];
        sv14[587] = 0.3333333333333333 * sv14[497] * sv14[506];
        sv14[588] = 0.3333333333333333 * sv14[497] * sv14[507];
        sv14[589] = 0.3333333333333333 * sv14[497] * sv14[508];
        sv14[590] = 0.3333333333333333 * sv14[497] * sv14[509];
        sv14[591] = 0.3333333333333333 * sv14[497] * sv14[510];
        sv14[592] = 0.3333333333333333 * sv14[497] * sv14[511];
        sv14[593] = sv14[153] * sv14[194];
        sv14[594] = sv14[154] * sv14[194];
        sv14[595] = sv14[155] * sv14[194];
        sv14[596] = sv14[156] * sv14[194];
        sv14[597] = sv14[157] * sv14[194];
        sv14[598] = sv14[158] * sv14[194];
        sv14[599] = sv14[159] * sv14[194];
        sv14[600] = sv14[160] * sv14[194];
        sv14[601] = sv14[161] * sv14[194];
        sv14[602] = sv14[153] * sv14[195];
        sv14[603] = sv14[154] * sv14[195];
        sv14[604] = sv14[155] * sv14[195];
        sv14[605] = sv14[156] * sv14[195];
        sv14[606] = sv14[157] * sv14[195];
        sv14[607] = sv14[158] * sv14[195];
        sv14[608] = sv14[159] * sv14[195];
        sv14[609] = sv14[160] * sv14[195];
        sv14[610] = sv14[161] * sv14[195];
        sv14[611] = sv14[153] * sv14[196];
        sv14[612] = sv14[154] * sv14[196];
        sv14[613] = sv14[155] * sv14[196];
        sv14[614] = sv14[156] * sv14[196];
        sv14[615] = sv14[157] * sv14[196];
        sv14[616] = sv14[158] * sv14[196];
        sv14[617] = sv14[159] * sv14[196];
        sv14[618] = sv14[160] * sv14[196];
        sv14[619] = sv14[161] * sv14[196];
        sv14[620] = sv14[153] * sv14[200];
        sv14[621] = sv14[154] * sv14[200];
        sv14[622] = sv14[155] * sv14[200];
        sv14[623] = sv14[156] * sv14[200];
        sv14[624] = sv14[157] * sv14[200];
        sv14[625] = sv14[158] * sv14[200];
        sv14[626] = sv14[159] * sv14[200];
        sv14[627] = sv14[160] * sv14[200];
        sv14[628] = sv14[161] * sv14[200];
        sv14[629] = sv14[153] * sv14[201];
        sv14[630] = sv14[154] * sv14[201];
        sv14[631] = sv14[155] * sv14[201];
        sv14[632] = sv14[156] * sv14[201];
        sv14[633] = sv14[157] * sv14[201];
        sv14[634] = sv14[158] * sv14[201];
        sv14[635] = sv14[159] * sv14[201];
        sv14[636] = sv14[160] * sv14[201];
        sv14[637] = sv14[161] * sv14[201];
        sv14[638] = sv14[153] * sv14[202];
        sv14[639] = sv14[154] * sv14[202];
        sv14[640] = sv14[155] * sv14[202];
        sv14[641] = sv14[156] * sv14[202];
        sv14[642] = sv14[157] * sv14[202];
        sv14[643] = sv14[158] * sv14[202];
        sv14[644] = sv14[159] * sv14[202];
        sv14[645] = sv14[160] * sv14[202];
        sv14[646] = sv14[161] * sv14[202];
        sv14[647] = sv14[153] * sv14[206];
        sv14[648] = sv14[154] * sv14[206];
        sv14[649] = sv14[155] * sv14[206];
        sv14[650] = sv14[156] * sv14[206];
        sv14[651] = sv14[157] * sv14[206];
        sv14[652] = sv14[158] * sv14[206];
        sv14[653] = sv14[159] * sv14[206];
        sv14[654] = sv14[160] * sv14[206];
        sv14[655] = sv14[161] * sv14[206];
        sv14[656] = sv14[153] * sv14[207];
        sv14[657] = sv14[154] * sv14[207];
        sv14[658] = sv14[155] * sv14[207];
        sv14[659] = sv14[156] * sv14[207];
        sv14[660] = sv14[157] * sv14[207];
        sv14[661] = sv14[158] * sv14[207];
        sv14[662] = sv14[159] * sv14[207];
        sv14[663] = sv14[160] * sv14[207];
        sv14[664] = sv14[161] * sv14[207];
        sv14[665] = sv14[153] * sv14[208];
        sv14[666] = sv14[154] * sv14[208];
        sv14[667] = sv14[155] * sv14[208];
        sv14[668] = sv14[156] * sv14[208];
        sv14[669] = sv14[157] * sv14[208];
        sv14[670] = sv14[158] * sv14[208];
        sv14[671] = sv14[159] * sv14[208];
        sv14[672] = sv14[160] * sv14[208];
        sv14[673] = sv14[161] * sv14[208];
        sv14[674] = sv14[8] * sv14[65];
        sv14[675] = sv14[9] * sv14[65];
        sv14[676] = sv14[65] * sv14[10];
        sv14[677] = sv14[19] * sv14[65];
        sv14[678] = sv14[20] * sv14[65];
        sv14[679] = sv14[65] * sv14[21];
        sv14[680] = sv14[30] * sv14[65];
        sv14[681] = sv14[31] * sv14[65];
        sv14[682] = sv14[65] * sv14[32];
        sv14[683] = sv14[8] * sv14[66];
        sv14[684] = sv14[9] * sv14[66];
        sv14[685] = sv14[66] * sv14[10];
        sv14[686] = sv14[19] * sv14[66];
        sv14[687] = sv14[20] * sv14[66];
        sv14[688] = sv14[66] * sv14[21];
        sv14[689] = sv14[30] * sv14[66];
        sv14[690] = sv14[31] * sv14[66];
        sv14[691] = sv14[66] * sv14[32];
        sv14[692] = sv14[8] * sv14[67];
        sv14[693] = sv14[9] * sv14[67];
        sv14[694] = sv14[67] * sv14[10];
        sv14[695] = sv14[19] * sv14[67];
        sv14[696] = sv14[20] * sv14[67];
        sv14[697] = sv14[67] * sv14[21];
        sv14[698] = sv14[30] * sv14[67];
        sv14[699] = sv14[31] * sv14[67];
        sv14[700] = sv14[67] * sv14[32];
        sv14[701] = sv14[8] * sv14[71];
        sv14[702] = sv14[9] * sv14[71];
        sv14[703] = sv14[71] * sv14[10];
        sv14[704] = sv14[19] * sv14[71];
        sv14[705] = sv14[20] * sv14[71];
        sv14[706] = sv14[71] * sv14[21];
        sv14[707] = sv14[30] * sv14[71];
        sv14[708] = sv14[31] * sv14[71];
        sv14[709] = sv14[71] * sv14[32];
        sv14[710] = sv14[8] * sv14[72];
        sv14[711] = sv14[9] * sv14[72];
        sv14[712] = sv14[72] * sv14[10];
        sv14[713] = sv14[19] * sv14[72];
        sv14[714] = sv14[20] * sv14[72];
        sv14[715] = sv14[72] * sv14[21];
        sv14[716] = sv14[30] * sv14[72];
        sv14[717] = sv14[31] * sv14[72];
        sv14[718] = sv14[72] * sv14[32];
        sv14[719] = sv14[8] * sv14[73];
        sv14[720] = sv14[9] * sv14[73];
        sv14[721] = sv14[73] * sv14[10];
        sv14[722] = sv14[19] * sv14[73];
        sv14[723] = sv14[20] * sv14[73];
        sv14[724] = sv14[73] * sv14[21];
        sv14[725] = sv14[30] * sv14[73];
        sv14[726] = sv14[31] * sv14[73];
        sv14[727] = sv14[73] * sv14[32];
        sv14[728] = sv14[8] * sv14[77];
        sv14[729] = sv14[9] * sv14[77];
        sv14[730] = sv14[77] * sv14[10];
        sv14[731] = sv14[19] * sv14[77];
        sv14[732] = sv14[20] * sv14[77];
        sv14[733] = sv14[77] * sv14[21];
        sv14[734] = sv14[30] * sv14[77];
        sv14[735] = sv14[31] * sv14[77];
        sv14[736] = sv14[77] * sv14[32];
        sv14[737] = sv14[8] * sv14[78];
        sv14[738] = sv14[9] * sv14[78];
        sv14[739] = sv14[78] * sv14[10];
        sv14[740] = sv14[19] * sv14[78];
        sv14[741] = sv14[20] * sv14[78];
        sv14[742] = sv14[78] * sv14[21];
        sv14[743] = sv14[30] * sv14[78];
        sv14[744] = sv14[31] * sv14[78];
        sv14[745] = sv14[78] * sv14[32];
        sv14[746] = sv14[8] * sv14[79];
        sv14[747] = sv14[9] * sv14[79];
        sv14[748] = sv14[79] * sv14[10];
        sv14[749] = sv14[19] * sv14[79];
        sv14[750] = sv14[20] * sv14[79];
        sv14[751] = sv14[79] * sv14[21];
        sv14[752] = sv14[30] * sv14[79];
        sv14[753] = sv14[31] * sv14[79];
        sv14[754] = sv14[79] * sv14[32];
        sv14[755] = sv14[52] * sp[49];
        sv14[756] = sv14[52] * sp[50];
        sv14[757] = sv14[52] * sp[51];
        sv14[758] = sv14[52] * sp[52];
        sv14[759] = sv14[52] * sp[53];
        sv14[760] = sv14[52] * sp[54];
        sv14[761] = sv14[755] + sv14[674];
        sv14[762] = sv14[756] + sv14[683];
        sv14[763] = sv14[692] + sv14[757];
        sv14[764] = sv14[756] + sv14[675];
        sv14[765] = sv14[758] + sv14[684];
        sv14[766] = sv14[693] + sv14[759];
        sv14[767] = sv14[676] + sv14[757];
        sv14[768] = sv14[685] + sv14[759];
        sv14[769] = sv14[694] + sv14[760];
        sv14[770] = sv14[755] + sv14[704];
        sv14[771] = sv14[756] + sv14[713];
        sv14[772] = sv14[722] + sv14[757];
        sv14[773] = sv14[756] + sv14[705];
        sv14[774] = sv14[758] + sv14[714];
        sv14[775] = sv14[723] + sv14[759];
        sv14[776] = sv14[706] + sv14[757];
        sv14[777] = sv14[715] + sv14[759];
        sv14[778] = sv14[724] + sv14[760];
        sv14[779] = sv14[755] + sv14[734];
        sv14[780] = sv14[756] + sv14[743];
        sv14[781] = sv14[752] + sv14[757];
        sv14[782] = sv14[756] + sv14[735];
        sv14[783] = sv14[758] + sv14[744];
        sv14[784] = sv14[753] + sv14[759];
        sv14[785] = sv14[736] + sv14[757];
        sv14[786] = sv14[745] + sv14[759];
        sv14[787] = sv14[754] + sv14[760];
        sv14[788] = sv14[84] * sp[79];
        sv14[789] = sv14[84] * sp[80];
        sv14[790] = sv14[84] * sp[81];
        sv14[791] = sv14[84] * sp[82];
        sv14[792] = sv14[84] * sp[83];
        sv14[793] = sv14[84] * sp[84];
        sv14[794] = sv14[674] + sv14[788];
        sv14[795] = sv14[675] + sv14[789];
        sv14[796] = sv14[790] + sv14[676];
        sv14[797] = sv14[683] + sv14[789];
        sv14[798] = sv14[684] + sv14[791];
        sv14[799] = sv14[792] + sv14[685];
        sv14[800] = sv14[692] + sv14[790];
        sv14[801] = sv14[693] + sv14[792];
        sv14[802] = sv14[793] + sv14[694];
        sv14[803] = sv14[704] + sv14[788];
        sv14[804] = sv14[705] + sv14[789];
        sv14[805] = sv14[790] + sv14[706];
        sv14[806] = sv14[713] + sv14[789];
        sv14[807] = sv14[714] + sv14[791];
        sv14[808] = sv14[792] + sv14[715];
        sv14[809] = sv14[722] + sv14[790];
        sv14[810] = sv14[723] + sv14[792];
        sv14[811] = sv14[793] + sv14[724];
        sv14[812] = sv14[734] + sv14[788];
        sv14[813] = sv14[735] + sv14[789];
        sv14[814] = sv14[790] + sv14[736];
        sv14[815] = sv14[743] + sv14[789];
        sv14[816] = sv14[744] + sv14[791];
        sv14[817] = sv14[792] + sv14[745];
        sv14[818] = sv14[752] + sv14[790];
        sv14[819] = sv14[753] + sv14[792];
        sv14[820] = sv14[793] + sv14[754];
        sv14[821] = sv14[761] + sv14[794];
        sv14[822] = sv14[762] + sv14[795];
        sv14[823] = sv14[796] + sv14[763];
        sv14[824] = sv14[677] + sv14[701];
        sv14[825] = sv14[678] + sv14[710];
        sv14[826] = sv14[719] + sv14[679];
        sv14[827] = sv14[728] + sv14[680];
        sv14[828] = sv14[681] + sv14[737];
        sv14[829] = sv14[746] + sv14[682];
        sv14[830] = sv14[764] + sv14[797];
        sv14[831] = sv14[765] + sv14[798];
        sv14[832] = sv14[799] + sv14[766];
        sv14[833] = sv14[702] + sv14[686];
        sv14[834] = sv14[687] + sv14[711];
        sv14[835] = sv14[720] + sv14[688];
        sv14[836] = sv14[729] + sv14[689];
        sv14[837] = sv14[738] + sv14[690];
        sv14[838] = sv14[747] + sv14[691];
        sv14[839] = sv14[800] + sv14[767];
        sv14[840] = sv14[801] + sv14[768];
        sv14[841] = sv14[802] + sv14[769];
        sv14[842] = sv14[695] + sv14[703];
        sv14[843] = sv14[696] + sv14[712];
        sv14[844] = sv14[697] + sv14[721];
        sv14[845] = sv14[698] + sv14[730];
        sv14[846] = sv14[699] + sv14[739];
        sv14[847] = sv14[748] + sv14[700];
        sv14[848] = sv14[770] + sv14[803];
        sv14[849] = sv14[771] + sv14[804];
        sv14[850] = sv14[805] + sv14[772];
        sv14[851] = sv14[731] + sv14[707];
        sv14[852] = sv14[708] + sv14[740];
        sv14[853] = sv14[749] + sv14[709];
        sv14[854] = sv14[773] + sv14[806];
        sv14[855] = sv14[774] + sv14[807];
        sv14[856] = sv14[808] + sv14[775];
        sv14[857] = sv14[732] + sv14[716];
        sv14[858] = sv14[741] + sv14[717];
        sv14[859] = sv14[750] + sv14[718];
        sv14[860] = sv14[809] + sv14[776];
        sv14[861] = sv14[810] + sv14[777];
        sv14[862] = sv14[811] + sv14[778];
        sv14[863] = sv14[725] + sv14[733];
        sv14[864] = sv14[726] + sv14[742];
        sv14[865] = sv14[751] + sv14[727];
        sv14[866] = sv14[779] + sv14[812];
        sv14[867] = sv14[780] + sv14[813];
        sv14[868] = sv14[814] + sv14[781];
        sv14[869] = sv14[782] + sv14[815];
        sv14[870] = sv14[783] + sv14[816];
        sv14[871] = sv14[817] + sv14[784];
        sv14[872] = sv14[818] + sv14[785];
        sv14[873] = sv14[819] + sv14[786];
        sv14[874] = sv14[820] + sv14[787];
        sv14[875] = sv14[109] * sv14[109];
        sv14[876] = sv14[109] * sv14[110];
        sv14[877] = sv14[109] * sv14[111];
        sv14[878] = sv14[118] * sv14[109];
        sv14[879] = sv14[109] * sv14[119];
        sv14[880] = sv14[109] * sv14[120];
        sv14[881] = sv14[109] * sv14[127];
        sv14[882] = sv14[109] * sv14[128];
        sv14[883] = sv14[109] * sv14[129];
        sv14[884] = sv14[110] * sv14[110];
        sv14[885] = sv14[110] * sv14[111];
        sv14[886] = sv14[118] * sv14[110];
        sv14[887] = sv14[119] * sv14[110];
        sv14[888] = sv14[110] * sv14[120];
        sv14[889] = sv14[127] * sv14[110];
        sv14[890] = sv14[110] * sv14[128];
        sv14[891] = sv14[110] * sv14[129];
        sv14[892] = sv14[111] * sv14[111];
        sv14[893] = sv14[118] * sv14[111];
        sv14[894] = sv14[119] * sv14[111];
        sv14[895] = sv14[111] * sv14[120];
        sv14[896] = sv14[127] * sv14[111];
        sv14[897] = sv14[128] * sv14[111];
        sv14[898] = sv14[129] * sv14[111];
        sv14[899] = sv14[118] * sv14[118];
        sv14[900] = sv14[118] * sv14[119];
        sv14[901] = sv14[118] * sv14[120];
        sv14[902] = sv14[118] * sv14[127];
        sv14[903] = sv14[118] * sv14[128];
        sv14[904] = sv14[118] * sv14[129];
        sv14[905] = sv14[119] * sv14[119];
        sv14[906] = sv14[119] * sv14[120];
        sv14[907] = sv14[127] * sv14[119];
        sv14[908] = sv14[119] * sv14[128];
        sv14[909] = sv14[119] * sv14[129];
        sv14[910] = sv14[120] * sv14[120];
        sv14[911] = sv14[127] * sv14[120];
        sv14[912] = sv14[128] * sv14[120];
        sv14[913] = sv14[129] * sv14[120];
        sv14[914] = sv14[127] * sv14[127];
        sv14[915] = sv14[127] * sv14[128];
        sv14[916] = sv14[127] * sv14[129];
        sv14[917] = sv14[128] * sv14[128];
        sv14[918] = sv14[128] * sv14[129];
        sv14[919] = sv14[129] * sv14[129];
        sv14[920] = sv14[134] * sp[100];
        sv14[921] = sv14[134] * sp[101];
        sv14[922] = sv14[134] * sp[102];
        sv14[923] = sv14[134] * sp[103];
        sv14[924] = sv14[134] * sp[104];
        sv14[925] = sv14[134] * sp[105];
        sv14[926] = sv14[875] + sv14[920];
        sv14[927] = sv14[876] + sv14[921];
        sv14[928] = sv14[877] + sv14[922];
        sv14[929] = sv14[884] + sv14[923];
        sv14[930] = sv14[885] + sv14[924];
        sv14[931] = sv14[892] + sv14[925];
        sv14[932] = sv14[899] + sv14[920];
        sv14[933] = sv14[900] + sv14[921];
        sv14[934] = sv14[901] + sv14[922];
        sv14[935] = sv14[905] + sv14[923];
        sv14[936] = sv14[906] + sv14[924];
        sv14[937] = sv14[910] + sv14[925];
        sv14[938] = sv14[914] + sv14[920];
        sv14[939] = sv14[915] + sv14[921];
        sv14[940] = sv14[916] + sv14[922];
        sv14[941] = sv14[917] + sv14[923];
        sv14[942] = sv14[918] + sv14[924];
        sv14[943] = sv14[919] + sv14[925];
        sv14[944] = sv14[926] + sv14[926];
        sv14[945] = sv14[927] + sv14[927];
        sv14[946] = sv14[928] + sv14[928];
        sv14[947] = sv14[878] + sv14[878];
        sv14[948] = sv14[879] + sv14[879];
        sv14[949] = sv14[880] + sv14[880];
        sv14[950] = sv14[881] + sv14[881];
        sv14[951] = sv14[882] + sv14[882];
        sv14[952] = sv14[883] + sv14[883];
        sv14[953] = sv14[929] + sv14[929];
        sv14[954] = sv14[930] + sv14[930];
        sv14[955] = sv14[886] + sv14[886];
        sv14[956] = sv14[887] + sv14[887];
        sv14[957] = sv14[888] + sv14[888];
        sv14[958] = sv14[889] + sv14[889];
        sv14[959] = sv14[890] + sv14[890];
        sv14[960] = sv14[891] + sv14[891];
        sv14[961] = sv14[931] + sv14[931];
        sv14[962] = sv14[893] + sv14[893];
        sv14[963] = sv14[894] + sv14[894];
        sv14[964] = sv14[895] + sv14[895];
        sv14[965] = sv14[896] + sv14[896];
        sv14[966] = sv14[897] + sv14[897];
        sv14[967] = sv14[898] + sv14[898];
        sv14[968] = sv14[932] + sv14[932];
        sv14[969] = sv14[933] + sv14[933];
        sv14[970] = sv14[934] + sv14[934];
        sv14[971] = sv14[902] + sv14[902];
        sv14[972] = sv14[903] + sv14[903];
        sv14[973] = sv14[904] + sv14[904];
        sv14[974] = sv14[935] + sv14[935];
        sv14[975] = sv14[936] + sv14[936];
        sv14[976] = sv14[907] + sv14[907];
        sv14[977] = sv14[908] + sv14[908];
        sv14[978] = sv14[909] + sv14[909];
        sv14[979] = sv14[937] + sv14[937];
        sv14[980] = sv14[911] + sv14[911];
        sv14[981] = sv14[912] + sv14[912];
        sv14[982] = sv14[913] + sv14[913];
        sv14[983] = sv14[938] + sv14[938];
        sv14[984] = sv14[939] + sv14[939];
        sv14[985] = sv14[940] + sv14[940];
        sv14[986] = sv14[941] + sv14[941];
        sv14[987] = sv14[942] + sv14[942];
        sv14[988] = sv14[943] + sv14[943];
        sv14[989] = sv14[821] + -1 * sv14[944];
        sv14[990] = sv14[822] + -1 * sv14[945];
        sv14[991] = sv14[823] + -1 * sv14[946];
        sv14[992] = sv14[824] + -1 * sv14[947];
        sv14[993] = sv14[825] + -1 * sv14[948];
        sv14[994] = sv14[826] + -1 * sv14[949];
        sv14[995] = sv14[827] + -1 * sv14[950];
        sv14[996] = sv14[828] + -1 * sv14[951];
        sv14[997] = sv14[829] + -1 * sv14[952];
        sv14[998] = sv14[830] + -1 * sv14[945];
        sv14[999] = sv14[831] + -1 * sv14[953];
        sv14[1000] = sv14[832] + -1 * sv14[954];
        sv14[1001] = sv14[833] + -1 * sv14[955];
        sv14[1002] = sv14[834] + -1 * sv14[956];
        sv14[1003] = sv14[835] + -1 * sv14[957];
        sv14[1004] = sv14[836] + -1 * sv14[958];
        sv14[1005] = sv14[837] + -1 * sv14[959];
        sv14[1006] = sv14[838] + -1 * sv14[960];
        sv14[1007] = sv14[839] + -1 * sv14[946];
        sv14[1008] = sv14[840] + -1 * sv14[954];
        sv14[1009] = sv14[841] + -1 * sv14[961];
        sv14[1010] = sv14[842] + -1 * sv14[962];
        sv14[1011] = sv14[843] + -1 * sv14[963];
        sv14[1012] = sv14[844] + -1 * sv14[964];
        sv14[1013] = sv14[845] + -1 * sv14[965];
        sv14[1014] = sv14[846] + -1 * sv14[966];
        sv14[1015] = sv14[847] + -1 * sv14[967];
        sv14[1016] = sv14[848] + -1 * sv14[968];
        sv14[1017] = sv14[849] + -1 * sv14[969];
        sv14[1018] = sv14[850] + -1 * sv14[970];
        sv14[1019] = sv14[851] + -1 * sv14[971];
        sv14[1020] = sv14[852] + -1 * sv14[972];
        sv14[1021] = sv14[853] + -1 * sv14[973];
        sv14[1022] = sv14[854] + -1 * sv14[969];
        sv14[1023] = sv14[855] + -1 * sv14[974];
        sv14[1024] = sv14[856] + -1 * sv14[975];
        sv14[1025] = sv14[857] + -1 * sv14[976];
        sv14[1026] = sv14[858] + -1 * sv14[977];
        sv14[1027] = sv14[859] + -1 * sv14[978];
        sv14[1028] = sv14[860] + -1 * sv14[970];
        sv14[1029] = sv14[861] + -1 * sv14[975];
        sv14[1030] = sv14[862] + -1 * sv14[979];
        sv14[1031] = sv14[863] + -1 * sv14[980];
        sv14[1032] = sv14[864] + -1 * sv14[981];
        sv14[1033] = sv14[865] + -1 * sv14[982];
        sv14[1034] = sv14[866] + -1 * sv14[983];
        sv14[1035] = sv14[867] + -1 * sv14[984];
        sv14[1036] = sv14[868] + -1 * sv14[985];
        sv14[1037] = sv14[869] + -1 * sv14[984];
        sv14[1038] = sv14[870] + -1 * sv14[986];
        sv14[1039] = sv14[871] + -1 * sv14[987];
        sv14[1040] = sv14[872] + -1 * sv14[985];
        sv14[1041] = sv14[873] + -1 * sv14[987];
        sv14[1042] = sv14[874] + -1 * sv14[988];
        sv14[1043] = sv14[989] * sv14[181];
        sv14[1044] = sv14[990] * sv14[181];
        sv14[1045] = sv14[991] * sv14[181];
        sv14[1046] = sv14[992] * sv14[181];
        sv14[1047] = sv14[993] * sv14[181];
        sv14[1048] = sv14[994] * sv14[181];
        sv14[1049] = sv14[995] * sv14[181];
        sv14[1050] = sv14[996] * sv14[181];
        sv14[1051] = sv14[997] * sv14[181];
        sv14[1052] = sv14[998] * sv14[181];
        sv14[1053] = sv14[999] * sv14[181];
        sv14[1054] = sv14[1000] * sv14[181];
        sv14[1055] = sv14[1001] * sv14[181];
        sv14[1056] = sv14[1002] * sv14[181];
        sv14[1057] = sv14[1003] * sv14[181];
        sv14[1058] = sv14[1004] * sv14[181];
        sv14[1059] = sv14[1005] * sv14[181];
        sv14[1060] = sv14[1006] * sv14[181];
        sv14[1061] = sv14[1007] * sv14[181];
        sv14[1062] = sv14[1008] * sv14[181];
        sv14[1063] = sv14[1009] * sv14[181];
        sv14[1064] = sv14[1010] * sv14[181];
        sv14[1065] = sv14[1011] * sv14[181];
        sv14[1066] = sv14[1012] * sv14[181];
        sv14[1067] = sv14[1013] * sv14[181];
        sv14[1068] = sv14[1014] * sv14[181];
        sv14[1069] = sv14[1015] * sv14[181];
        sv14[1070] = sv14[1016] * sv14[181];
        sv14[1071] = sv14[1017] * sv14[181];
        sv14[1072] = sv14[1018] * sv14[181];
        sv14[1073] = sv14[1019] * sv14[181];
        sv14[1074] = sv14[1020] * sv14[181];
        sv14[1075] = sv14[1021] * sv14[181];
        sv14[1076] = sv14[1022] * sv14[181];
        sv14[1077] = sv14[1023] * sv14[181];
        sv14[1078] = sv14[1024] * sv14[181];
        sv14[1079] = sv14[1025] * sv14[181];
        sv14[1080] = sv14[1026] * sv14[181];
        sv14[1081] = sv14[1027] * sv14[181];
        sv14[1082] = sv14[1028] * sv14[181];
        sv14[1083] = sv14[1029] * sv14[181];
        sv14[1084] = sv14[1030] * sv14[181];
        sv14[1085] = sv14[1031] * sv14[181];
        sv14[1086] = sv14[1032] * sv14[181];
        sv14[1087] = sv14[1033] * sv14[181];
        sv14[1088] = sv14[1034] * sv14[181];
        sv14[1089] = sv14[1035] * sv14[181];
        sv14[1090] = sv14[1036] * sv14[181];
        sv14[1091] = sv14[1037] * sv14[181];
        sv14[1092] = sv14[1038] * sv14[181];
        sv14[1093] = sv14[1039] * sv14[181];
        sv14[1094] = sv14[1040] * sv14[181];
        sv14[1095] = sv14[1041] * sv14[181];
        sv14[1096] = sv14[1042] * sv14[181];
        sv14[1097] = sv14[1043] + sv14[593];
        sv14[1098] = sv14[1044] + sv14[602];
        sv14[1099] = sv14[1045] + sv14[611];
        sv14[1100] = sv14[1046] + sv14[620];
        sv14[1101] = sv14[1047] + sv14[629];
        sv14[1102] = sv14[1048] + sv14[638];
        sv14[1103] = sv14[1049] + sv14[647];
        sv14[1104] = sv14[1050] + sv14[656];
        sv14[1105] = sv14[1051] + sv14[665];
        sv14[1106] = sv14[1052] + sv14[594];
        sv14[1107] = sv14[1053] + sv14[603];
        sv14[1108] = sv14[1054] + sv14[612];
        sv14[1109] = sv14[1055] + sv14[621];
        sv14[1110] = sv14[1056] + sv14[630];
        sv14[1111] = sv14[1057] + sv14[639];
        sv14[1112] = sv14[1058] + sv14[648];
        sv14[1113] = sv14[1059] + sv14[657];
        sv14[1114] = sv14[1060] + sv14[666];
        sv14[1115] = sv14[1061] + sv14[595];
        sv14[1116] = sv14[1062] + sv14[604];
        sv14[1117] = sv14[1063] + sv14[613];
        sv14[1118] = sv14[1064] + sv14[622];
        sv14[1119] = sv14[1065] + sv14[631];
        sv14[1120] = sv14[1066] + sv14[640];
        sv14[1121] = sv14[1067] + sv14[649];
        sv14[1122] = sv14[1068] + sv14[658];
        sv14[1123] = sv14[1069] + sv14[667];
        sv14[1124] = sv14[1046] + sv14[596];
        sv14[1125] = sv14[1047] + sv14[597];
        sv14[1126] = sv14[1048] + sv14[598];
        sv14[1127] = sv14[1049] + sv14[599];
        sv14[1128] = sv14[1050] + sv14[600];
        sv14[1129] = sv14[1051] + sv14[601];
        sv14[1130] = sv14[1055] + sv14[605];
        sv14[1131] = sv14[1056] + sv14[606];
        sv14[1132] = sv14[1057] + sv14[607];
        sv14[1133] = sv14[1058] + sv14[608];
        sv14[1134] = sv14[1059] + sv14[609];
        sv14[1135] = sv14[1060] + sv14[610];
        sv14[1136] = sv14[1064] + sv14[614];
        sv14[1137] = sv14[1065] + sv14[615];
        sv14[1138] = sv14[1066] + sv14[616];
        sv14[1139] = sv14[1067] + sv14[617];
        sv14[1140] = sv14[1068] + sv14[618];
        sv14[1141] = sv14[1069] + sv14[619];
        sv14[1142] = sv14[1070] + sv14[623];
        sv14[1143] = sv14[1071] + sv14[632];
        sv14[1144] = sv14[1072] + sv14[641];
        sv14[1145] = sv14[1073] + sv14[650];
        sv14[1146] = sv14[1074] + sv14[659];
        sv14[1147] = sv14[1075] + sv14[668];
        sv14[1148] = sv14[1076] + sv14[624];
        sv14[1149] = sv14[1077] + sv14[633];
        sv14[1150] = sv14[1078] + sv14[642];
        sv14[1151] = sv14[1079] + sv14[651];
        sv14[1152] = sv14[1080] + sv14[660];
        sv14[1153] = sv14[1081] + sv14[669];
        sv14[1154] = sv14[1082] + sv14[625];
        sv14[1155] = sv14[1083] + sv14[634];
        sv14[1156] = sv14[1084] + sv14[643];
        sv14[1157] = sv14[1085] + sv14[652];
        sv14[1158] = sv14[1086] + sv14[661];
        sv14[1159] = sv14[1087] + sv14[670];
        sv14[1160] = sv14[1073] + sv14[626];
        sv14[1161] = sv14[1074] + sv14[627];
        sv14[1162] = sv14[1075] + sv14[628];
        sv14[1163] = sv14[1079] + sv14[635];
        sv14[1164] = sv14[1080] + sv14[636];
        sv14[1165] = sv14[1081] + sv14[637];
        sv14[1166] = sv14[1085] + sv14[644];
        sv14[1167] = sv14[1086] + sv14[645];
        sv14[1168] = sv14[1087] + sv14[646];
        sv14[1169] = sv14[1088] + sv14[653];
        sv14[1170] = sv14[1089] + sv14[662];
        sv14[1171] = sv14[1090] + sv14[671];
        sv14[1172] = sv14[1091] + sv14[654];
        sv14[1173] = sv14[1092] + sv14[663];
        sv14[1174] = sv14[1093] + sv14[672];
        sv14[1175] = sv14[1094] + sv14[655];
        sv14[1176] = sv14[1095] + sv14[664];
        sv14[1177] = sv14[1096] + sv14[673];
        sv14[1178] = sv14[211] * sp[25];
        sv14[1179] = sv14[211] * sp[26];
        sv14[1180] = sv14[211] * sp[27];
        sv14[1181] = sv14[211] * sp[28];
        sv14[1182] = sv14[211] * sp[29];
        sv14[1183] = sv14[211] * sp[30];
        sv14[1184] = sv14[593] + sv14[1178];
        sv14[1185] = sv14[594] + sv14[1179];
        sv14[1186] = sv14[595] + sv14[1180];
        sv14[1187] = sv14[602] + sv14[1179];
        sv14[1188] = sv14[603] + sv14[1181];
        sv14[1189] = sv14[604] + sv14[1182];
        sv14[1190] = sv14[611] + sv14[1180];
        sv14[1191] = sv14[612] + sv14[1182];
        sv14[1192] = sv14[613] + sv14[1183];
        sv14[1193] = sv14[623] + sv14[1178];
        sv14[1194] = sv14[624] + sv14[1179];
        sv14[1195] = sv14[625] + sv14[1180];
        sv14[1196] = sv14[632] + sv14[1179];
        sv14[1197] = sv14[633] + sv14[1181];
        sv14[1198] = sv14[634] + sv14[1182];
        sv14[1199] = sv14[641] + sv14[1180];
        sv14[1200] = sv14[642] + sv14[1182];
        sv14[1201] = sv14[643] + sv14[1183];
        sv14[1202] = sv14[653] + sv14[1178];
        sv14[1203] = sv14[654] + sv14[1179];
        sv14[1204] = sv14[655] + sv14[1180];
        sv14[1205] = sv14[662] + sv14[1179];
        sv14[1206] = sv14[663] + sv14[1181];
        sv14[1207] = sv14[664] + sv14[1182];
        sv14[1208] = sv14[671] + sv14[1180];
        sv14[1209] = sv14[672] + sv14[1182];
        sv14[1210] = sv14[673] + sv14[1183];
        sv14[1211] = sv14[1097] + sv14[1184];
        sv14[1212] = sv14[1098] + sv14[1185];
        sv14[1213] = sv14[1099] + sv14[1186];
        sv14[1214] = sv14[1100] + sv14[596];
        sv14[1215] = sv14[1101] + sv14[597];
        sv14[1216] = sv14[1102] + sv14[598];
        sv14[1217] = sv14[1103] + sv14[599];
        sv14[1218] = sv14[1104] + sv14[600];
        sv14[1219] = sv14[1105] + sv14[601];
        sv14[1220] = sv14[1106] + sv14[1187];
        sv14[1221] = sv14[1107] + sv14[1188];
        sv14[1222] = sv14[1108] + sv14[1189];
        sv14[1223] = sv14[1109] + sv14[605];
        sv14[1224] = sv14[1110] + sv14[606];
        sv14[1225] = sv14[1111] + sv14[607];
        sv14[1226] = sv14[1112] + sv14[608];
        sv14[1227] = sv14[1113] + sv14[609];
        sv14[1228] = sv14[1114] + sv14[610];
        sv14[1229] = sv14[1115] + sv14[1190];
        sv14[1230] = sv14[1116] + sv14[1191];
        sv14[1231] = sv14[1117] + sv14[1192];
        sv14[1232] = sv14[1118] + sv14[614];
        sv14[1233] = sv14[1119] + sv14[615];
        sv14[1234] = sv14[1120] + sv14[616];
        sv14[1235] = sv14[1121] + sv14[617];
        sv14[1236] = sv14[1122] + sv14[618];
        sv14[1237] = sv14[1123] + sv14[619];
        sv14[1238] = sv14[1124] + sv14[620];
        sv14[1239] = sv14[1125] + sv14[629];
        sv14[1240] = sv14[1126] + sv14[638];
        sv14[1241] = sv14[1127] + sv14[647];
        sv14[1242] = sv14[1128] + sv14[656];
        sv14[1243] = sv14[1129] + sv14[665];
        sv14[1244] = sv14[1130] + sv14[621];
        sv14[1245] = sv14[1131] + sv14[630];
        sv14[1246] = sv14[1132] + sv14[639];
        sv14[1247] = sv14[1133] + sv14[648];
        sv14[1248] = sv14[1134] + sv14[657];
        sv14[1249] = sv14[1135] + sv14[666];
        sv14[1250] = sv14[1136] + sv14[622];
        sv14[1251] = sv14[1137] + sv14[631];
        sv14[1252] = sv14[1138] + sv14[640];
        sv14[1253] = sv14[1139] + sv14[649];
        sv14[1254] = sv14[1140] + sv14[658];
        sv14[1255] = sv14[1141] + sv14[667];
        sv14[1256] = sv14[1142] + sv14[1193];
        sv14[1257] = sv14[1143] + sv14[1194];
        sv14[1258] = sv14[1144] + sv14[1195];
        sv14[1259] = sv14[1145] + sv14[626];
        sv14[1260] = sv14[1146] + sv14[627];
        sv14[1261] = sv14[1147] + sv14[628];
        sv14[1262] = sv14[1148] + sv14[1196];
        sv14[1263] = sv14[1149] + sv14[1197];
        sv14[1264] = sv14[1150] + sv14[1198];
        sv14[1265] = sv14[1151] + sv14[635];
        sv14[1266] = sv14[1152] + sv14[636];
        sv14[1267] = sv14[1153] + sv14[637];
        sv14[1268] = sv14[1154] + sv14[1199];
        sv14[1269] = sv14[1155] + sv14[1200];
        sv14[1270] = sv14[1156] + sv14[1201];
        sv14[1271] = sv14[1157] + sv14[644];
        sv14[1272] = sv14[1158] + sv14[645];
        sv14[1273] = sv14[1159] + sv14[646];
        sv14[1274] = sv14[1160] + sv14[650];
        sv14[1275] = sv14[1161] + sv14[659];
        sv14[1276] = sv14[1162] + sv14[668];
        sv14[1277] = sv14[1163] + sv14[651];
        sv14[1278] = sv14[1164] + sv14[660];
        sv14[1279] = sv14[1165] + sv14[669];
        sv14[1280] = sv14[1166] + sv14[652];
        sv14[1281] = sv14[1167] + sv14[661];
        sv14[1282] = sv14[1168] + sv14[670];
        sv14[1283] = sv14[1169] + sv14[1202];
        sv14[1284] = sv14[1170] + sv14[1203];
        sv14[1285] = sv14[1171] + sv14[1204];
        sv14[1286] = sv14[1172] + sv14[1205];
        sv14[1287] = sv14[1173] + sv14[1206];
        sv14[1288] = sv14[1174] + sv14[1207];
        sv14[1289] = sv14[1175] + sv14[1208];
        sv14[1290] = sv14[1176] + sv14[1209];
        sv14[1291] = sv14[1177] + sv14[1210];
        sv14[1292] = sv14[348] * sv14[295];
        sv14[1293] = sv14[349] * sv14[295];
        sv14[1294] = sv14[350] * sv14[295];
        sv14[1295] = sv14[351] * sv14[295];
        sv14[1296] = sv14[352] * sv14[295];
        sv14[1297] = sv14[353] * sv14[295];
        sv14[1298] = sv14[354] * sv14[295];
        sv14[1299] = sv14[355] * sv14[295];
        sv14[1300] = sv14[356] * sv14[295];
        sv14[1301] = sv14[348] * sv14[296];
        sv14[1302] = sv14[349] * sv14[296];
        sv14[1303] = sv14[350] * sv14[296];
        sv14[1304] = sv14[351] * sv14[296];
        sv14[1305] = sv14[352] * sv14[296];
        sv14[1306] = sv14[353] * sv14[296];
        sv14[1307] = sv14[354] * sv14[296];
        sv14[1308] = sv14[355] * sv14[296];
        sv14[1309] = sv14[356] * sv14[296];
        sv14[1310] = sv14[348] * sv14[297];
        sv14[1311] = sv14[349] * sv14[297];
        sv14[1312] = sv14[350] * sv14[297];
        sv14[1313] = sv14[351] * sv14[297];
        sv14[1314] = sv14[352] * sv14[297];
        sv14[1315] = sv14[353] * sv14[297];
        sv14[1316] = sv14[354] * sv14[297];
        sv14[1317] = sv14[355] * sv14[297];
        sv14[1318] = sv14[356] * sv14[297];
        sv14[1319] = sv14[348] * sv14[304];
        sv14[1320] = sv14[349] * sv14[304];
        sv14[1321] = sv14[350] * sv14[304];
        sv14[1322] = sv14[351] * sv14[304];
        sv14[1323] = sv14[352] * sv14[304];
        sv14[1324] = sv14[353] * sv14[304];
        sv14[1325] = sv14[354] * sv14[304];
        sv14[1326] = sv14[355] * sv14[304];
        sv14[1327] = sv14[356] * sv14[304];
        sv14[1328] = sv14[348] * sv14[305];
        sv14[1329] = sv14[349] * sv14[305];
        sv14[1330] = sv14[350] * sv14[305];
        sv14[1331] = sv14[351] * sv14[305];
        sv14[1332] = sv14[352] * sv14[305];
        sv14[1333] = sv14[353] * sv14[305];
        sv14[1334] = sv14[354] * sv14[305];
        sv14[1335] = sv14[355] * sv14[305];
        sv14[1336] = sv14[356] * sv14[305];
        sv14[1337] = sv14[348] * sv14[306];
        sv14[1338] = sv14[349] * sv14[306];
        sv14[1339] = sv14[350] * sv14[306];
        sv14[1340] = sv14[351] * sv14[306];
        sv14[1341] = sv14[352] * sv14[306];
        sv14[1342] = sv14[353] * sv14[306];
        sv14[1343] = sv14[354] * sv14[306];
        sv14[1344] = sv14[355] * sv14[306];
        sv14[1345] = sv14[356] * sv14[306];
        sv14[1346] = sv14[348] * sv14[313];
        sv14[1347] = sv14[349] * sv14[313];
        sv14[1348] = sv14[350] * sv14[313];
        sv14[1349] = sv14[351] * sv14[313];
        sv14[1350] = sv14[352] * sv14[313];
        sv14[1351] = sv14[353] * sv14[313];
        sv14[1352] = sv14[354] * sv14[313];
        sv14[1353] = sv14[355] * sv14[313];
        sv14[1354] = sv14[356] * sv14[313];
        sv14[1355] = sv14[348] * sv14[314];
        sv14[1356] = sv14[349] * sv14[314];
        sv14[1357] = sv14[350] * sv14[314];
        sv14[1358] = sv14[351] * sv14[314];
        sv14[1359] = sv14[352] * sv14[314];
        sv14[1360] = sv14[353] * sv14[314];
        sv14[1361] = sv14[354] * sv14[314];
        sv14[1362] = sv14[355] * sv14[314];
        sv14[1363] = sv14[356] * sv14[314];
        sv14[1364] = sv14[348] * sv14[315];
        sv14[1365] = sv14[349] * sv14[315];
        sv14[1366] = sv14[350] * sv14[315];
        sv14[1367] = sv14[351] * sv14[315];
        sv14[1368] = sv14[352] * sv14[315];
        sv14[1369] = sv14[353] * sv14[315];
        sv14[1370] = sv14[354] * sv14[315];
        sv14[1371] = sv14[355] * sv14[315];
        sv14[1372] = sv14[356] * sv14[315];
        sv14[1373] = sv14[109] * sv14[250];
        sv14[1374] = sv14[110] * sv14[250];
        sv14[1375] = sv14[111] * sv14[250];
        sv14[1376] = sv14[118] * sv14[250];
        sv14[1377] = sv14[119] * sv14[250];
        sv14[1378] = sv14[120] * sv14[250];
        sv14[1379] = sv14[127] * sv14[250];
        sv14[1380] = sv14[128] * sv14[250];
        sv14[1381] = sv14[129] * sv14[250];
        sv14[1382] = sv14[109] * sv14[251];
        sv14[1383] = sv14[110] * sv14[251];
        sv14[1384] = sv14[111] * sv14[251];
        sv14[1385] = sv14[118] * sv14[251];
        sv14[1386] = sv14[119] * sv14[251];
        sv14[1387] = sv14[120] * sv14[251];
        sv14[1388] = sv14[127] * sv14[251];
        sv14[1389] = sv14[128] * sv14[251];
        sv14[1390] = sv14[129] * sv14[251];
        sv14[1391] = sv14[109] * sv14[252];
        sv14[1392] = sv14[110] * sv14[252];
        sv14[1393] = sv14[252] * sv14[111];
        sv14[1394] = sv14[118] * sv14[252];
        sv14[1395] = sv14[119] * sv14[252];
        sv14[1396] = sv14[252] * sv14[120];
        sv14[1397] = sv14[127] * sv14[252];
        sv14[1398] = sv14[128] * sv14[252];
        sv14[1399] = sv14[252] * sv14[129];
        sv14[1400] = sv14[109] * sv14[259];
        sv14[1401] = sv14[110] * sv14[259];
        sv14[1402] = sv14[111] * sv14[259];
        sv14[1403] = sv14[118] * sv14[259];
        sv14[1404] = sv14[119] * sv14[259];
        sv14[1405] = sv14[120] * sv14[259];
        sv14[1406] = sv14[127] * sv14[259];
        sv14[1407] = sv14[128] * sv14[259];
        sv14[1408] = sv14[129] * sv14[259];
        sv14[1409] = sv14[109] * sv14[260];
        sv14[1410] = sv14[110] * sv14[260];
        sv14[1411] = sv14[111] * sv14[260];
        sv14[1412] = sv14[118] * sv14[260];
        sv14[1413] = sv14[119] * sv14[260];
        sv14[1414] = sv14[120] * sv14[260];
        sv14[1415] = sv14[127] * sv14[260];
        sv14[1416] = sv14[128] * sv14[260];
        sv14[1417] = sv14[129] * sv14[260];
        sv14[1418] = sv14[109] * sv14[261];
        sv14[1419] = sv14[110] * sv14[261];
        sv14[1420] = sv14[261] * sv14[111];
        sv14[1421] = sv14[118] * sv14[261];
        sv14[1422] = sv14[119] * sv14[261];
        sv14[1423] = sv14[261] * sv14[120];
        sv14[1424] = sv14[127] * sv14[261];
        sv14[1425] = sv14[128] * sv14[261];
        sv14[1426] = sv14[261] * sv14[129];
        sv14[1427] = sv14[109] * sv14[268];
        sv14[1428] = sv14[110] * sv14[268];
        sv14[1429] = sv14[111] * sv14[268];
        sv14[1430] = sv14[118] * sv14[268];
        sv14[1431] = sv14[119] * sv14[268];
        sv14[1432] = sv14[120] * sv14[268];
        sv14[1433] = sv14[127] * sv14[268];
        sv14[1434] = sv14[128] * sv14[268];
        sv14[1435] = sv14[129] * sv14[268];
        sv14[1436] = sv14[109] * sv14[269];
        sv14[1437] = sv14[110] * sv14[269];
        sv14[1438] = sv14[111] * sv14[269];
        sv14[1439] = sv14[118] * sv14[269];
        sv14[1440] = sv14[119] * sv14[269];
        sv14[1441] = sv14[120] * sv14[269];
        sv14[1442] = sv14[127] * sv14[269];
        sv14[1443] = sv14[128] * sv14[269];
        sv14[1444] = sv14[129] * sv14[269];
        sv14[1445] = sv14[109] * sv14[270];
        sv14[1446] = sv14[110] * sv14[270];
        sv14[1447] = sv14[270] * sv14[111];
        sv14[1448] = sv14[118] * sv14[270];
        sv14[1449] = sv14[119] * sv14[270];
        sv14[1450] = sv14[270] * sv14[120];
        sv14[1451] = sv14[127] * sv14[270];
        sv14[1452] = sv14[128] * sv14[270];
        sv14[1453] = sv14[270] * sv14[129];
        sv14[1454] = sv14[234] * sp[100];
        sv14[1455] = sv14[234] * sp[101];
        sv14[1456] = sv14[234] * sp[102];
        sv14[1457] = sv14[234] * sp[103];
        sv14[1458] = sv14[234] * sp[104];
        sv14[1459] = sv14[234] * sp[105];
        sv14[1460] = sv14[1454] + sv14[1373];
        sv14[1461] = sv14[1455] + sv14[1382];
        sv14[1462] = sv14[1391] + sv14[1456];
        sv14[1463] = sv14[1455] + sv14[1374];
        sv14[1464] = sv14[1457] + sv14[1383];
        sv14[1465] = sv14[1392] + sv14[1458];
        sv14[1466] = sv14[1456] + sv14[1375];
        sv14[1467] = sv14[1458] + sv14[1384];
        sv14[1468] = sv14[1393] + sv14[1459];
        sv14[1469] = sv14[1454] + sv14[1403];
        sv14[1470] = sv14[1455] + sv14[1412];
        sv14[1471] = sv14[1421] + sv14[1456];
        sv14[1472] = sv14[1455] + sv14[1404];
        sv14[1473] = sv14[1457] + sv14[1413];
        sv14[1474] = sv14[1422] + sv14[1458];
        sv14[1475] = sv14[1456] + sv14[1405];
        sv14[1476] = sv14[1458] + sv14[1414];
        sv14[1477] = sv14[1423] + sv14[1459];
        sv14[1478] = sv14[1454] + sv14[1433];
        sv14[1479] = sv14[1455] + sv14[1442];
        sv14[1480] = sv14[1451] + sv14[1456];
        sv14[1481] = sv14[1455] + sv14[1434];
        sv14[1482] = sv14[1457] + sv14[1443];
        sv14[1483] = sv14[1452] + sv14[1458];
        sv14[1484] = sv14[1456] + sv14[1435];
        sv14[1485] = sv14[1458] + sv14[1444];
        sv14[1486] = sv14[1453] + sv14[1459];
        sv14[1487] = sv14[134] * sp[115];
        sv14[1488] = sv14[134] * sp[116];
        sv14[1489] = sv14[134] * sp[117];
        sv14[1490] = sv14[134] * sp[118];
        sv14[1491] = sv14[134] * sp[119];
        sv14[1492] = sv14[134] * sp[120];
        sv14[1493] = sv14[1373] + sv14[1487];
        sv14[1494] = sv14[1374] + sv14[1488];
        sv14[1495] = sv14[1375] + sv14[1489];
        sv14[1496] = sv14[1382] + sv14[1488];
        sv14[1497] = sv14[1383] + sv14[1490];
        sv14[1498] = sv14[1384] + sv14[1491];
        sv14[1499] = sv14[1391] + sv14[1489];
        sv14[1500] = sv14[1392] + sv14[1491];
        sv14[1501] = sv14[1492] + sv14[1393];
        sv14[1502] = sv14[1403] + sv14[1487];
        sv14[1503] = sv14[1404] + sv14[1488];
        sv14[1504] = sv14[1405] + sv14[1489];
        sv14[1505] = sv14[1412] + sv14[1488];
        sv14[1506] = sv14[1413] + sv14[1490];
        sv14[1507] = sv14[1414] + sv14[1491];
        sv14[1508] = sv14[1421] + sv14[1489];
        sv14[1509] = sv14[1422] + sv14[1491];
        sv14[1510] = sv14[1492] + sv14[1423];
        sv14[1511] = sv14[1433] + sv14[1487];
        sv14[1512] = sv14[1434] + sv14[1488];
        sv14[1513] = sv14[1435] + sv14[1489];
        sv14[1514] = sv14[1442] + sv14[1488];
        sv14[1515] = sv14[1443] + sv14[1490];
        sv14[1516] = sv14[1444] + sv14[1491];
        sv14[1517] = sv14[1451] + sv14[1489];
        sv14[1518] = sv14[1452] + sv14[1491];
        sv14[1519] = sv14[1492] + sv14[1453];
        sv14[1520] = sv14[1460] + sv14[1493];
        sv14[1521] = sv14[1461] + sv14[1494];
        sv14[1522] = sv14[1462] + sv14[1495];
        sv14[1523] = sv14[1376] + sv14[1400];
        sv14[1524] = sv14[1377] + sv14[1409];
        sv14[1525] = sv14[1418] + sv14[1378];
        sv14[1526] = sv14[1427] + sv14[1379];
        sv14[1527] = sv14[1380] + sv14[1436];
        sv14[1528] = sv14[1445] + sv14[1381];
        sv14[1529] = sv14[1463] + sv14[1496];
        sv14[1530] = sv14[1464] + sv14[1497];
        sv14[1531] = sv14[1465] + sv14[1498];
        sv14[1532] = sv14[1401] + sv14[1385];
        sv14[1533] = sv14[1386] + sv14[1410];
        sv14[1534] = sv14[1419] + sv14[1387];
        sv14[1535] = sv14[1428] + sv14[1388];
        sv14[1536] = sv14[1437] + sv14[1389];
        sv14[1537] = sv14[1446] + sv14[1390];
        sv14[1538] = sv14[1466] + sv14[1499];
        sv14[1539] = sv14[1467] + sv14[1500];
        sv14[1540] = sv14[1501] + sv14[1468];
        sv14[1541] = sv14[1394] + sv14[1402];
        sv14[1542] = sv14[1395] + sv14[1411];
        sv14[1543] = sv14[1420] + sv14[1396];
        sv14[1544] = sv14[1397] + sv14[1429];
        sv14[1545] = sv14[1398] + sv14[1438];
        sv14[1546] = sv14[1399] + sv14[1447];
        sv14[1547] = sv14[1469] + sv14[1502];
        sv14[1548] = sv14[1470] + sv14[1503];
        sv14[1549] = sv14[1471] + sv14[1504];
        sv14[1550] = sv14[1430] + sv14[1406];
        sv14[1551] = sv14[1407] + sv14[1439];
        sv14[1552] = sv14[1448] + sv14[1408];
        sv14[1553] = sv14[1472] + sv14[1505];
        sv14[1554] = sv14[1473] + sv14[1506];
        sv14[1555] = sv14[1474] + sv14[1507];
        sv14[1556] = sv14[1431] + sv14[1415];
        sv14[1557] = sv14[1440] + sv14[1416];
        sv14[1558] = sv14[1449] + sv14[1417];
        sv14[1559] = sv14[1475] + sv14[1508];
        sv14[1560] = sv14[1476] + sv14[1509];
        sv14[1561] = sv14[1510] + sv14[1477];
        sv14[1562] = sv14[1424] + sv14[1432];
        sv14[1563] = sv14[1425] + sv14[1441];
        sv14[1564] = sv14[1426] + sv14[1450];
        sv14[1565] = sv14[1478] + sv14[1511];
        sv14[1566] = sv14[1479] + sv14[1512];
        sv14[1567] = sv14[1480] + sv14[1513];
        sv14[1568] = sv14[1481] + sv14[1514];
        sv14[1569] = sv14[1482] + sv14[1515];
        sv14[1570] = sv14[1483] + sv14[1516];
        sv14[1571] = sv14[1484] + sv14[1517];
        sv14[1572] = sv14[1485] + sv14[1518];
        sv14[1573] = sv14[1519] + sv14[1486];
        sv14[1574] = sv14[65] * sv14[295];
        sv14[1575] = sv14[65] * sv14[296];
        sv14[1576] = sv14[65] * sv14[297];
        sv14[1577] = sv14[65] * sv14[304];
        sv14[1578] = sv14[65] * sv14[305];
        sv14[1579] = sv14[65] * sv14[306];
        sv14[1580] = sv14[65] * sv14[313];
        sv14[1581] = sv14[65] * sv14[314];
        sv14[1582] = sv14[65] * sv14[315];
        sv14[1583] = sv14[66] * sv14[295];
        sv14[1584] = sv14[66] * sv14[296];
        sv14[1585] = sv14[66] * sv14[297];
        sv14[1586] = sv14[66] * sv14[304];
        sv14[1587] = sv14[66] * sv14[305];
        sv14[1588] = sv14[66] * sv14[306];
        sv14[1589] = sv14[66] * sv14[313];
        sv14[1590] = sv14[66] * sv14[314];
        sv14[1591] = sv14[66] * sv14[315];
        sv14[1592] = sv14[67] * sv14[295];
        sv14[1593] = sv14[67] * sv14[296];
        sv14[1594] = sv14[67] * sv14[297];
        sv14[1595] = sv14[67] * sv14[304];
        sv14[1596] = sv14[67] * sv14[305];
        sv14[1597] = sv14[67] * sv14[306];
        sv14[1598] = sv14[67] * sv14[313];
        sv14[1599] = sv14[67] * sv14[314];
        sv14[1600] = sv14[67] * sv14[315];
        sv14[1601] = sv14[71] * sv14[295];
        sv14[1602] = sv14[71] * sv14[296];
        sv14[1603] = sv14[71] * sv14[297];
        sv14[1604] = sv14[71] * sv14[304];
        sv14[1605] = sv14[71] * sv14[305];
        sv14[1606] = sv14[71] * sv14[306];
        sv14[1607] = sv14[71] * sv14[313];
        sv14[1608] = sv14[71] * sv14[314];
        sv14[1609] = sv14[71] * sv14[315];
        sv14[1610] = sv14[72] * sv14[295];
        sv14[1611] = sv14[72] * sv14[296];
        sv14[1612] = sv14[72] * sv14[297];
        sv14[1613] = sv14[72] * sv14[304];
        sv14[1614] = sv14[72] * sv14[305];
        sv14[1615] = sv14[72] * sv14[306];
        sv14[1616] = sv14[72] * sv14[313];
        sv14[1617] = sv14[72] * sv14[314];
        sv14[1618] = sv14[72] * sv14[315];
        sv14[1619] = sv14[73] * sv14[295];
        sv14[1620] = sv14[73] * sv14[296];
        sv14[1621] = sv14[73] * sv14[297];
        sv14[1622] = sv14[73] * sv14[304];
        sv14[1623] = sv14[73] * sv14[305];
        sv14[1624] = sv14[73] * sv14[306];
        sv14[1625] = sv14[73] * sv14[313];
        sv14[1626] = sv14[73] * sv14[314];
        sv14[1627] = sv14[73] * sv14[315];
        sv14[1628] = sv14[77] * sv14[295];
        sv14[1629] = sv14[77] * sv14[296];
        sv14[1630] = sv14[77] * sv14[297];
        sv14[1631] = sv14[77] * sv14[304];
        sv14[1632] = sv14[77] * sv14[305];
        sv14[1633] = sv14[77] * sv14[306];
        sv14[1634] = sv14[77] * sv14[313];
        sv14[1635] = sv14[77] * sv14[314];
        sv14[1636] = sv14[77] * sv14[315];
        sv14[1637] = sv14[78] * sv14[295];
        sv14[1638] = sv14[78] * sv14[296];
        sv14[1639] = sv14[78] * sv14[297];
        sv14[1640] = sv14[78] * sv14[304];
        sv14[1641] = sv14[78] * sv14[305];
        sv14[1642] = sv14[78] * sv14[306];
        sv14[1643] = sv14[78] * sv14[313];
        sv14[1644] = sv14[78] * sv14[314];
        sv14[1645] = sv14[78] * sv14[315];
        sv14[1646] = sv14[79] * sv14[295];
        sv14[1647] = sv14[79] * sv14[296];
        sv14[1648] = sv14[79] * sv14[297];
        sv14[1649] = sv14[79] * sv14[304];
        sv14[1650] = sv14[79] * sv14[305];
        sv14[1651] = sv14[79] * sv14[306];
        sv14[1652] = sv14[79] * sv14[313];
        sv14[1653] = sv14[79] * sv14[314];
        sv14[1654] = sv14[79] * sv14[315];
        sv14[1655] = sv14[52] * sp[130];
        sv14[1656] = sv14[52] * sp[131];
        sv14[1657] = sv14[52] * sp[132];
        sv14[1658] = sv14[52] * sp[133];
        sv14[1659] = sv14[52] * sp[134];
        sv14[1660] = sv14[52] * sp[135];
        sv14[1661] = sv14[1574] + sv14[1655];
        sv14[1662] = sv14[1583] + sv14[1656];
        sv14[1663] = sv14[1592] + sv14[1657];
        sv14[1664] = sv14[1575] + sv14[1656];
        sv14[1665] = sv14[1584] + sv14[1658];
        sv14[1666] = sv14[1593] + sv14[1659];
        sv14[1667] = sv14[1576] + sv14[1657];
        sv14[1668] = sv14[1585] + sv14[1659];
        sv14[1669] = sv14[1594] + sv14[1660];
        sv14[1670] = sv14[1604] + sv14[1655];
        sv14[1671] = sv14[1613] + sv14[1656];
        sv14[1672] = sv14[1622] + sv14[1657];
        sv14[1673] = sv14[1605] + sv14[1656];
        sv14[1674] = sv14[1614] + sv14[1658];
        sv14[1675] = sv14[1623] + sv14[1659];
        sv14[1676] = sv14[1606] + sv14[1657];
        sv14[1677] = sv14[1615] + sv14[1659];
        sv14[1678] = sv14[1624] + sv14[1660];
        sv14[1679] = sv14[1634] + sv14[1655];
        sv14[1680] = sv14[1643] + sv14[1656];
        sv14[1681] = sv14[1652] + sv14[1657];
        sv14[1682] = sv14[1635] + sv14[1656];
        sv14[1683] = sv14[1644] + sv14[1658];
        sv14[1684] = sv14[1653] + sv14[1659];
        sv14[1685] = sv14[1636] + sv14[1657];
        sv14[1686] = sv14[1645] + sv14[1659];
        sv14[1687] = sv14[1654] + sv14[1660];
        sv14[1688] = sv14[329] * sp[79];
        sv14[1689] = sv14[329] * sp[80];
        sv14[1690] = sv14[329] * sp[81];
        sv14[1691] = sv14[329] * sp[82];
        sv14[1692] = sv14[329] * sp[83];
        sv14[1693] = sv14[329] * sp[84];
        sv14[1694] = sv14[1688] + sv14[1574];
        sv14[1695] = sv14[1689] + sv14[1575];
        sv14[1696] = sv14[1690] + sv14[1576];
        sv14[1697] = sv14[1689] + sv14[1583];
        sv14[1698] = sv14[1691] + sv14[1584];
        sv14[1699] = sv14[1692] + sv14[1585];
        sv14[1700] = sv14[1690] + sv14[1592];
        sv14[1701] = sv14[1692] + sv14[1593];
        sv14[1702] = sv14[1693] + sv14[1594];
        sv14[1703] = sv14[1688] + sv14[1604];
        sv14[1704] = sv14[1689] + sv14[1605];
        sv14[1705] = sv14[1690] + sv14[1606];
        sv14[1706] = sv14[1689] + sv14[1613];
        sv14[1707] = sv14[1691] + sv14[1614];
        sv14[1708] = sv14[1692] + sv14[1615];
        sv14[1709] = sv14[1690] + sv14[1622];
        sv14[1710] = sv14[1692] + sv14[1623];
        sv14[1711] = sv14[1693] + sv14[1624];
        sv14[1712] = sv14[1688] + sv14[1634];
        sv14[1713] = sv14[1689] + sv14[1635];
        sv14[1714] = sv14[1690] + sv14[1636];
        sv14[1715] = sv14[1689] + sv14[1643];
        sv14[1716] = sv14[1691] + sv14[1644];
        sv14[1717] = sv14[1692] + sv14[1645];
        sv14[1718] = sv14[1690] + sv14[1652];
        sv14[1719] = sv14[1692] + sv14[1653];
        sv14[1720] = sv14[1693] + sv14[1654];
        sv14[1721] = sv14[1694] + sv14[1661];
        sv14[1722] = sv14[1695] + sv14[1662];
        sv14[1723] = sv14[1696] + sv14[1663];
        sv14[1724] = sv14[1577] + sv14[1601];
        sv14[1725] = sv14[1610] + sv14[1578];
        sv14[1726] = sv14[1579] + sv14[1619];
        sv14[1727] = sv14[1628] + sv14[1580];
        sv14[1728] = sv14[1637] + sv14[1581];
        sv14[1729] = sv14[1582] + sv14[1646];
        sv14[1730] = sv14[1697] + sv14[1664];
        sv14[1731] = sv14[1698] + sv14[1665];
        sv14[1732] = sv14[1699] + sv14[1666];
        sv14[1733] = sv14[1586] + sv14[1602];
        sv14[1734] = sv14[1587] + sv14[1611];
        sv14[1735] = sv14[1588] + sv14[1620];
        sv14[1736] = sv14[1589] + sv14[1629];
        sv14[1737] = sv14[1638] + sv14[1590];
        sv14[1738] = sv14[1591] + sv14[1647];
        sv14[1739] = sv14[1700] + sv14[1667];
        sv14[1740] = sv14[1701] + sv14[1668];
        sv14[1741] = sv14[1702] + sv14[1669];
        sv14[1742] = sv14[1603] + sv14[1595];
        sv14[1743] = sv14[1612] + sv14[1596];
        sv14[1744] = sv14[1621] + sv14[1597];
        sv14[1745] = sv14[1630] + sv14[1598];
        sv14[1746] = sv14[1639] + sv14[1599];
        sv14[1747] = sv14[1648] + sv14[1600];
        sv14[1748] = sv14[1703] + sv14[1670];
        sv14[1749] = sv14[1704] + sv14[1671];
        sv14[1750] = sv14[1705] + sv14[1672];
        sv14[1751] = sv14[1631] + sv14[1607];
        sv14[1752] = sv14[1640] + sv14[1608];
        sv14[1753] = sv14[1609] + sv14[1649];
        sv14[1754] = sv14[1706] + sv14[1673];
        sv14[1755] = sv14[1707] + sv14[1674];
        sv14[1756] = sv14[1708] + sv14[1675];
        sv14[1757] = sv14[1616] + sv14[1632];
        sv14[1758] = sv14[1641] + sv14[1617];
        sv14[1759] = sv14[1618] + sv14[1650];
        sv14[1760] = sv14[1709] + sv14[1676];
        sv14[1761] = sv14[1710] + sv14[1677];
        sv14[1762] = sv14[1711] + sv14[1678];
        sv14[1763] = sv14[1633] + sv14[1625];
        sv14[1764] = sv14[1642] + sv14[1626];
        sv14[1765] = sv14[1651] + sv14[1627];
        sv14[1766] = sv14[1712] + sv14[1679];
        sv14[1767] = sv14[1713] + sv14[1680];
        sv14[1768] = sv14[1714] + sv14[1681];
        sv14[1769] = sv14[1715] + sv14[1682];
        sv14[1770] = sv14[1716] + sv14[1683];
        sv14[1771] = sv14[1717] + sv14[1684];
        sv14[1772] = sv14[1718] + sv14[1685];
        sv14[1773] = sv14[1719] + sv14[1686];
        sv14[1774] = sv14[1720] + sv14[1687];
        sv14[1775] = sv14[1520] + -1 * sv14[1721];
        sv14[1776] = sv14[1521] + -1 * sv14[1722];
        sv14[1777] = sv14[1522] + -1 * sv14[1723];
        sv14[1778] = sv14[1523] + -1 * sv14[1724];
        sv14[1779] = sv14[1524] + -1 * sv14[1725];
        sv14[1780] = sv14[1525] + -1 * sv14[1726];
        sv14[1781] = sv14[1526] + -1 * sv14[1727];
        sv14[1782] = sv14[1527] + -1 * sv14[1728];
        sv14[1783] = sv14[1528] + -1 * sv14[1729];
        sv14[1784] = sv14[1529] + -1 * sv14[1730];
        sv14[1785] = sv14[1530] + -1 * sv14[1731];
        sv14[1786] = sv14[1531] + -1 * sv14[1732];
        sv14[1787] = sv14[1532] + -1 * sv14[1733];
        sv14[1788] = sv14[1533] + -1 * sv14[1734];
        sv14[1789] = sv14[1534] + -1 * sv14[1735];
        sv14[1790] = sv14[1535] + -1 * sv14[1736];
        sv14[1791] = sv14[1536] + -1 * sv14[1737];
        sv14[1792] = sv14[1537] + -1 * sv14[1738];
        sv14[1793] = sv14[1538] + -1 * sv14[1739];
        sv14[1794] = sv14[1539] + -1 * sv14[1740];
        sv14[1795] = sv14[1540] + -1 * sv14[1741];
        sv14[1796] = sv14[1541] + -1 * sv14[1742];
        sv14[1797] = sv14[1542] + -1 * sv14[1743];
        sv14[1798] = sv14[1543] + -1 * sv14[1744];
        sv14[1799] = sv14[1544] + -1 * sv14[1745];
        sv14[1800] = sv14[1545] + -1 * sv14[1746];
        sv14[1801] = sv14[1546] + -1 * sv14[1747];
        sv14[1802] = sv14[1547] + -1 * sv14[1748];
        sv14[1803] = sv14[1548] + -1 * sv14[1749];
        sv14[1804] = sv14[1549] + -1 * sv14[1750];
        sv14[1805] = sv14[1550] + -1 * sv14[1751];
        sv14[1806] = sv14[1551] + -1 * sv14[1752];
        sv14[1807] = sv14[1552] + -1 * sv14[1753];
        sv14[1808] = sv14[1553] + -1 * sv14[1754];
        sv14[1809] = sv14[1554] + -1 * sv14[1755];
        sv14[1810] = sv14[1555] + -1 * sv14[1756];
        sv14[1811] = sv14[1556] + -1 * sv14[1757];
        sv14[1812] = sv14[1557] + -1 * sv14[1758];
        sv14[1813] = sv14[1558] + -1 * sv14[1759];
        sv14[1814] = sv14[1559] + -1 * sv14[1760];
        sv14[1815] = sv14[1560] + -1 * sv14[1761];
        sv14[1816] = sv14[1561] + -1 * sv14[1762];
        sv14[1817] = sv14[1562] + -1 * sv14[1763];
        sv14[1818] = sv14[1563] + -1 * sv14[1764];
        sv14[1819] = sv14[1564] + -1 * sv14[1765];
        sv14[1820] = sv14[1565] + -1 * sv14[1766];
        sv14[1821] = sv14[1566] + -1 * sv14[1767];
        sv14[1822] = sv14[1567] + -1 * sv14[1768];
        sv14[1823] = sv14[1568] + -1 * sv14[1769];
        sv14[1824] = sv14[1569] + -1 * sv14[1770];
        sv14[1825] = sv14[1570] + -1 * sv14[1771];
        sv14[1826] = sv14[1571] + -1 * sv14[1772];
        sv14[1827] = sv14[1572] + -1 * sv14[1773];
        sv14[1828] = sv14[1573] + -1 * sv14[1774];
        sv14[1829] = sv14[1775] * sv14[329];
        sv14[1830] = sv14[1776] * sv14[329];
        sv14[1831] = sv14[1777] * sv14[329];
        sv14[1832] = sv14[1778] * sv14[329];
        sv14[1833] = sv14[1779] * sv14[329];
        sv14[1834] = sv14[1780] * sv14[329];
        sv14[1835] = sv14[1781] * sv14[329];
        sv14[1836] = sv14[1782] * sv14[329];
        sv14[1837] = sv14[1783] * sv14[329];
        sv14[1838] = sv14[1784] * sv14[329];
        sv14[1839] = sv14[1785] * sv14[329];
        sv14[1840] = sv14[1786] * sv14[329];
        sv14[1841] = sv14[1787] * sv14[329];
        sv14[1842] = sv14[1788] * sv14[329];
        sv14[1843] = sv14[1789] * sv14[329];
        sv14[1844] = sv14[1790] * sv14[329];
        sv14[1845] = sv14[1791] * sv14[329];
        sv14[1846] = sv14[1792] * sv14[329];
        sv14[1847] = sv14[1793] * sv14[329];
        sv14[1848] = sv14[1794] * sv14[329];
        sv14[1849] = sv14[1795] * sv14[329];
        sv14[1850] = sv14[1796] * sv14[329];
        sv14[1851] = sv14[1797] * sv14[329];
        sv14[1852] = sv14[1798] * sv14[329];
        sv14[1853] = sv14[1799] * sv14[329];
        sv14[1854] = sv14[1800] * sv14[329];
        sv14[1855] = sv14[1801] * sv14[329];
        sv14[1856] = sv14[1802] * sv14[329];
        sv14[1857] = sv14[1803] * sv14[329];
        sv14[1858] = sv14[1804] * sv14[329];
        sv14[1859] = sv14[1805] * sv14[329];
        sv14[1860] = sv14[1806] * sv14[329];
        sv14[1861] = sv14[1807] * sv14[329];
        sv14[1862] = sv14[1808] * sv14[329];
        sv14[1863] = sv14[1809] * sv14[329];
        sv14[1864] = sv14[1810] * sv14[329];
        sv14[1865] = sv14[1811] * sv14[329];
        sv14[1866] = sv14[1812] * sv14[329];
        sv14[1867] = sv14[1813] * sv14[329];
        sv14[1868] = sv14[1814] * sv14[329];
        sv14[1869] = sv14[1815] * sv14[329];
        sv14[1870] = sv14[1816] * sv14[329];
        sv14[1871] = sv14[1817] * sv14[329];
        sv14[1872] = sv14[1818] * sv14[329];
        sv14[1873] = sv14[1819] * sv14[329];
        sv14[1874] = sv14[1820] * sv14[329];
        sv14[1875] = sv14[1821] * sv14[329];
        sv14[1876] = sv14[1822] * sv14[329];
        sv14[1877] = sv14[1823] * sv14[329];
        sv14[1878] = sv14[1824] * sv14[329];
        sv14[1879] = sv14[1825] * sv14[329];
        sv14[1880] = sv14[1826] * sv14[329];
        sv14[1881] = sv14[1827] * sv14[329];
        sv14[1882] = sv14[1828] * sv14[329];
        sv14[1883] = sv14[1829] + sv14[1292];
        sv14[1884] = sv14[1830] + sv14[1301];
        sv14[1885] = sv14[1831] + sv14[1310];
        sv14[1886] = sv14[1832] + sv14[1319];
        sv14[1887] = sv14[1833] + sv14[1328];
        sv14[1888] = sv14[1834] + sv14[1337];
        sv14[1889] = sv14[1835] + sv14[1346];
        sv14[1890] = sv14[1836] + sv14[1355];
        sv14[1891] = sv14[1837] + sv14[1364];
        sv14[1892] = sv14[1838] + sv14[1293];
        sv14[1893] = sv14[1839] + sv14[1302];
        sv14[1894] = sv14[1840] + sv14[1311];
        sv14[1895] = sv14[1841] + sv14[1320];
        sv14[1896] = sv14[1842] + sv14[1329];
        sv14[1897] = sv14[1843] + sv14[1338];
        sv14[1898] = sv14[1844] + sv14[1347];
        sv14[1899] = sv14[1845] + sv14[1356];
        sv14[1900] = sv14[1846] + sv14[1365];
        sv14[1901] = sv14[1847] + sv14[1294];
        sv14[1902] = sv14[1848] + sv14[1303];
        sv14[1903] = sv14[1849] + sv14[1312];
        sv14[1904] = sv14[1850] + sv14[1321];
        sv14[1905] = sv14[1851] + sv14[1330];
        sv14[1906] = sv14[1852] + sv14[1339];
        sv14[1907] = sv14[1853] + sv14[1348];
        sv14[1908] = sv14[1854] + sv14[1357];
        sv14[1909] = sv14[1855] + sv14[1366];
        sv14[1910] = sv14[1832] + sv14[1295];
        sv14[1911] = sv14[1833] + sv14[1296];
        sv14[1912] = sv14[1834] + sv14[1297];
        sv14[1913] = sv14[1835] + sv14[1298];
        sv14[1914] = sv14[1836] + sv14[1299];
        sv14[1915] = sv14[1837] + sv14[1300];
        sv14[1916] = sv14[1841] + sv14[1304];
        sv14[1917] = sv14[1842] + sv14[1305];
        sv14[1918] = sv14[1843] + sv14[1306];
        sv14[1919] = sv14[1844] + sv14[1307];
        sv14[1920] = sv14[1845] + sv14[1308];
        sv14[1921] = sv14[1846] + sv14[1309];
        sv14[1922] = sv14[1850] + sv14[1313];
        sv14[1923] = sv14[1851] + sv14[1314];
        sv14[1924] = sv14[1852] + sv14[1315];
        sv14[1925] = sv14[1853] + sv14[1316];
        sv14[1926] = sv14[1854] + sv14[1317];
        sv14[1927] = sv14[1855] + sv14[1318];
        sv14[1928] = sv14[1856] + sv14[1322];
        sv14[1929] = sv14[1857] + sv14[1331];
        sv14[1930] = sv14[1858] + sv14[1340];
        sv14[1931] = sv14[1859] + sv14[1349];
        sv14[1932] = sv14[1860] + sv14[1358];
        sv14[1933] = sv14[1861] + sv14[1367];
        sv14[1934] = sv14[1862] + sv14[1323];
        sv14[1935] = sv14[1863] + sv14[1332];
        sv14[1936] = sv14[1864] + sv14[1341];
        sv14[1937] = sv14[1865] + sv14[1350];
        sv14[1938] = sv14[1866] + sv14[1359];
        sv14[1939] = sv14[1867] + sv14[1368];
        sv14[1940] = sv14[1868] + sv14[1324];
        sv14[1941] = sv14[1869] + sv14[1333];
        sv14[1942] = sv14[1870] + sv14[1342];
        sv14[1943] = sv14[1871] + sv14[1351];
        sv14[1944] = sv14[1872] + sv14[1360];
        sv14[1945] = sv14[1873] + sv14[1369];
        sv14[1946] = sv14[1859] + sv14[1325];
        sv14[1947] = sv14[1860] + sv14[1326];
        sv14[1948] = sv14[1861] + sv14[1327];
        sv14[1949] = sv14[1865] + sv14[1334];
        sv14[1950] = sv14[1866] + sv14[1335];
        sv14[1951] = sv14[1867] + sv14[1336];
        sv14[1952] = sv14[1871] + sv14[1343];
        sv14[1953] = sv14[1872] + sv14[1344];
        sv14[1954] = sv14[1873] + sv14[1345];
        sv14[1955] = sv14[1874] + sv14[1352];
        sv14[1956] = sv14[1875] + sv14[1361];
        sv14[1957] = sv14[1876] + sv14[1370];
        sv14[1958] = sv14[1877] + sv14[1353];
        sv14[1959] = sv14[1878] + sv14[1362];
        sv14[1960] = sv14[1879] + sv14[1371];
        sv14[1961] = sv14[1880] + sv14[1354];
        sv14[1962] = sv14[1881] + sv14[1363];
        sv14[1963] = sv14[1882] + sv14[1372];
        sv14[1964] = sv14[368] * sp[130];
        sv14[1965] = sv14[368] * sp[131];
        sv14[1966] = sv14[368] * sp[132];
        sv14[1967] = sv14[368] * sp[133];
        sv14[1968] = sv14[368] * sp[134];
        sv14[1969] = sv14[368] * sp[135];
        sv14[1970] = sv14[1292] + sv14[1964];
        sv14[1971] = sv14[1293] + sv14[1965];
        sv14[1972] = sv14[1294] + sv14[1966];
        sv14[1973] = sv14[1301] + sv14[1965];
        sv14[1974] = sv14[1302] + sv14[1967];
        sv14[1975] = sv14[1303] + sv14[1968];
        sv14[1976] = sv14[1310] + sv14[1966];
        sv14[1977] = sv14[1311] + sv14[1968];
        sv14[1978] = sv14[1312] + sv14[1969];
        sv14[1979] = sv14[1322] + sv14[1964];
        sv14[1980] = sv14[1323] + sv14[1965];
        sv14[1981] = sv14[1324] + sv14[1966];
        sv14[1982] = sv14[1331] + sv14[1965];
        sv14[1983] = sv14[1332] + sv14[1967];
        sv14[1984] = sv14[1333] + sv14[1968];
        sv14[1985] = sv14[1340] + sv14[1966];
        sv14[1986] = sv14[1341] + sv14[1968];
        sv14[1987] = sv14[1342] + sv14[1969];
        sv14[1988] = sv14[1352] + sv14[1964];
        sv14[1989] = sv14[1353] + sv14[1965];
        sv14[1990] = sv14[1354] + sv14[1966];
        sv14[1991] = sv14[1361] + sv14[1965];
        sv14[1992] = sv14[1362] + sv14[1967];
        sv14[1993] = sv14[1363] + sv14[1968];
        sv14[1994] = sv14[1370] + sv14[1966];
        sv14[1995] = sv14[1371] + sv14[1968];
        sv14[1996] = sv14[1372] + sv14[1969];
        sv14[1997] = sv14[1883] + sv14[1970];
        sv14[1998] = sv14[1884] + sv14[1971];
        sv14[1999] = sv14[1885] + sv14[1972];
        sv14[2000] = sv14[1886] + sv14[1295];
        sv14[2001] = sv14[1887] + sv14[1296];
        sv14[2002] = sv14[1888] + sv14[1297];
        sv14[2003] = sv14[1889] + sv14[1298];
        sv14[2004] = sv14[1890] + sv14[1299];
        sv14[2005] = sv14[1891] + sv14[1300];
        sv14[2006] = sv14[1892] + sv14[1973];
        sv14[2007] = sv14[1893] + sv14[1974];
        sv14[2008] = sv14[1894] + sv14[1975];
        sv14[2009] = sv14[1895] + sv14[1304];
        sv14[2010] = sv14[1896] + sv14[1305];
        sv14[2011] = sv14[1897] + sv14[1306];
        sv14[2012] = sv14[1898] + sv14[1307];
        sv14[2013] = sv14[1899] + sv14[1308];
        sv14[2014] = sv14[1900] + sv14[1309];
        sv14[2015] = sv14[1901] + sv14[1976];
        sv14[2016] = sv14[1902] + sv14[1977];
        sv14[2017] = sv14[1903] + sv14[1978];
        sv14[2018] = sv14[1904] + sv14[1313];
        sv14[2019] = sv14[1905] + sv14[1314];
        sv14[2020] = sv14[1906] + sv14[1315];
        sv14[2021] = sv14[1907] + sv14[1316];
        sv14[2022] = sv14[1908] + sv14[1317];
        sv14[2023] = sv14[1909] + sv14[1318];
        sv14[2024] = sv14[1910] + sv14[1319];
        sv14[2025] = sv14[1911] + sv14[1328];
        sv14[2026] = sv14[1912] + sv14[1337];
        sv14[2027] = sv14[1913] + sv14[1346];
        sv14[2028] = sv14[1914] + sv14[1355];
        sv14[2029] = sv14[1915] + sv14[1364];
        sv14[2030] = sv14[1916] + sv14[1320];
        sv14[2031] = sv14[1917] + sv14[1329];
        sv14[2032] = sv14[1918] + sv14[1338];
        sv14[2033] = sv14[1919] + sv14[1347];
        sv14[2034] = sv14[1920] + sv14[1356];
        sv14[2035] = sv14[1921] + sv14[1365];
        sv14[2036] = sv14[1922] + sv14[1321];
        sv14[2037] = sv14[1923] + sv14[1330];
        sv14[2038] = sv14[1924] + sv14[1339];
        sv14[2039] = sv14[1925] + sv14[1348];
        sv14[2040] = sv14[1926] + sv14[1357];
        sv14[2041] = sv14[1927] + sv14[1366];
        sv14[2042] = sv14[1928] + sv14[1979];
        sv14[2043] = sv14[1929] + sv14[1980];
        sv14[2044] = sv14[1930] + sv14[1981];
        sv14[2045] = sv14[1931] + sv14[1325];
        sv14[2046] = sv14[1932] + sv14[1326];
        sv14[2047] = sv14[1933] + sv14[1327];
        sv14[2048] = sv14[1934] + sv14[1982];
        sv14[2049] = sv14[1935] + sv14[1983];
        sv14[2050] = sv14[1936] + sv14[1984];
        sv14[2051] = sv14[1937] + sv14[1334];
        sv14[2052] = sv14[1938] + sv14[1335];
        sv14[2053] = sv14[1939] + sv14[1336];
        sv14[2054] = sv14[1940] + sv14[1985];
        sv14[2055] = sv14[1941] + sv14[1986];
        sv14[2056] = sv14[1942] + sv14[1987];
        sv14[2057] = sv14[1943] + sv14[1343];
        sv14[2058] = sv14[1944] + sv14[1344];
        sv14[2059] = sv14[1945] + sv14[1345];
        sv14[2060] = sv14[1946] + sv14[1349];
        sv14[2061] = sv14[1947] + sv14[1358];
        sv14[2062] = sv14[1948] + sv14[1367];
        sv14[2063] = sv14[1949] + sv14[1350];
        sv14[2064] = sv14[1950] + sv14[1359];
        sv14[2065] = sv14[1951] + sv14[1368];
        sv14[2066] = sv14[1952] + sv14[1351];
        sv14[2067] = sv14[1953] + sv14[1360];
        sv14[2068] = sv14[1954] + sv14[1369];
        sv14[2069] = sv14[1955] + sv14[1988];
        sv14[2070] = sv14[1956] + sv14[1989];
        sv14[2071] = sv14[1957] + sv14[1990];
        sv14[2072] = sv14[1958] + sv14[1991];
        sv14[2073] = sv14[1959] + sv14[1992];
        sv14[2074] = sv14[1960] + sv14[1993];
        sv14[2075] = sv14[1961] + sv14[1994];
        sv14[2076] = sv14[1962] + sv14[1995];
        sv14[2077] = sv14[1963] + sv14[1996];
        sv14[2078] = sv14[1997] + sv14[1211];
        sv14[2079] = sv14[1998] + sv14[1212];
        sv14[2080] = sv14[1213] + sv14[1999];
        sv14[2081] = sv14[1214] + sv14[2000];
        sv14[2082] = sv14[1215] + sv14[2001];
        sv14[2083] = sv14[1216] + sv14[2002];
        sv14[2084] = sv14[1217] + sv14[2003];
        sv14[2085] = sv14[1218] + sv14[2004];
        sv14[2086] = sv14[1219] + sv14[2005];
        sv14[2087] = sv14[2006] + sv14[1220];
        sv14[2088] = sv14[2007] + sv14[1221];
        sv14[2089] = sv14[1222] + sv14[2008];
        sv14[2090] = sv14[1223] + sv14[2009];
        sv14[2091] = sv14[1224] + sv14[2010];
        sv14[2092] = sv14[1225] + sv14[2011];
        sv14[2093] = sv14[1226] + sv14[2012];
        sv14[2094] = sv14[1227] + sv14[2013];
        sv14[2095] = sv14[1228] + sv14[2014];
        sv14[2096] = sv14[1229] + sv14[2015];
        sv14[2097] = sv14[1230] + sv14[2016];
        sv14[2098] = sv14[1231] + sv14[2017];
        sv14[2099] = sv14[1232] + sv14[2018];
        sv14[2100] = sv14[1233] + sv14[2019];
        sv14[2101] = sv14[1234] + sv14[2020];
        sv14[2102] = sv14[1235] + sv14[2021];
        sv14[2103] = sv14[1236] + sv14[2022];
        sv14[2104] = sv14[1237] + sv14[2023];
        sv14[2105] = sv14[2024] + sv14[1238];
        sv14[2106] = sv14[2025] + sv14[1239];
        sv14[2107] = sv14[1240] + sv14[2026];
        sv14[2108] = sv14[1241] + sv14[2027];
        sv14[2109] = sv14[1242] + sv14[2028];
        sv14[2110] = sv14[1243] + sv14[2029];
        sv14[2111] = sv14[2030] + sv14[1244];
        sv14[2112] = sv14[2031] + sv14[1245];
        sv14[2113] = sv14[1246] + sv14[2032];
        sv14[2114] = sv14[1247] + sv14[2033];
        sv14[2115] = sv14[1248] + sv14[2034];
        sv14[2116] = sv14[1249] + sv14[2035];
        sv14[2117] = sv14[2036] + sv14[1250];
        sv14[2118] = sv14[2037] + sv14[1251];
        sv14[2119] = sv14[1252] + sv14[2038];
        sv14[2120] = sv14[1253] + sv14[2039];
        sv14[2121] = sv14[1254] + sv14[2040];
        sv14[2122] = sv14[1255] + sv14[2041];
        sv14[2123] = sv14[2042] + sv14[1256];
        sv14[2124] = sv14[2043] + sv14[1257];
        sv14[2125] = sv14[1258] + sv14[2044];
        sv14[2126] = sv14[2045] + sv14[1259];
        sv14[2127] = sv14[2046] + sv14[1260];
        sv14[2128] = sv14[2047] + sv14[1261];
        sv14[2129] = sv14[2048] + sv14[1262];
        sv14[2130] = sv14[2049] + sv14[1263];
        sv14[2131] = sv14[1264] + sv14[2050];
        sv14[2132] = sv14[2051] + sv14[1265];
        sv14[2133] = sv14[2052] + sv14[1266];
        sv14[2134] = sv14[2053] + sv14[1267];
        sv14[2135] = sv14[1268] + sv14[2054];
        sv14[2136] = sv14[1269] + sv14[2055];
        sv14[2137] = sv14[1270] + sv14[2056];
        sv14[2138] = sv14[1271] + sv14[2057];
        sv14[2139] = sv14[1272] + sv14[2058];
        sv14[2140] = sv14[1273] + sv14[2059];
        sv14[2141] = sv14[1274] + sv14[2060];
        sv14[2142] = sv14[1275] + sv14[2061];
        sv14[2143] = sv14[1276] + sv14[2062];
        sv14[2144] = sv14[1277] + sv14[2063];
        sv14[2145] = sv14[1278] + sv14[2064];
        sv14[2146] = sv14[1279] + sv14[2065];
        sv14[2147] = sv14[1280] + sv14[2066];
        sv14[2148] = sv14[1281] + sv14[2067];
        sv14[2149] = sv14[1282] + sv14[2068];
        sv14[2150] = sv14[2069] + sv14[1283];
        sv14[2151] = sv14[2070] + sv14[1284];
        sv14[2152] = sv14[1285] + sv14[2071];
        sv14[2153] = sv14[2072] + sv14[1286];
        sv14[2154] = sv14[2073] + sv14[1287];
        sv14[2155] = sv14[1288] + sv14[2074];
        sv14[2156] = sv14[1289] + sv14[2075];
        sv14[2157] = sv14[1290] + sv14[2076];
        sv14[2158] = sv14[1291] + sv14[2077];
        sv14[2159] = sv14[450] * sv14[250];
        sv14[2160] = sv14[451] * sv14[250];
        sv14[2161] = sv14[452] * sv14[250];
        sv14[2162] = sv14[453] * sv14[250];
        sv14[2163] = sv14[454] * sv14[250];
        sv14[2164] = sv14[455] * sv14[250];
        sv14[2165] = sv14[456] * sv14[250];
        sv14[2166] = sv14[457] * sv14[250];
        sv14[2167] = sv14[458] * sv14[250];
        sv14[2168] = sv14[450] * sv14[251];
        sv14[2169] = sv14[451] * sv14[251];
        sv14[2170] = sv14[452] * sv14[251];
        sv14[2171] = sv14[453] * sv14[251];
        sv14[2172] = sv14[454] * sv14[251];
        sv14[2173] = sv14[455] * sv14[251];
        sv14[2174] = sv14[456] * sv14[251];
        sv14[2175] = sv14[457] * sv14[251];
        sv14[2176] = sv14[458] * sv14[251];
        sv14[2177] = sv14[450] * sv14[252];
        sv14[2178] = sv14[451] * sv14[252];
        sv14[2179] = sv14[452] * sv14[252];
        sv14[2180] = sv14[453] * sv14[252];
        sv14[2181] = sv14[454] * sv14[252];
        sv14[2182] = sv14[455] * sv14[252];
        sv14[2183] = sv14[456] * sv14[252];
        sv14[2184] = sv14[457] * sv14[252];
        sv14[2185] = sv14[458] * sv14[252];
        sv14[2186] = sv14[450] * sv14[259];
        sv14[2187] = sv14[451] * sv14[259];
        sv14[2188] = sv14[452] * sv14[259];
        sv14[2189] = sv14[453] * sv14[259];
        sv14[2190] = sv14[454] * sv14[259];
        sv14[2191] = sv14[455] * sv14[259];
        sv14[2192] = sv14[456] * sv14[259];
        sv14[2193] = sv14[457] * sv14[259];
        sv14[2194] = sv14[458] * sv14[259];
        sv14[2195] = sv14[450] * sv14[260];
        sv14[2196] = sv14[451] * sv14[260];
        sv14[2197] = sv14[452] * sv14[260];
        sv14[2198] = sv14[453] * sv14[260];
        sv14[2199] = sv14[454] * sv14[260];
        sv14[2200] = sv14[455] * sv14[260];
        sv14[2201] = sv14[456] * sv14[260];
        sv14[2202] = sv14[457] * sv14[260];
        sv14[2203] = sv14[458] * sv14[260];
        sv14[2204] = sv14[450] * sv14[261];
        sv14[2205] = sv14[451] * sv14[261];
        sv14[2206] = sv14[452] * sv14[261];
        sv14[2207] = sv14[453] * sv14[261];
        sv14[2208] = sv14[454] * sv14[261];
        sv14[2209] = sv14[455] * sv14[261];
        sv14[2210] = sv14[456] * sv14[261];
        sv14[2211] = sv14[457] * sv14[261];
        sv14[2212] = sv14[458] * sv14[261];
        sv14[2213] = sv14[450] * sv14[268];
        sv14[2214] = sv14[451] * sv14[268];
        sv14[2215] = sv14[452] * sv14[268];
        sv14[2216] = sv14[453] * sv14[268];
        sv14[2217] = sv14[454] * sv14[268];
        sv14[2218] = sv14[455] * sv14[268];
        sv14[2219] = sv14[456] * sv14[268];
        sv14[2220] = sv14[457] * sv14[268];
        sv14[2221] = sv14[458] * sv14[268];
        sv14[2222] = sv14[450] * sv14[269];
        sv14[2223] = sv14[451] * sv14[269];
        sv14[2224] = sv14[452] * sv14[269];
        sv14[2225] = sv14[453] * sv14[269];
        sv14[2226] = sv14[454] * sv14[269];
        sv14[2227] = sv14[455] * sv14[269];
        sv14[2228] = sv14[456] * sv14[269];
        sv14[2229] = sv14[457] * sv14[269];
        sv14[2230] = sv14[458] * sv14[269];
        sv14[2231] = sv14[450] * sv14[270];
        sv14[2232] = sv14[451] * sv14[270];
        sv14[2233] = sv14[452] * sv14[270];
        sv14[2234] = sv14[453] * sv14[270];
        sv14[2235] = sv14[454] * sv14[270];
        sv14[2236] = sv14[455] * sv14[270];
        sv14[2237] = sv14[456] * sv14[270];
        sv14[2238] = sv14[457] * sv14[270];
        sv14[2239] = sv14[458] * sv14[270];
        sv14[2240] = sv14[109] * sv14[295];
        sv14[2241] = sv14[109] * sv14[296];
        sv14[2242] = sv14[109] * sv14[297];
        sv14[2243] = sv14[109] * sv14[304];
        sv14[2244] = sv14[109] * sv14[305];
        sv14[2245] = sv14[109] * sv14[306];
        sv14[2246] = sv14[109] * sv14[313];
        sv14[2247] = sv14[109] * sv14[314];
        sv14[2248] = sv14[109] * sv14[315];
        sv14[2249] = sv14[110] * sv14[295];
        sv14[2250] = sv14[110] * sv14[296];
        sv14[2251] = sv14[110] * sv14[297];
        sv14[2252] = sv14[110] * sv14[304];
        sv14[2253] = sv14[110] * sv14[305];
        sv14[2254] = sv14[110] * sv14[306];
        sv14[2255] = sv14[110] * sv14[313];
        sv14[2256] = sv14[110] * sv14[314];
        sv14[2257] = sv14[110] * sv14[315];
        sv14[2258] = sv14[111] * sv14[295];
        sv14[2259] = sv14[111] * sv14[296];
        sv14[2260] = sv14[297] * sv14[111];
        sv14[2261] = sv14[111] * sv14[304];
        sv14[2262] = sv14[111] * sv14[305];
        sv14[2263] = sv14[111] * sv14[306];
        sv14[2264] = sv14[111] * sv14[313];
        sv14[2265] = sv14[111] * sv14[314];
        sv14[2266] = sv14[111] * sv14[315];
        sv14[2267] = sv14[118] * sv14[295];
        sv14[2268] = sv14[118] * sv14[296];
        sv14[2269] = sv14[118] * sv14[297];
        sv14[2270] = sv14[118] * sv14[304];
        sv14[2271] = sv14[118] * sv14[305];
        sv14[2272] = sv14[118] * sv14[306];
        sv14[2273] = sv14[118] * sv14[313];
        sv14[2274] = sv14[118] * sv14[314];
        sv14[2275] = sv14[118] * sv14[315];
        sv14[2276] = sv14[119] * sv14[295];
        sv14[2277] = sv14[119] * sv14[296];
        sv14[2278] = sv14[119] * sv14[297];
        sv14[2279] = sv14[119] * sv14[304];
        sv14[2280] = sv14[119] * sv14[305];
        sv14[2281] = sv14[119] * sv14[306];
        sv14[2282] = sv14[119] * sv14[313];
        sv14[2283] = sv14[119] * sv14[314];
        sv14[2284] = sv14[119] * sv14[315];
        sv14[2285] = sv14[120] * sv14[295];
        sv14[2286] = sv14[120] * sv14[296];
        sv14[2287] = sv14[297] * sv14[120];
        sv14[2288] = sv14[120] * sv14[304];
        sv14[2289] = sv14[120] * sv14[305];
        sv14[2290] = sv14[120] * sv14[306];
        sv14[2291] = sv14[120] * sv14[313];
        sv14[2292] = sv14[120] * sv14[314];
        sv14[2293] = sv14[120] * sv14[315];
        sv14[2294] = sv14[127] * sv14[295];
        sv14[2295] = sv14[127] * sv14[296];
        sv14[2296] = sv14[127] * sv14[297];
        sv14[2297] = sv14[127] * sv14[304];
        sv14[2298] = sv14[127] * sv14[305];
        sv14[2299] = sv14[127] * sv14[306];
        sv14[2300] = sv14[127] * sv14[313];
        sv14[2301] = sv14[127] * sv14[314];
        sv14[2302] = sv14[127] * sv14[315];
        sv14[2303] = sv14[128] * sv14[295];
        sv14[2304] = sv14[128] * sv14[296];
        sv14[2305] = sv14[128] * sv14[297];
        sv14[2306] = sv14[128] * sv14[304];
        sv14[2307] = sv14[128] * sv14[305];
        sv14[2308] = sv14[128] * sv14[306];
        sv14[2309] = sv14[128] * sv14[313];
        sv14[2310] = sv14[128] * sv14[314];
        sv14[2311] = sv14[128] * sv14[315];
        sv14[2312] = sv14[129] * sv14[295];
        sv14[2313] = sv14[129] * sv14[296];
        sv14[2314] = sv14[129] * sv14[297];
        sv14[2315] = sv14[129] * sv14[304];
        sv14[2316] = sv14[129] * sv14[305];
        sv14[2317] = sv14[129] * sv14[306];
        sv14[2318] = sv14[129] * sv14[313];
        sv14[2319] = sv14[129] * sv14[314];
        sv14[2320] = sv14[129] * sv14[315];
        sv14[2321] = sv14[134] * sp[130];
        sv14[2322] = sv14[134] * sp[131];
        sv14[2323] = sv14[134] * sp[132];
        sv14[2324] = sv14[134] * sp[133];
        sv14[2325] = sv14[134] * sp[134];
        sv14[2326] = sv14[134] * sp[135];
        sv14[2327] = sv14[2240] + sv14[2321];
        sv14[2328] = sv14[2249] + sv14[2322];
        sv14[2329] = sv14[2258] + sv14[2323];
        sv14[2330] = sv14[2241] + sv14[2322];
        sv14[2331] = sv14[2250] + sv14[2324];
        sv14[2332] = sv14[2259] + sv14[2325];
        sv14[2333] = sv14[2242] + sv14[2323];
        sv14[2334] = sv14[2251] + sv14[2325];
        sv14[2335] = sv14[2260] + sv14[2326];
        sv14[2336] = sv14[2270] + sv14[2321];
        sv14[2337] = sv14[2279] + sv14[2322];
        sv14[2338] = sv14[2288] + sv14[2323];
        sv14[2339] = sv14[2271] + sv14[2322];
        sv14[2340] = sv14[2280] + sv14[2324];
        sv14[2341] = sv14[2289] + sv14[2325];
        sv14[2342] = sv14[2272] + sv14[2323];
        sv14[2343] = sv14[2281] + sv14[2325];
        sv14[2344] = sv14[2290] + sv14[2326];
        sv14[2345] = sv14[2300] + sv14[2321];
        sv14[2346] = sv14[2309] + sv14[2322];
        sv14[2347] = sv14[2318] + sv14[2323];
        sv14[2348] = sv14[2301] + sv14[2322];
        sv14[2349] = sv14[2310] + sv14[2324];
        sv14[2350] = sv14[2319] + sv14[2325];
        sv14[2351] = sv14[2302] + sv14[2323];
        sv14[2352] = sv14[2311] + sv14[2325];
        sv14[2353] = sv14[2320] + sv14[2326];
        sv14[2354] = sv14[329] * sp[100];
        sv14[2355] = sv14[329] * sp[101];
        sv14[2356] = sv14[329] * sp[102];
        sv14[2357] = sv14[329] * sp[103];
        sv14[2358] = sv14[329] * sp[104];
        sv14[2359] = sv14[329] * sp[105];
        sv14[2360] = sv14[2354] + sv14[2240];
        sv14[2361] = sv14[2355] + sv14[2241];
        sv14[2362] = sv14[2242] + sv14[2356];
        sv14[2363] = sv14[2355] + sv14[2249];
        sv14[2364] = sv14[2357] + sv14[2250];
        sv14[2365] = sv14[2251] + sv14[2358];
        sv14[2366] = sv14[2356] + sv14[2258];
        sv14[2367] = sv14[2358] + sv14[2259];
        sv14[2368] = sv14[2260] + sv14[2359];
        sv14[2369] = sv14[2354] + sv14[2270];
        sv14[2370] = sv14[2355] + sv14[2271];
        sv14[2371] = sv14[2272] + sv14[2356];
        sv14[2372] = sv14[2355] + sv14[2279];
        sv14[2373] = sv14[2357] + sv14[2280];
        sv14[2374] = sv14[2281] + sv14[2358];
        sv14[2375] = sv14[2356] + sv14[2288];
        sv14[2376] = sv14[2358] + sv14[2289];
        sv14[2377] = sv14[2290] + sv14[2359];
        sv14[2378] = sv14[2354] + sv14[2300];
        sv14[2379] = sv14[2355] + sv14[2301];
        sv14[2380] = sv14[2302] + sv14[2356];
        sv14[2381] = sv14[2355] + sv14[2309];
        sv14[2382] = sv14[2357] + sv14[2310];
        sv14[2383] = sv14[2311] + sv14[2358];
        sv14[2384] = sv14[2356] + sv14[2318];
        sv14[2385] = sv14[2358] + sv14[2319];
        sv14[2386] = sv14[2320] + sv14[2359];
        sv14[2387] = sv14[2360] + sv14[2327];
        sv14[2388] = sv14[2361] + sv14[2328];
        sv14[2389] = sv14[2362] + sv14[2329];
        sv14[2390] = sv14[2243] + sv14[2267];
        sv14[2391] = sv14[2276] + sv14[2244];
        sv14[2392] = sv14[2245] + sv14[2285];
        sv14[2393] = sv14[2294] + sv14[2246];
        sv14[2394] = sv14[2303] + sv14[2247];
        sv14[2395] = sv14[2248] + sv14[2312];
        sv14[2396] = sv14[2363] + sv14[2330];
        sv14[2397] = sv14[2364] + sv14[2331];
        sv14[2398] = sv14[2365] + sv14[2332];
        sv14[2399] = sv14[2252] + sv14[2268];
        sv14[2400] = sv14[2253] + sv14[2277];
        sv14[2401] = sv14[2254] + sv14[2286];
        sv14[2402] = sv14[2255] + sv14[2295];
        sv14[2403] = sv14[2304] + sv14[2256];
        sv14[2404] = sv14[2257] + sv14[2313];
        sv14[2405] = sv14[2366] + sv14[2333];
        sv14[2406] = sv14[2367] + sv14[2334];
        sv14[2407] = sv14[2368] + sv14[2335];
        sv14[2408] = sv14[2269] + sv14[2261];
        sv14[2409] = sv14[2278] + sv14[2262];
        sv14[2410] = sv14[2287] + sv14[2263];
        sv14[2411] = sv14[2296] + sv14[2264];
        sv14[2412] = sv14[2305] + sv14[2265];
        sv14[2413] = sv14[2314] + sv14[2266];
        sv14[2414] = sv14[2369] + sv14[2336];
        sv14[2415] = sv14[2370] + sv14[2337];
        sv14[2416] = sv14[2371] + sv14[2338];
        sv14[2417] = sv14[2297] + sv14[2273];
        sv14[2418] = sv14[2306] + sv14[2274];
        sv14[2419] = sv14[2275] + sv14[2315];
        sv14[2420] = sv14[2372] + sv14[2339];
        sv14[2421] = sv14[2373] + sv14[2340];
        sv14[2422] = sv14[2374] + sv14[2341];
        sv14[2423] = sv14[2282] + sv14[2298];
        sv14[2424] = sv14[2307] + sv14[2283];
        sv14[2425] = sv14[2284] + sv14[2316];
        sv14[2426] = sv14[2375] + sv14[2342];
        sv14[2427] = sv14[2376] + sv14[2343];
        sv14[2428] = sv14[2377] + sv14[2344];
        sv14[2429] = sv14[2299] + sv14[2291];
        sv14[2430] = sv14[2308] + sv14[2292];
        sv14[2431] = sv14[2317] + sv14[2293];
        sv14[2432] = sv14[2378] + sv14[2345];
        sv14[2433] = sv14[2379] + sv14[2346];
        sv14[2434] = sv14[2380] + sv14[2347];
        sv14[2435] = sv14[2381] + sv14[2348];
        sv14[2436] = sv14[2382] + sv14[2349];
        sv14[2437] = sv14[2383] + sv14[2350];
        sv14[2438] = sv14[2384] + sv14[2351];
        sv14[2439] = sv14[2385] + sv14[2352];
        sv14[2440] = sv14[2386] + sv14[2353];
        sv14[2441] = sv14[8] * sv14[250];
        sv14[2442] = sv14[9] * sv14[250];
        sv14[2443] = sv14[10] * sv14[250];
        sv14[2444] = sv14[19] * sv14[250];
        sv14[2445] = sv14[20] * sv14[250];
        sv14[2446] = sv14[21] * sv14[250];
        sv14[2447] = sv14[30] * sv14[250];
        sv14[2448] = sv14[31] * sv14[250];
        sv14[2449] = sv14[32] * sv14[250];
        sv14[2450] = sv14[8] * sv14[251];
        sv14[2451] = sv14[9] * sv14[251];
        sv14[2452] = sv14[10] * sv14[251];
        sv14[2453] = sv14[19] * sv14[251];
        sv14[2454] = sv14[20] * sv14[251];
        sv14[2455] = sv14[21] * sv14[251];
        sv14[2456] = sv14[30] * sv14[251];
        sv14[2457] = sv14[31] * sv14[251];
        sv14[2458] = sv14[32] * sv14[251];
        sv14[2459] = sv14[8] * sv14[252];
        sv14[2460] = sv14[9] * sv14[252];
        sv14[2461] = sv14[252] * sv14[10];
        sv14[2462] = sv14[19] * sv14[252];
        sv14[2463] = sv14[20] * sv14[252];
        sv14[2464] = sv14[252] * sv14[21];
        sv14[2465] = sv14[30] * sv14[252];
        sv14[2466] = sv14[31] * sv14[252];
        sv14[2467] = sv14[252] * sv14[32];
        sv14[2468] = sv14[8] * sv14[259];
        sv14[2469] = sv14[9] * sv14[259];
        sv14[2470] = sv14[10] * sv14[259];
        sv14[2471] = sv14[19] * sv14[259];
        sv14[2472] = sv14[20] * sv14[259];
        sv14[2473] = sv14[21] * sv14[259];
        sv14[2474] = sv14[30] * sv14[259];
        sv14[2475] = sv14[31] * sv14[259];
        sv14[2476] = sv14[32] * sv14[259];
        sv14[2477] = sv14[8] * sv14[260];
        sv14[2478] = sv14[9] * sv14[260];
        sv14[2479] = sv14[10] * sv14[260];
        sv14[2480] = sv14[19] * sv14[260];
        sv14[2481] = sv14[20] * sv14[260];
        sv14[2482] = sv14[21] * sv14[260];
        sv14[2483] = sv14[30] * sv14[260];
        sv14[2484] = sv14[31] * sv14[260];
        sv14[2485] = sv14[32] * sv14[260];
        sv14[2486] = sv14[8] * sv14[261];
        sv14[2487] = sv14[9] * sv14[261];
        sv14[2488] = sv14[261] * sv14[10];
        sv14[2489] = sv14[19] * sv14[261];
        sv14[2490] = sv14[20] * sv14[261];
        sv14[2491] = sv14[261] * sv14[21];
        sv14[2492] = sv14[30] * sv14[261];
        sv14[2493] = sv14[31] * sv14[261];
        sv14[2494] = sv14[261] * sv14[32];
        sv14[2495] = sv14[8] * sv14[268];
        sv14[2496] = sv14[9] * sv14[268];
        sv14[2497] = sv14[10] * sv14[268];
        sv14[2498] = sv14[19] * sv14[268];
        sv14[2499] = sv14[20] * sv14[268];
        sv14[2500] = sv14[21] * sv14[268];
        sv14[2501] = sv14[30] * sv14[268];
        sv14[2502] = sv14[31] * sv14[268];
        sv14[2503] = sv14[32] * sv14[268];
        sv14[2504] = sv14[8] * sv14[269];
        sv14[2505] = sv14[9] * sv14[269];
        sv14[2506] = sv14[10] * sv14[269];
        sv14[2507] = sv14[19] * sv14[269];
        sv14[2508] = sv14[20] * sv14[269];
        sv14[2509] = sv14[21] * sv14[269];
        sv14[2510] = sv14[30] * sv14[269];
        sv14[2511] = sv14[31] * sv14[269];
        sv14[2512] = sv14[32] * sv14[269];
        sv14[2513] = sv14[8] * sv14[270];
        sv14[2514] = sv14[9] * sv14[270];
        sv14[2515] = sv14[270] * sv14[10];
        sv14[2516] = sv14[19] * sv14[270];
        sv14[2517] = sv14[20] * sv14[270];
        sv14[2518] = sv14[270] * sv14[21];
        sv14[2519] = sv14[30] * sv14[270];
        sv14[2520] = sv14[31] * sv14[270];
        sv14[2521] = sv14[270] * sv14[32];
        sv14[2522] = sv14[234] * sp[49];
        sv14[2523] = sv14[234] * sp[50];
        sv14[2524] = sv14[234] * sp[51];
        sv14[2525] = sv14[234] * sp[52];
        sv14[2526] = sv14[234] * sp[53];
        sv14[2527] = sv14[234] * sp[54];
        sv14[2528] = sv14[2522] + sv14[2441];
        sv14[2529] = sv14[2523] + sv14[2450];
        sv14[2530] = sv14[2459] + sv14[2524];
        sv14[2531] = sv14[2523] + sv14[2442];
        sv14[2532] = sv14[2525] + sv14[2451];
        sv14[2533] = sv14[2460] + sv14[2526];
        sv14[2534] = sv14[2524] + sv14[2443];
        sv14[2535] = sv14[2526] + sv14[2452];
        sv14[2536] = sv14[2461] + sv14[2527];
        sv14[2537] = sv14[2522] + sv14[2471];
        sv14[2538] = sv14[2523] + sv14[2480];
        sv14[2539] = sv14[2489] + sv14[2524];
        sv14[2540] = sv14[2523] + sv14[2472];
        sv14[2541] = sv14[2525] + sv14[2481];
        sv14[2542] = sv14[2490] + sv14[2526];
        sv14[2543] = sv14[2524] + sv14[2473];
        sv14[2544] = sv14[2526] + sv14[2482];
        sv14[2545] = sv14[2491] + sv14[2527];
        sv14[2546] = sv14[2522] + sv14[2501];
        sv14[2547] = sv14[2523] + sv14[2510];
        sv14[2548] = sv14[2519] + sv14[2524];
        sv14[2549] = sv14[2523] + sv14[2502];
        sv14[2550] = sv14[2525] + sv14[2511];
        sv14[2551] = sv14[2520] + sv14[2526];
        sv14[2552] = sv14[2524] + sv14[2503];
        sv14[2553] = sv14[2526] + sv14[2512];
        sv14[2554] = sv14[2521] + sv14[2527];
        sv14[2555] = sv14[84] * sp[115];
        sv14[2556] = sv14[84] * sp[116];
        sv14[2557] = sv14[84] * sp[117];
        sv14[2558] = sv14[84] * sp[118];
        sv14[2559] = sv14[84] * sp[119];
        sv14[2560] = sv14[84] * sp[120];
        sv14[2561] = sv14[2441] + sv14[2555];
        sv14[2562] = sv14[2442] + sv14[2556];
        sv14[2563] = sv14[2443] + sv14[2557];
        sv14[2564] = sv14[2450] + sv14[2556];
        sv14[2565] = sv14[2451] + sv14[2558];
        sv14[2566] = sv14[2452] + sv14[2559];
        sv14[2567] = sv14[2459] + sv14[2557];
        sv14[2568] = sv14[2460] + sv14[2559];
        sv14[2569] = sv14[2560] + sv14[2461];
        sv14[2570] = sv14[2471] + sv14[2555];
        sv14[2571] = sv14[2472] + sv14[2556];
        sv14[2572] = sv14[2473] + sv14[2557];
        sv14[2573] = sv14[2480] + sv14[2556];
        sv14[2574] = sv14[2481] + sv14[2558];
        sv14[2575] = sv14[2482] + sv14[2559];
        sv14[2576] = sv14[2489] + sv14[2557];
        sv14[2577] = sv14[2490] + sv14[2559];
        sv14[2578] = sv14[2560] + sv14[2491];
        sv14[2579] = sv14[2501] + sv14[2555];
        sv14[2580] = sv14[2502] + sv14[2556];
        sv14[2581] = sv14[2503] + sv14[2557];
        sv14[2582] = sv14[2510] + sv14[2556];
        sv14[2583] = sv14[2511] + sv14[2558];
        sv14[2584] = sv14[2512] + sv14[2559];
        sv14[2585] = sv14[2519] + sv14[2557];
        sv14[2586] = sv14[2520] + sv14[2559];
        sv14[2587] = sv14[2560] + sv14[2521];
        sv14[2588] = sv14[2528] + sv14[2561];
        sv14[2589] = sv14[2529] + sv14[2562];
        sv14[2590] = sv14[2530] + sv14[2563];
        sv14[2591] = sv14[2444] + sv14[2468];
        sv14[2592] = sv14[2445] + sv14[2477];
        sv14[2593] = sv14[2486] + sv14[2446];
        sv14[2594] = sv14[2495] + sv14[2447];
        sv14[2595] = sv14[2448] + sv14[2504];
        sv14[2596] = sv14[2513] + sv14[2449];
        sv14[2597] = sv14[2531] + sv14[2564];
        sv14[2598] = sv14[2532] + sv14[2565];
        sv14[2599] = sv14[2533] + sv14[2566];
        sv14[2600] = sv14[2469] + sv14[2453];
        sv14[2601] = sv14[2454] + sv14[2478];
        sv14[2602] = sv14[2487] + sv14[2455];
        sv14[2603] = sv14[2496] + sv14[2456];
        sv14[2604] = sv14[2505] + sv14[2457];
        sv14[2605] = sv14[2514] + sv14[2458];
        sv14[2606] = sv14[2534] + sv14[2567];
        sv14[2607] = sv14[2535] + sv14[2568];
        sv14[2608] = sv14[2569] + sv14[2536];
        sv14[2609] = sv14[2462] + sv14[2470];
        sv14[2610] = sv14[2463] + sv14[2479];
        sv14[2611] = sv14[2464] + sv14[2488];
        sv14[2612] = sv14[2465] + sv14[2497];
        sv14[2613] = sv14[2466] + sv14[2506];
        sv14[2614] = sv14[2515] + sv14[2467];
        sv14[2615] = sv14[2537] + sv14[2570];
        sv14[2616] = sv14[2538] + sv14[2571];
        sv14[2617] = sv14[2539] + sv14[2572];
        sv14[2618] = sv14[2498] + sv14[2474];
        sv14[2619] = sv14[2475] + sv14[2507];
        sv14[2620] = sv14[2516] + sv14[2476];
        sv14[2621] = sv14[2540] + sv14[2573];
        sv14[2622] = sv14[2541] + sv14[2574];
        sv14[2623] = sv14[2542] + sv14[2575];
        sv14[2624] = sv14[2499] + sv14[2483];
        sv14[2625] = sv14[2508] + sv14[2484];
        sv14[2626] = sv14[2517] + sv14[2485];
        sv14[2627] = sv14[2543] + sv14[2576];
        sv14[2628] = sv14[2544] + sv14[2577];
        sv14[2629] = sv14[2578] + sv14[2545];
        sv14[2630] = sv14[2492] + sv14[2500];
        sv14[2631] = sv14[2493] + sv14[2509];
        sv14[2632] = sv14[2518] + sv14[2494];
        sv14[2633] = sv14[2546] + sv14[2579];
        sv14[2634] = sv14[2547] + sv14[2580];
        sv14[2635] = sv14[2548] + sv14[2581];
        sv14[2636] = sv14[2549] + sv14[2582];
        sv14[2637] = sv14[2550] + sv14[2583];
        sv14[2638] = sv14[2551] + sv14[2584];
        sv14[2639] = sv14[2552] + sv14[2585];
        sv14[2640] = sv14[2553] + sv14[2586];
        sv14[2641] = sv14[2587] + sv14[2554];
        sv14[2642] = sv14[2387] + -1 * sv14[2588];
        sv14[2643] = sv14[2388] + -1 * sv14[2589];
        sv14[2644] = sv14[2389] + -1 * sv14[2590];
        sv14[2645] = sv14[2390] + -1 * sv14[2591];
        sv14[2646] = sv14[2391] + -1 * sv14[2592];
        sv14[2647] = sv14[2392] + -1 * sv14[2593];
        sv14[2648] = sv14[2393] + -1 * sv14[2594];
        sv14[2649] = sv14[2394] + -1 * sv14[2595];
        sv14[2650] = sv14[2395] + -1 * sv14[2596];
        sv14[2651] = sv14[2396] + -1 * sv14[2597];
        sv14[2652] = sv14[2397] + -1 * sv14[2598];
        sv14[2653] = sv14[2398] + -1 * sv14[2599];
        sv14[2654] = sv14[2399] + -1 * sv14[2600];
        sv14[2655] = sv14[2400] + -1 * sv14[2601];
        sv14[2656] = sv14[2401] + -1 * sv14[2602];
        sv14[2657] = sv14[2402] + -1 * sv14[2603];
        sv14[2658] = sv14[2403] + -1 * sv14[2604];
        sv14[2659] = sv14[2404] + -1 * sv14[2605];
        sv14[2660] = sv14[2405] + -1 * sv14[2606];
        sv14[2661] = sv14[2406] + -1 * sv14[2607];
        sv14[2662] = sv14[2407] + -1 * sv14[2608];
        sv14[2663] = sv14[2408] + -1 * sv14[2609];
        sv14[2664] = sv14[2409] + -1 * sv14[2610];
        sv14[2665] = sv14[2410] + -1 * sv14[2611];
        sv14[2666] = sv14[2411] + -1 * sv14[2612];
        sv14[2667] = sv14[2412] + -1 * sv14[2613];
        sv14[2668] = sv14[2413] + -1 * sv14[2614];
        sv14[2669] = sv14[2414] + -1 * sv14[2615];
        sv14[2670] = sv14[2415] + -1 * sv14[2616];
        sv14[2671] = sv14[2416] + -1 * sv14[2617];
        sv14[2672] = sv14[2417] + -1 * sv14[2618];
        sv14[2673] = sv14[2418] + -1 * sv14[2619];
        sv14[2674] = sv14[2419] + -1 * sv14[2620];
        sv14[2675] = sv14[2420] + -1 * sv14[2621];
        sv14[2676] = sv14[2421] + -1 * sv14[2622];
        sv14[2677] = sv14[2422] + -1 * sv14[2623];
        sv14[2678] = sv14[2423] + -1 * sv14[2624];
        sv14[2679] = sv14[2424] + -1 * sv14[2625];
        sv14[2680] = sv14[2425] + -1 * sv14[2626];
        sv14[2681] = sv14[2426] + -1 * sv14[2627];
        sv14[2682] = sv14[2427] + -1 * sv14[2628];
        sv14[2683] = sv14[2428] + -1 * sv14[2629];
        sv14[2684] = sv14[2429] + -1 * sv14[2630];
        sv14[2685] = sv14[2430] + -1 * sv14[2631];
        sv14[2686] = sv14[2431] + -1 * sv14[2632];
        sv14[2687] = sv14[2432] + -1 * sv14[2633];
        sv14[2688] = sv14[2433] + -1 * sv14[2634];
        sv14[2689] = sv14[2434] + -1 * sv14[2635];
        sv14[2690] = sv14[2435] + -1 * sv14[2636];
        sv14[2691] = sv14[2436] + -1 * sv14[2637];
        sv14[2692] = sv14[2437] + -1 * sv14[2638];
        sv14[2693] = sv14[2438] + -1 * sv14[2639];
        sv14[2694] = sv14[2439] + -1 * sv14[2640];
        sv14[2695] = sv14[2440] + -1 * sv14[2641];
        sv14[2696] = sv14[2642] * sv14[234];
        sv14[2697] = sv14[2643] * sv14[234];
        sv14[2698] = sv14[2644] * sv14[234];
        sv14[2699] = sv14[2645] * sv14[234];
        sv14[2700] = sv14[2646] * sv14[234];
        sv14[2701] = sv14[2647] * sv14[234];
        sv14[2702] = sv14[2648] * sv14[234];
        sv14[2703] = sv14[2649] * sv14[234];
        sv14[2704] = sv14[2650] * sv14[234];
        sv14[2705] = sv14[2651] * sv14[234];
        sv14[2706] = sv14[2652] * sv14[234];
        sv14[2707] = sv14[2653] * sv14[234];
        sv14[2708] = sv14[2654] * sv14[234];
        sv14[2709] = sv14[2655] * sv14[234];
        sv14[2710] = sv14[2656] * sv14[234];
        sv14[2711] = sv14[2657] * sv14[234];
        sv14[2712] = sv14[2658] * sv14[234];
        sv14[2713] = sv14[2659] * sv14[234];
        sv14[2714] = sv14[2660] * sv14[234];
        sv14[2715] = sv14[2661] * sv14[234];
        sv14[2716] = sv14[2662] * sv14[234];
        sv14[2717] = sv14[2663] * sv14[234];
        sv14[2718] = sv14[2664] * sv14[234];
        sv14[2719] = sv14[2665] * sv14[234];
        sv14[2720] = sv14[2666] * sv14[234];
        sv14[2721] = sv14[2667] * sv14[234];
        sv14[2722] = sv14[2668] * sv14[234];
        sv14[2723] = sv14[2669] * sv14[234];
        sv14[2724] = sv14[2670] * sv14[234];
        sv14[2725] = sv14[2671] * sv14[234];
        sv14[2726] = sv14[2672] * sv14[234];
        sv14[2727] = sv14[2673] * sv14[234];
        sv14[2728] = sv14[2674] * sv14[234];
        sv14[2729] = sv14[2675] * sv14[234];
        sv14[2730] = sv14[2676] * sv14[234];
        sv14[2731] = sv14[2677] * sv14[234];
        sv14[2732] = sv14[2678] * sv14[234];
        sv14[2733] = sv14[2679] * sv14[234];
        sv14[2734] = sv14[2680] * sv14[234];
        sv14[2735] = sv14[2681] * sv14[234];
        sv14[2736] = sv14[2682] * sv14[234];
        sv14[2737] = sv14[2683] * sv14[234];
        sv14[2738] = sv14[2684] * sv14[234];
        sv14[2739] = sv14[2685] * sv14[234];
        sv14[2740] = sv14[2686] * sv14[234];
        sv14[2741] = sv14[2687] * sv14[234];
        sv14[2742] = sv14[2688] * sv14[234];
        sv14[2743] = sv14[2689] * sv14[234];
        sv14[2744] = sv14[2690] * sv14[234];
        sv14[2745] = sv14[2691] * sv14[234];
        sv14[2746] = sv14[2692] * sv14[234];
        sv14[2747] = sv14[2693] * sv14[234];
        sv14[2748] = sv14[2694] * sv14[234];
        sv14[2749] = sv14[2695] * sv14[234];
        sv14[2750] = sv14[2696] + sv14[2159];
        sv14[2751] = sv14[2697] + sv14[2168];
        sv14[2752] = sv14[2698] + sv14[2177];
        sv14[2753] = sv14[2699] + sv14[2186];
        sv14[2754] = sv14[2700] + sv14[2195];
        sv14[2755] = sv14[2701] + sv14[2204];
        sv14[2756] = sv14[2702] + sv14[2213];
        sv14[2757] = sv14[2703] + sv14[2222];
        sv14[2758] = sv14[2704] + sv14[2231];
        sv14[2759] = sv14[2705] + sv14[2160];
        sv14[2760] = sv14[2706] + sv14[2169];
        sv14[2761] = sv14[2707] + sv14[2178];
        sv14[2762] = sv14[2708] + sv14[2187];
        sv14[2763] = sv14[2709] + sv14[2196];
        sv14[2764] = sv14[2710] + sv14[2205];
        sv14[2765] = sv14[2711] + sv14[2214];
        sv14[2766] = sv14[2712] + sv14[2223];
        sv14[2767] = sv14[2713] + sv14[2232];
        sv14[2768] = sv14[2714] + sv14[2161];
        sv14[2769] = sv14[2715] + sv14[2170];
        sv14[2770] = sv14[2716] + sv14[2179];
        sv14[2771] = sv14[2717] + sv14[2188];
        sv14[2772] = sv14[2718] + sv14[2197];
        sv14[2773] = sv14[2719] + sv14[2206];
        sv14[2774] = sv14[2720] + sv14[2215];
        sv14[2775] = sv14[2721] + sv14[2224];
        sv14[2776] = sv14[2722] + sv14[2233];
        sv14[2777] = sv14[2699] + sv14[2162];
        sv14[2778] = sv14[2700] + sv14[2163];
        sv14[2779] = sv14[2701] + sv14[2164];
        sv14[2780] = sv14[2702] + sv14[2165];
        sv14[2781] = sv14[2703] + sv14[2166];
        sv14[2782] = sv14[2704] + sv14[2167];
        sv14[2783] = sv14[2708] + sv14[2171];
        sv14[2784] = sv14[2709] + sv14[2172];
        sv14[2785] = sv14[2710] + sv14[2173];
        sv14[2786] = sv14[2711] + sv14[2174];
        sv14[2787] = sv14[2712] + sv14[2175];
        sv14[2788] = sv14[2713] + sv14[2176];
        sv14[2789] = sv14[2717] + sv14[2180];
        sv14[2790] = sv14[2718] + sv14[2181];
        sv14[2791] = sv14[2719] + sv14[2182];
        sv14[2792] = sv14[2720] + sv14[2183];
        sv14[2793] = sv14[2721] + sv14[2184];
        sv14[2794] = sv14[2722] + sv14[2185];
        sv14[2795] = sv14[2723] + sv14[2189];
        sv14[2796] = sv14[2724] + sv14[2198];
        sv14[2797] = sv14[2725] + sv14[2207];
        sv14[2798] = sv14[2726] + sv14[2216];
        sv14[2799] = sv14[2727] + sv14[2225];
        sv14[2800] = sv14[2728] + sv14[2234];
        sv14[2801] = sv14[2729] + sv14[2190];
        sv14[2802] = sv14[2730] + sv14[2199];
        sv14[2803] = sv14[2731] + sv14[2208];
        sv14[2804] = sv14[2732] + sv14[2217];
        sv14[2805] = sv14[2733] + sv14[2226];
        sv14[2806] = sv14[2734] + sv14[2235];
        sv14[2807] = sv14[2735] + sv14[2191];
        sv14[2808] = sv14[2736] + sv14[2200];
        sv14[2809] = sv14[2737] + sv14[2209];
        sv14[2810] = sv14[2738] + sv14[2218];
        sv14[2811] = sv14[2739] + sv14[2227];
        sv14[2812] = sv14[2740] + sv14[2236];
        sv14[2813] = sv14[2726] + sv14[2192];
        sv14[2814] = sv14[2727] + sv14[2193];
        sv14[2815] = sv14[2728] + sv14[2194];
        sv14[2816] = sv14[2732] + sv14[2201];
        sv14[2817] = sv14[2733] + sv14[2202];
        sv14[2818] = sv14[2734] + sv14[2203];
        sv14[2819] = sv14[2738] + sv14[2210];
        sv14[2820] = sv14[2739] + sv14[2211];
        sv14[2821] = sv14[2740] + sv14[2212];
        sv14[2822] = sv14[2741] + sv14[2219];
        sv14[2823] = sv14[2742] + sv14[2228];
        sv14[2824] = sv14[2743] + sv14[2237];
        sv14[2825] = sv14[2744] + sv14[2220];
        sv14[2826] = sv14[2745] + sv14[2229];
        sv14[2827] = sv14[2746] + sv14[2238];
        sv14[2828] = sv14[2747] + sv14[2221];
        sv14[2829] = sv14[2748] + sv14[2230];
        sv14[2830] = sv14[2749] + sv14[2239];
        sv14[2831] = sv14[470] * sp[115];
        sv14[2832] = sv14[470] * sp[116];
        sv14[2833] = sv14[470] * sp[117];
        sv14[2834] = sv14[470] * sp[118];
        sv14[2835] = sv14[470] * sp[119];
        sv14[2836] = sv14[470] * sp[120];
        sv14[2837] = sv14[2159] + sv14[2831];
        sv14[2838] = sv14[2160] + sv14[2832];
        sv14[2839] = sv14[2161] + sv14[2833];
        sv14[2840] = sv14[2168] + sv14[2832];
        sv14[2841] = sv14[2169] + sv14[2834];
        sv14[2842] = sv14[2170] + sv14[2835];
        sv14[2843] = sv14[2177] + sv14[2833];
        sv14[2844] = sv14[2178] + sv14[2835];
        sv14[2845] = sv14[2179] + sv14[2836];
        sv14[2846] = sv14[2189] + sv14[2831];
        sv14[2847] = sv14[2190] + sv14[2832];
        sv14[2848] = sv14[2191] + sv14[2833];
        sv14[2849] = sv14[2198] + sv14[2832];
        sv14[2850] = sv14[2199] + sv14[2834];
        sv14[2851] = sv14[2200] + sv14[2835];
        sv14[2852] = sv14[2207] + sv14[2833];
        sv14[2853] = sv14[2208] + sv14[2835];
        sv14[2854] = sv14[2209] + sv14[2836];
        sv14[2855] = sv14[2219] + sv14[2831];
        sv14[2856] = sv14[2220] + sv14[2832];
        sv14[2857] = sv14[2221] + sv14[2833];
        sv14[2858] = sv14[2228] + sv14[2832];
        sv14[2859] = sv14[2229] + sv14[2834];
        sv14[2860] = sv14[2230] + sv14[2835];
        sv14[2861] = sv14[2237] + sv14[2833];
        sv14[2862] = sv14[2238] + sv14[2835];
        sv14[2863] = sv14[2239] + sv14[2836];
        sv14[2864] = sv14[2750] + sv14[2837];
        sv14[2865] = sv14[2751] + sv14[2838];
        sv14[2866] = sv14[2752] + sv14[2839];
        sv14[2867] = sv14[2753] + sv14[2162];
        sv14[2868] = sv14[2754] + sv14[2163];
        sv14[2869] = sv14[2755] + sv14[2164];
        sv14[2870] = sv14[2756] + sv14[2165];
        sv14[2871] = sv14[2757] + sv14[2166];
        sv14[2872] = sv14[2758] + sv14[2167];
        sv14[2873] = sv14[2759] + sv14[2840];
        sv14[2874] = sv14[2760] + sv14[2841];
        sv14[2875] = sv14[2761] + sv14[2842];
        sv14[2876] = sv14[2762] + sv14[2171];
        sv14[2877] = sv14[2763] + sv14[2172];
        sv14[2878] = sv14[2764] + sv14[2173];
        sv14[2879] = sv14[2765] + sv14[2174];
        sv14[2880] = sv14[2766] + sv14[2175];
        sv14[2881] = sv14[2767] + sv14[2176];
        sv14[2882] = sv14[2768] + sv14[2843];
        sv14[2883] = sv14[2769] + sv14[2844];
        sv14[2884] = sv14[2770] + sv14[2845];
        sv14[2885] = sv14[2771] + sv14[2180];
        sv14[2886] = sv14[2772] + sv14[2181];
        sv14[2887] = sv14[2773] + sv14[2182];
        sv14[2888] = sv14[2774] + sv14[2183];
        sv14[2889] = sv14[2775] + sv14[2184];
        sv14[2890] = sv14[2776] + sv14[2185];
        sv14[2891] = sv14[2777] + sv14[2186];
        sv14[2892] = sv14[2778] + sv14[2195];
        sv14[2893] = sv14[2779] + sv14[2204];
        sv14[2894] = sv14[2780] + sv14[2213];
        sv14[2895] = sv14[2781] + sv14[2222];
        sv14[2896] = sv14[2782] + sv14[2231];
        sv14[2897] = sv14[2783] + sv14[2187];
        sv14[2898] = sv14[2784] + sv14[2196];
        sv14[2899] = sv14[2785] + sv14[2205];
        sv14[2900] = sv14[2786] + sv14[2214];
        sv14[2901] = sv14[2787] + sv14[2223];
        sv14[2902] = sv14[2788] + sv14[2232];
        sv14[2903] = sv14[2789] + sv14[2188];
        sv14[2904] = sv14[2790] + sv14[2197];
        sv14[2905] = sv14[2791] + sv14[2206];
        sv14[2906] = sv14[2792] + sv14[2215];
        sv14[2907] = sv14[2793] + sv14[2224];
        sv14[2908] = sv14[2794] + sv14[2233];
        sv14[2909] = sv14[2795] + sv14[2846];
        sv14[2910] = sv14[2796] + sv14[2847];
        sv14[2911] = sv14[2797] + sv14[2848];
        sv14[2912] = sv14[2798] + sv14[2192];
        sv14[2913] = sv14[2799] + sv14[2193];
        sv14[2914] = sv14[2800] + sv14[2194];
        sv14[2915] = sv14[2801] + sv14[2849];
        sv14[2916] = sv14[2802] + sv14[2850];
        sv14[2917] = sv14[2803] + sv14[2851];
        sv14[2918] = sv14[2804] + sv14[2201];
        sv14[2919] = sv14[2805] + sv14[2202];
        sv14[2920] = sv14[2806] + sv14[2203];
        sv14[2921] = sv14[2807] + sv14[2852];
        sv14[2922] = sv14[2808] + sv14[2853];
        sv14[2923] = sv14[2809] + sv14[2854];
        sv14[2924] = sv14[2810] + sv14[2210];
        sv14[2925] = sv14[2811] + sv14[2211];
        sv14[2926] = sv14[2812] + sv14[2212];
        sv14[2927] = sv14[2813] + sv14[2216];
        sv14[2928] = sv14[2814] + sv14[2225];
        sv14[2929] = sv14[2815] + sv14[2234];
        sv14[2930] = sv14[2816] + sv14[2217];
        sv14[2931] = sv14[2817] + sv14[2226];
        sv14[2932] = sv14[2818] + sv14[2235];
        sv14[2933] = sv14[2819] + sv14[2218];
        sv14[2934] = sv14[2820] + sv14[2227];
        sv14[2935] = sv14[2821] + sv14[2236];
        sv14[2936] = sv14[2822] + sv14[2855];
        sv14[2937] = sv14[2823] + sv14[2856];
        sv14[2938] = sv14[2824] + sv14[2857];
        sv14[2939] = sv14[2825] + sv14[2858];
        sv14[2940] = sv14[2826] + sv14[2859];
        sv14[2941] = sv14[2827] + sv14[2860];
        sv14[2942] = sv14[2828] + sv14[2861];
        sv14[2943] = sv14[2829] + sv14[2862];
        sv14[2944] = sv14[2830] + sv14[2863];
        sv14[2945] = sv14[2078] + sv14[2864];
        sv14[2946] = sv14[2079] + sv14[2865];
        sv14[2947] = sv14[2080] + sv14[2866];
        sv14[2948] = sv14[2081] + sv14[2867];
        sv14[2949] = sv14[2082] + sv14[2868];
        sv14[2950] = sv14[2083] + sv14[2869];
        sv14[2951] = sv14[2084] + sv14[2870];
        sv14[2952] = sv14[2085] + sv14[2871];
        sv14[2953] = sv14[2086] + sv14[2872];
        sv14[2954] = sv14[2087] + sv14[2873];
        sv14[2955] = sv14[2088] + sv14[2874];
        sv14[2956] = sv14[2089] + sv14[2875];
        sv14[2957] = sv14[2090] + sv14[2876];
        sv14[2958] = sv14[2091] + sv14[2877];
        sv14[2959] = sv14[2092] + sv14[2878];
        sv14[2960] = sv14[2093] + sv14[2879];
        sv14[2961] = sv14[2094] + sv14[2880];
        sv14[2962] = sv14[2095] + sv14[2881];
        sv14[2963] = sv14[2096] + sv14[2882];
        sv14[2964] = sv14[2097] + sv14[2883];
        sv14[2965] = sv14[2098] + sv14[2884];
        sv14[2966] = sv14[2099] + sv14[2885];
        sv14[2967] = sv14[2100] + sv14[2886];
        sv14[2968] = sv14[2101] + sv14[2887];
        sv14[2969] = sv14[2102] + sv14[2888];
        sv14[2970] = sv14[2103] + sv14[2889];
        sv14[2971] = sv14[2104] + sv14[2890];
        sv14[2972] = sv14[2105] + sv14[2891];
        sv14[2973] = sv14[2106] + sv14[2892];
        sv14[2974] = sv14[2107] + sv14[2893];
        sv14[2975] = sv14[2108] + sv14[2894];
        sv14[2976] = sv14[2109] + sv14[2895];
        sv14[2977] = sv14[2110] + sv14[2896];
        sv14[2978] = sv14[2111] + sv14[2897];
        sv14[2979] = sv14[2112] + sv14[2898];
        sv14[2980] = sv14[2113] + sv14[2899];
        sv14[2981] = sv14[2114] + sv14[2900];
        sv14[2982] = sv14[2115] + sv14[2901];
        sv14[2983] = sv14[2116] + sv14[2902];
        sv14[2984] = sv14[2117] + sv14[2903];
        sv14[2985] = sv14[2118] + sv14[2904];
        sv14[2986] = sv14[2119] + sv14[2905];
        sv14[2987] = sv14[2120] + sv14[2906];
        sv14[2988] = sv14[2121] + sv14[2907];
        sv14[2989] = sv14[2122] + sv14[2908];
        sv14[2990] = sv14[2123] + sv14[2909];
        sv14[2991] = sv14[2124] + sv14[2910];
        sv14[2992] = sv14[2125] + sv14[2911];
        sv14[2993] = sv14[2126] + sv14[2912];
        sv14[2994] = sv14[2127] + sv14[2913];
        sv14[2995] = sv14[2128] + sv14[2914];
        sv14[2996] = sv14[2129] + sv14[2915];
        sv14[2997] = sv14[2130] + sv14[2916];
        sv14[2998] = sv14[2131] + sv14[2917];
        sv14[2999] = sv14[2132] + sv14[2918];
        sv14[3000] = sv14[2133] + sv14[2919];
        sv14[3001] = sv14[2134] + sv14[2920];
        sv14[3002] = sv14[2135] + sv14[2921];
        sv14[3003] = sv14[2136] + sv14[2922];
        sv14[3004] = sv14[2137] + sv14[2923];
        sv14[3005] = sv14[2138] + sv14[2924];
        sv14[3006] = sv14[2139] + sv14[2925];
        sv14[3007] = sv14[2140] + sv14[2926];
        sv14[3008] = sv14[2141] + sv14[2927];
        sv14[3009] = sv14[2142] + sv14[2928];
        sv14[3010] = sv14[2143] + sv14[2929];
        sv14[3011] = sv14[2144] + sv14[2930];
        sv14[3012] = sv14[2145] + sv14[2931];
        sv14[3013] = sv14[2146] + sv14[2932];
        sv14[3014] = sv14[2147] + sv14[2933];
        sv14[3015] = sv14[2148] + sv14[2934];
        sv14[3016] = sv14[2149] + sv14[2935];
        sv14[3017] = sv14[2150] + sv14[2936];
        sv14[3018] = sv14[2151] + sv14[2937];
        sv14[3019] = sv14[2152] + sv14[2938];
        sv14[3020] = sv14[2153] + sv14[2939];
        sv14[3021] = sv14[2154] + sv14[2940];
        sv14[3022] = sv14[2155] + sv14[2941];
        sv14[3023] = sv14[2156] + sv14[2942];
        sv14[3024] = sv14[2157] + sv14[2943];
        sv14[3025] = sv14[2158] + sv14[2944];
        sv14[3026] = 0.3333333333333333 * sv14[2945] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3027] = 0.3333333333333333 * sv14[2946] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3028] = 0.3333333333333333 * sv14[2947] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3029] = 0.3333333333333333 * sv14[2948] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3030] = 0.3333333333333333 * sv14[2949] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3031] = 0.3333333333333333 * sv14[2950] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3032] = 0.3333333333333333 * sv14[2951] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3033] = 0.3333333333333333 * sv14[2952] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3034] = 0.3333333333333333 * sv14[2953] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3035] = 0.3333333333333333 * sv14[2954] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3036] = 0.3333333333333333 * sv14[2955] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3037] = 0.3333333333333333 * sv14[2956] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3038] = 0.3333333333333333 * sv14[2957] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3039] = 0.3333333333333333 * sv14[2958] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3040] = 0.3333333333333333 * sv14[2959] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3041] = 0.3333333333333333 * sv14[2960] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3042] = 0.3333333333333333 * sv14[2961] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3043] = 0.3333333333333333 * sv14[2962] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3044] = 0.3333333333333333 * sv14[2963] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3045] = 0.3333333333333333 * sv14[2964] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3046] = 0.3333333333333333 * sv14[2965] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3047] = 0.3333333333333333 * sv14[2966] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3048] = 0.3333333333333333 * sv14[2967] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3049] = 0.3333333333333333 * sv14[2968] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3050] = 0.3333333333333333 * sv14[2969] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3051] = 0.3333333333333333 * sv14[2970] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3052] = 0.3333333333333333 * sv14[2971] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3053] = 0.3333333333333333 * sv14[2972] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3054] = 0.3333333333333333 * sv14[2973] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3055] = 0.3333333333333333 * sv14[2974] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3056] = 0.3333333333333333 * sv14[2975] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3057] = 0.3333333333333333 * sv14[2976] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3058] = 0.3333333333333333 * sv14[2977] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3059] = 0.3333333333333333 * sv14[2978] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3060] = 0.3333333333333333 * sv14[2979] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3061] = 0.3333333333333333 * sv14[2980] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3062] = 0.3333333333333333 * sv14[2981] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3063] = 0.3333333333333333 * sv14[2982] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3064] = 0.3333333333333333 * sv14[2983] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3065] = 0.3333333333333333 * sv14[2984] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3066] = 0.3333333333333333 * sv14[2985] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3067] = 0.3333333333333333 * sv14[2986] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3068] = 0.3333333333333333 * sv14[2987] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3069] = 0.3333333333333333 * sv14[2988] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3070] = 0.3333333333333333 * sv14[2989] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3071] = 0.3333333333333333 * sv14[2990] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3072] = 0.3333333333333333 * sv14[2991] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3073] = 0.3333333333333333 * sv14[2992] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3074] = 0.3333333333333333 * sv14[2993] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3075] = 0.3333333333333333 * sv14[2994] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3076] = 0.3333333333333333 * sv14[2995] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3077] = 0.3333333333333333 * sv14[2996] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3078] = 0.3333333333333333 * sv14[2997] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3079] = 0.3333333333333333 * sv14[2998] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3080] = 0.3333333333333333 * sv14[2999] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3081] = 0.3333333333333333 * sv14[3000] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3082] = 0.3333333333333333 * sv14[3001] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3083] = 0.3333333333333333 * sv14[3002] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3084] = 0.3333333333333333 * sv14[3003] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3085] = 0.3333333333333333 * sv14[3004] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3086] = 0.3333333333333333 * sv14[3005] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3087] = 0.3333333333333333 * sv14[3006] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3088] = 0.3333333333333333 * sv14[3007] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3089] = 0.3333333333333333 * sv14[3008] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3090] = 0.3333333333333333 * sv14[3009] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3091] = 0.3333333333333333 * sv14[3010] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3092] = 0.3333333333333333 * sv14[3011] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3093] = 0.3333333333333333 * sv14[3012] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3094] = 0.3333333333333333 * sv14[3013] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3095] = 0.3333333333333333 * sv14[3014] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3096] = 0.3333333333333333 * sv14[3015] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3097] = 0.3333333333333333 * sv14[3016] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3098] = 0.3333333333333333 * sv14[3017] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3099] = 0.3333333333333333 * sv14[3018] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3100] = 0.3333333333333333 * sv14[3019] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3101] = 0.3333333333333333 * sv14[3020] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3102] = 0.3333333333333333 * sv14[3021] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3103] = 0.3333333333333333 * sv14[3022] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3104] = 0.3333333333333333 * sv14[3023] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3105] = 0.3333333333333333 * sv14[3024] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3106] = 0.3333333333333333 * sv14[3025] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3107] = sv14[512] + sv14[3026];
        sv14[3108] = sv14[513] + sv14[3027];
        sv14[3109] = sv14[514] + sv14[3028];
        sv14[3110] = sv14[515] + sv14[3029];
        sv14[3111] = sv14[516] + sv14[3030];
        sv14[3112] = sv14[517] + sv14[3031];
        sv14[3113] = sv14[518] + sv14[3032];
        sv14[3114] = sv14[519] + sv14[3033];
        sv14[3115] = sv14[520] + sv14[3034];
        sv14[3116] = sv14[521] + sv14[3035];
        sv14[3117] = sv14[522] + sv14[3036];
        sv14[3118] = sv14[523] + sv14[3037];
        sv14[3119] = sv14[524] + sv14[3038];
        sv14[3120] = sv14[525] + sv14[3039];
        sv14[3121] = sv14[526] + sv14[3040];
        sv14[3122] = sv14[527] + sv14[3041];
        sv14[3123] = sv14[528] + sv14[3042];
        sv14[3124] = sv14[529] + sv14[3043];
        sv14[3125] = sv14[530] + sv14[3044];
        sv14[3126] = sv14[531] + sv14[3045];
        sv14[3127] = sv14[532] + sv14[3046];
        sv14[3128] = sv14[533] + sv14[3047];
        sv14[3129] = sv14[534] + sv14[3048];
        sv14[3130] = sv14[535] + sv14[3049];
        sv14[3131] = sv14[536] + sv14[3050];
        sv14[3132] = sv14[537] + sv14[3051];
        sv14[3133] = sv14[538] + sv14[3052];
        sv14[3134] = sv14[539] + sv14[3053];
        sv14[3135] = sv14[548] + sv14[3054];
        sv14[3136] = sv14[557] + sv14[3055];
        sv14[3137] = sv14[566] + sv14[3056];
        sv14[3138] = sv14[575] + sv14[3057];
        sv14[3139] = sv14[584] + sv14[3058];
        sv14[3140] = sv14[540] + sv14[3059];
        sv14[3141] = sv14[549] + sv14[3060];
        sv14[3142] = sv14[558] + sv14[3061];
        sv14[3143] = sv14[567] + sv14[3062];
        sv14[3144] = sv14[576] + sv14[3063];
        sv14[3145] = sv14[585] + sv14[3064];
        sv14[3146] = sv14[541] + sv14[3065];
        sv14[3147] = sv14[550] + sv14[3066];
        sv14[3148] = sv14[559] + sv14[3067];
        sv14[3149] = sv14[568] + sv14[3068];
        sv14[3150] = sv14[577] + sv14[3069];
        sv14[3151] = sv14[586] + sv14[3070];
        sv14[3152] = sv14[542] + sv14[3071];
        sv14[3153] = sv14[543] + sv14[3072];
        sv14[3154] = sv14[544] + sv14[3073];
        sv14[3155] = sv14[545] + sv14[3074];
        sv14[3156] = sv14[546] + sv14[3075];
        sv14[3157] = sv14[547] + sv14[3076];
        sv14[3158] = sv14[551] + sv14[3077];
        sv14[3159] = sv14[552] + sv14[3078];
        sv14[3160] = sv14[553] + sv14[3079];
        sv14[3161] = sv14[554] + sv14[3080];
        sv14[3162] = sv14[555] + sv14[3081];
        sv14[3163] = sv14[556] + sv14[3082];
        sv14[3164] = sv14[560] + sv14[3083];
        sv14[3165] = sv14[561] + sv14[3084];
        sv14[3166] = sv14[562] + sv14[3085];
        sv14[3167] = sv14[563] + sv14[3086];
        sv14[3168] = sv14[564] + sv14[3087];
        sv14[3169] = sv14[565] + sv14[3088];
        sv14[3170] = sv14[569] + sv14[3089];
        sv14[3171] = sv14[578] + sv14[3090];
        sv14[3172] = sv14[587] + sv14[3091];
        sv14[3173] = sv14[570] + sv14[3092];
        sv14[3174] = sv14[579] + sv14[3093];
        sv14[3175] = sv14[588] + sv14[3094];
        sv14[3176] = sv14[571] + sv14[3095];
        sv14[3177] = sv14[580] + sv14[3096];
        sv14[3178] = sv14[589] + sv14[3097];
        sv14[3179] = sv14[572] + sv14[3098];
        sv14[3180] = sv14[573] + sv14[3099];
        sv14[3181] = sv14[574] + sv14[3100];
        sv14[3182] = sv14[581] + sv14[3101];
        sv14[3183] = sv14[582] + sv14[3102];
        sv14[3184] = sv14[583] + sv14[3103];
        sv14[3185] = sv14[590] + sv14[3104];
        sv14[3186] = sv14[591] + sv14[3105];
        sv14[3187] = sv14[592] + sv14[3106];
        sv14[3188] = sv14[181] + sv14[84];
        sv14[3189] = sv14[3188] + sv14[52];
        sv14[3190] = sv14[3189] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3191] = sv14[3107] * sv14[3190];
        sv14[3192] = sv14[3108] * sv14[3190];
        sv14[3193] = sv14[3109] * sv14[3190];
        sv14[3194] = sv14[3110] * sv14[3190];
        sv14[3195] = sv14[3111] * sv14[3190];
        sv14[3196] = sv14[3112] * sv14[3190];
        sv14[3197] = sv14[3113] * sv14[3190];
        sv14[3198] = sv14[3114] * sv14[3190];
        sv14[3199] = sv14[3115] * sv14[3190];
        sv14[3200] = sv14[3116] * sv14[3190];
        sv14[3201] = sv14[3117] * sv14[3190];
        sv14[3202] = sv14[3118] * sv14[3190];
        sv14[3203] = sv14[3119] * sv14[3190];
        sv14[3204] = sv14[3120] * sv14[3190];
        sv14[3205] = sv14[3121] * sv14[3190];
        sv14[3206] = sv14[3122] * sv14[3190];
        sv14[3207] = sv14[3123] * sv14[3190];
        sv14[3208] = sv14[3124] * sv14[3190];
        sv14[3209] = sv14[3125] * sv14[3190];
        sv14[3210] = sv14[3126] * sv14[3190];
        sv14[3211] = sv14[3127] * sv14[3190];
        sv14[3212] = sv14[3128] * sv14[3190];
        sv14[3213] = sv14[3129] * sv14[3190];
        sv14[3214] = sv14[3130] * sv14[3190];
        sv14[3215] = sv14[3131] * sv14[3190];
        sv14[3216] = sv14[3132] * sv14[3190];
        sv14[3217] = sv14[3133] * sv14[3190];
        sv14[3218] = sv14[3134] * sv14[3190];
        sv14[3219] = sv14[3135] * sv14[3190];
        sv14[3220] = sv14[3136] * sv14[3190];
        sv14[3221] = sv14[3137] * sv14[3190];
        sv14[3222] = sv14[3138] * sv14[3190];
        sv14[3223] = sv14[3139] * sv14[3190];
        sv14[3224] = sv14[3140] * sv14[3190];
        sv14[3225] = sv14[3141] * sv14[3190];
        sv14[3226] = sv14[3142] * sv14[3190];
        sv14[3227] = sv14[3143] * sv14[3190];
        sv14[3228] = sv14[3144] * sv14[3190];
        sv14[3229] = sv14[3145] * sv14[3190];
        sv14[3230] = sv14[3146] * sv14[3190];
        sv14[3231] = sv14[3147] * sv14[3190];
        sv14[3232] = sv14[3148] * sv14[3190];
        sv14[3233] = sv14[3149] * sv14[3190];
        sv14[3234] = sv14[3150] * sv14[3190];
        sv14[3235] = sv14[3151] * sv14[3190];
        sv14[3236] = sv14[3152] * sv14[3190];
        sv14[3237] = sv14[3153] * sv14[3190];
        sv14[3238] = sv14[3154] * sv14[3190];
        sv14[3239] = sv14[3155] * sv14[3190];
        sv14[3240] = sv14[3156] * sv14[3190];
        sv14[3241] = sv14[3157] * sv14[3190];
        sv14[3242] = sv14[3158] * sv14[3190];
        sv14[3243] = sv14[3159] * sv14[3190];
        sv14[3244] = sv14[3160] * sv14[3190];
        sv14[3245] = sv14[3161] * sv14[3190];
        sv14[3246] = sv14[3162] * sv14[3190];
        sv14[3247] = sv14[3163] * sv14[3190];
        sv14[3248] = sv14[3164] * sv14[3190];
        sv14[3249] = sv14[3165] * sv14[3190];
        sv14[3250] = sv14[3166] * sv14[3190];
        sv14[3251] = sv14[3167] * sv14[3190];
        sv14[3252] = sv14[3168] * sv14[3190];
        sv14[3253] = sv14[3169] * sv14[3190];
        sv14[3254] = sv14[3170] * sv14[3190];
        sv14[3255] = sv14[3171] * sv14[3190];
        sv14[3256] = sv14[3172] * sv14[3190];
        sv14[3257] = sv14[3173] * sv14[3190];
        sv14[3258] = sv14[3174] * sv14[3190];
        sv14[3259] = sv14[3175] * sv14[3190];
        sv14[3260] = sv14[3176] * sv14[3190];
        sv14[3261] = sv14[3177] * sv14[3190];
        sv14[3262] = sv14[3178] * sv14[3190];
        sv14[3263] = sv14[3179] * sv14[3190];
        sv14[3264] = sv14[3180] * sv14[3190];
        sv14[3265] = sv14[3181] * sv14[3190];
        sv14[3266] = sv14[3182] * sv14[3190];
        sv14[3267] = sv14[3183] * sv14[3190];
        sv14[3268] = sv14[3184] * sv14[3190];
        sv14[3269] = sv14[3185] * sv14[3190];
        sv14[3270] = sv14[3186] * sv14[3190];
        sv14[3271] = sv14[3187] * sv14[3190];
        sv14[3272] = 0.3333333333333333 * sv14[489] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3273] = 0.3333333333333333 * sv14[490] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3274] = 0.3333333333333333 * sv14[491] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3275] = 0.3333333333333333 * sv14[492] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3276] = 0.3333333333333333 * sv14[493] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3277] = 0.3333333333333333 * sv14[494] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3278] = 0.3333333333333333 * sv14[495] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3279] = 0.3333333333333333 * sv14[496] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3280] = 0.3333333333333333 * sv14[497] * std::pow(sv14[502], -0.6666666666666667);
        sv14[3281] = sv14[8] + sv14[194];
        sv14[3282] = sv14[9] + sv14[195];
        sv14[3283] = sv14[196] + sv14[10];
        sv14[3284] = sv14[19] + sv14[200];
        sv14[3285] = sv14[20] + sv14[201];
        sv14[3286] = sv14[202] + sv14[21];
        sv14[3287] = sv14[30] + sv14[206];
        sv14[3288] = sv14[31] + sv14[207];
        sv14[3289] = sv14[208] + sv14[32];
        sv14[3290] = sv14[3281] + sv14[65];
        sv14[3291] = sv14[3282] + sv14[66];
        sv14[3292] = sv14[3283] + sv14[67];
        sv14[3293] = sv14[3284] + sv14[71];
        sv14[3294] = sv14[3285] + sv14[72];
        sv14[3295] = sv14[3286] + sv14[73];
        sv14[3296] = sv14[3287] + sv14[77];
        sv14[3297] = sv14[3288] + sv14[78];
        sv14[3298] = sv14[3289] + sv14[79];
        sv14[3299] = sv14[3272] * sv14[3190];
        sv14[3300] = sv14[3273] * sv14[3190];
        sv14[3301] = sv14[3274] * sv14[3190];
        sv14[3302] = sv14[3275] * sv14[3190];
        sv14[3303] = sv14[3276] * sv14[3190];
        sv14[3304] = sv14[3277] * sv14[3190];
        sv14[3305] = sv14[3278] * sv14[3190];
        sv14[3306] = sv14[3279] * sv14[3190];
        sv14[3307] = sv14[3280] * sv14[3190];
        sv14[3308] = sv14[3290] + -1 * sv14[3299];
        sv14[3309] = sv14[3291] + -1 * sv14[3300];
        sv14[3310] = sv14[3292] + -1 * sv14[3301];
        sv14[3311] = sv14[3293] + -1 * sv14[3302];
        sv14[3312] = sv14[3294] + -1 * sv14[3303];
        sv14[3313] = sv14[3295] + -1 * sv14[3304];
        sv14[3314] = sv14[3296] + -1 * sv14[3305];
        sv14[3315] = sv14[3297] + -1 * sv14[3306];
        sv14[3316] = sv14[3298] + -1 * sv14[3307];
        sv14[3317] = sv14[3308] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3318] = sv14[3309] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3319] = sv14[3310] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3320] = sv14[3311] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3321] = sv14[3312] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3322] = sv14[3313] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3323] = sv14[3314] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3324] = sv14[3315] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3325] = sv14[3316] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3326] = sv14[3272] * sv14[3317];
        sv14[3327] = sv14[3272] * sv14[3318];
        sv14[3328] = sv14[3272] * sv14[3319];
        sv14[3329] = sv14[3272] * sv14[3320];
        sv14[3330] = sv14[3272] * sv14[3321];
        sv14[3331] = sv14[3272] * sv14[3322];
        sv14[3332] = sv14[3272] * sv14[3323];
        sv14[3333] = sv14[3272] * sv14[3324];
        sv14[3334] = sv14[3272] * sv14[3325];
        sv14[3335] = sv14[3273] * sv14[3317];
        sv14[3336] = sv14[3273] * sv14[3318];
        sv14[3337] = sv14[3273] * sv14[3319];
        sv14[3338] = sv14[3273] * sv14[3320];
        sv14[3339] = sv14[3273] * sv14[3321];
        sv14[3340] = sv14[3273] * sv14[3322];
        sv14[3341] = sv14[3273] * sv14[3323];
        sv14[3342] = sv14[3273] * sv14[3324];
        sv14[3343] = sv14[3273] * sv14[3325];
        sv14[3344] = sv14[3274] * sv14[3317];
        sv14[3345] = sv14[3274] * sv14[3318];
        sv14[3346] = sv14[3274] * sv14[3319];
        sv14[3347] = sv14[3274] * sv14[3320];
        sv14[3348] = sv14[3274] * sv14[3321];
        sv14[3349] = sv14[3274] * sv14[3322];
        sv14[3350] = sv14[3274] * sv14[3323];
        sv14[3351] = sv14[3274] * sv14[3324];
        sv14[3352] = sv14[3274] * sv14[3325];
        sv14[3353] = sv14[3275] * sv14[3317];
        sv14[3354] = sv14[3275] * sv14[3318];
        sv14[3355] = sv14[3275] * sv14[3319];
        sv14[3356] = sv14[3275] * sv14[3320];
        sv14[3357] = sv14[3275] * sv14[3321];
        sv14[3358] = sv14[3275] * sv14[3322];
        sv14[3359] = sv14[3275] * sv14[3323];
        sv14[3360] = sv14[3275] * sv14[3324];
        sv14[3361] = sv14[3275] * sv14[3325];
        sv14[3362] = sv14[3276] * sv14[3317];
        sv14[3363] = sv14[3276] * sv14[3318];
        sv14[3364] = sv14[3276] * sv14[3319];
        sv14[3365] = sv14[3276] * sv14[3320];
        sv14[3366] = sv14[3276] * sv14[3321];
        sv14[3367] = sv14[3276] * sv14[3322];
        sv14[3368] = sv14[3276] * sv14[3323];
        sv14[3369] = sv14[3276] * sv14[3324];
        sv14[3370] = sv14[3276] * sv14[3325];
        sv14[3371] = sv14[3277] * sv14[3317];
        sv14[3372] = sv14[3277] * sv14[3318];
        sv14[3373] = sv14[3277] * sv14[3319];
        sv14[3374] = sv14[3277] * sv14[3320];
        sv14[3375] = sv14[3277] * sv14[3321];
        sv14[3376] = sv14[3277] * sv14[3322];
        sv14[3377] = sv14[3277] * sv14[3323];
        sv14[3378] = sv14[3277] * sv14[3324];
        sv14[3379] = sv14[3277] * sv14[3325];
        sv14[3380] = sv14[3278] * sv14[3317];
        sv14[3381] = sv14[3278] * sv14[3318];
        sv14[3382] = sv14[3278] * sv14[3319];
        sv14[3383] = sv14[3278] * sv14[3320];
        sv14[3384] = sv14[3278] * sv14[3321];
        sv14[3385] = sv14[3278] * sv14[3322];
        sv14[3386] = sv14[3278] * sv14[3323];
        sv14[3387] = sv14[3278] * sv14[3324];
        sv14[3388] = sv14[3278] * sv14[3325];
        sv14[3389] = sv14[3279] * sv14[3317];
        sv14[3390] = sv14[3279] * sv14[3318];
        sv14[3391] = sv14[3279] * sv14[3319];
        sv14[3392] = sv14[3279] * sv14[3320];
        sv14[3393] = sv14[3279] * sv14[3321];
        sv14[3394] = sv14[3279] * sv14[3322];
        sv14[3395] = sv14[3279] * sv14[3323];
        sv14[3396] = sv14[3279] * sv14[3324];
        sv14[3397] = sv14[3279] * sv14[3325];
        sv14[3398] = sv14[3280] * sv14[3317];
        sv14[3399] = sv14[3280] * sv14[3318];
        sv14[3400] = sv14[3280] * sv14[3319];
        sv14[3401] = sv14[3280] * sv14[3320];
        sv14[3402] = sv14[3280] * sv14[3321];
        sv14[3403] = sv14[3280] * sv14[3322];
        sv14[3404] = sv14[3280] * sv14[3323];
        sv14[3405] = sv14[3280] * sv14[3324];
        sv14[3406] = sv14[3280] * sv14[3325];
        sv14[3407] = sv14[3191] + sv14[3326];
        sv14[3408] = sv14[3192] + sv14[3327];
        sv14[3409] = sv14[3193] + sv14[3328];
        sv14[3410] = sv14[3194] + sv14[3329];
        sv14[3411] = sv14[3195] + sv14[3330];
        sv14[3412] = sv14[3196] + sv14[3331];
        sv14[3413] = sv14[3197] + sv14[3332];
        sv14[3414] = sv14[3198] + sv14[3333];
        sv14[3415] = sv14[3199] + sv14[3334];
        sv14[3416] = sv14[3200] + sv14[3335];
        sv14[3417] = sv14[3201] + sv14[3336];
        sv14[3418] = sv14[3202] + sv14[3337];
        sv14[3419] = sv14[3203] + sv14[3338];
        sv14[3420] = sv14[3204] + sv14[3339];
        sv14[3421] = sv14[3205] + sv14[3340];
        sv14[3422] = sv14[3206] + sv14[3341];
        sv14[3423] = sv14[3207] + sv14[3342];
        sv14[3424] = sv14[3208] + sv14[3343];
        sv14[3425] = sv14[3209] + sv14[3344];
        sv14[3426] = sv14[3210] + sv14[3345];
        sv14[3427] = sv14[3211] + sv14[3346];
        sv14[3428] = sv14[3212] + sv14[3347];
        sv14[3429] = sv14[3213] + sv14[3348];
        sv14[3430] = sv14[3214] + sv14[3349];
        sv14[3431] = sv14[3215] + sv14[3350];
        sv14[3432] = sv14[3216] + sv14[3351];
        sv14[3433] = sv14[3217] + sv14[3352];
        sv14[3434] = sv14[3218] + sv14[3353];
        sv14[3435] = sv14[3219] + sv14[3362];
        sv14[3436] = sv14[3220] + sv14[3371];
        sv14[3437] = sv14[3221] + sv14[3380];
        sv14[3438] = sv14[3222] + sv14[3389];
        sv14[3439] = sv14[3223] + sv14[3398];
        sv14[3440] = sv14[3224] + sv14[3354];
        sv14[3441] = sv14[3225] + sv14[3363];
        sv14[3442] = sv14[3226] + sv14[3372];
        sv14[3443] = sv14[3227] + sv14[3381];
        sv14[3444] = sv14[3228] + sv14[3390];
        sv14[3445] = sv14[3229] + sv14[3399];
        sv14[3446] = sv14[3230] + sv14[3355];
        sv14[3447] = sv14[3231] + sv14[3364];
        sv14[3448] = sv14[3232] + sv14[3373];
        sv14[3449] = sv14[3233] + sv14[3382];
        sv14[3450] = sv14[3234] + sv14[3391];
        sv14[3451] = sv14[3235] + sv14[3400];
        sv14[3452] = sv14[3236] + sv14[3356];
        sv14[3453] = sv14[3237] + sv14[3357];
        sv14[3454] = sv14[3238] + sv14[3358];
        sv14[3455] = sv14[3239] + sv14[3359];
        sv14[3456] = sv14[3240] + sv14[3360];
        sv14[3457] = sv14[3241] + sv14[3361];
        sv14[3458] = sv14[3242] + sv14[3365];
        sv14[3459] = sv14[3243] + sv14[3366];
        sv14[3460] = sv14[3244] + sv14[3367];
        sv14[3461] = sv14[3245] + sv14[3368];
        sv14[3462] = sv14[3246] + sv14[3369];
        sv14[3463] = sv14[3247] + sv14[3370];
        sv14[3464] = sv14[3248] + sv14[3374];
        sv14[3465] = sv14[3249] + sv14[3375];
        sv14[3466] = sv14[3250] + sv14[3376];
        sv14[3467] = sv14[3251] + sv14[3377];
        sv14[3468] = sv14[3252] + sv14[3378];
        sv14[3469] = sv14[3253] + sv14[3379];
        sv14[3470] = sv14[3254] + sv14[3383];
        sv14[3471] = sv14[3255] + sv14[3392];
        sv14[3472] = sv14[3256] + sv14[3401];
        sv14[3473] = sv14[3257] + sv14[3384];
        sv14[3474] = sv14[3258] + sv14[3393];
        sv14[3475] = sv14[3259] + sv14[3402];
        sv14[3476] = sv14[3260] + sv14[3385];
        sv14[3477] = sv14[3261] + sv14[3394];
        sv14[3478] = sv14[3262] + sv14[3403];
        sv14[3479] = sv14[3263] + sv14[3386];
        sv14[3480] = sv14[3264] + sv14[3387];
        sv14[3481] = sv14[3265] + sv14[3388];
        sv14[3482] = sv14[3266] + sv14[3395];
        sv14[3483] = sv14[3267] + sv14[3396];
        sv14[3484] = sv14[3268] + sv14[3397];
        sv14[3485] = sv14[3269] + sv14[3404];
        sv14[3486] = sv14[3270] + sv14[3405];
        sv14[3487] = sv14[3271] + sv14[3406];
        sv14[3488] = sp[85] + -1 * sv14[3407];
        sv14[3489] = sp[86] + -1 * sv14[3408];
        sv14[3490] = sp[87] + -1 * sv14[3409];
        sv14[3491] = sp[86] + -1 * sv14[3416];
        sv14[3492] = sp[88] + -1 * sv14[3417];
        sv14[3493] = sp[89] + -1 * sv14[3418];
        sv14[3494] = sp[87] + -1 * sv14[3425];
        sv14[3495] = sp[89] + -1 * sv14[3426];
        sv14[3496] = sp[90] + -1 * sv14[3427];
        sv14[3497] = sp[85] + -1 * sv14[3452];
        sv14[3498] = sp[86] + -1 * sv14[3453];
        sv14[3499] = sp[87] + -1 * sv14[3454];
        sv14[3500] = sp[86] + -1 * sv14[3458];
        sv14[3501] = sp[88] + -1 * sv14[3459];
        sv14[3502] = sp[89] + -1 * sv14[3460];
        sv14[3503] = sp[87] + -1 * sv14[3464];
        sv14[3504] = sp[89] + -1 * sv14[3465];
        sv14[3505] = sp[90] + -1 * sv14[3466];
        sv14[3506] = sp[85] + -1 * sv14[3479];
        sv14[3507] = sp[86] + -1 * sv14[3480];
        sv14[3508] = sp[87] + -1 * sv14[3481];
        sv14[3509] = sp[86] + -1 * sv14[3482];
        sv14[3510] = sp[88] + -1 * sv14[3483];
        sv14[3511] = sp[89] + -1 * sv14[3484];
        sv14[3512] = sp[87] + -1 * sv14[3485];
        sv14[3513] = sp[89] + -1 * sv14[3486];
        sv14[3514] = sp[90] + -1 * sv14[3487];
        sv14[3515] = sv14[3488] + -1 * sv14[3326];
        sv14[3516] = sv14[3489] + -1 * sv14[3335];
        sv14[3517] = sv14[3490] + -1 * sv14[3344];
        sv14[3518] = -1 * sv14[3410] + -1 * sv14[3353];
        sv14[3519] = -1 * sv14[3411] + -1 * sv14[3362];
        sv14[3520] = -1 * sv14[3412] + -1 * sv14[3371];
        sv14[3521] = -1 * sv14[3413] + -1 * sv14[3380];
        sv14[3522] = -1 * sv14[3414] + -1 * sv14[3389];
        sv14[3523] = -1 * sv14[3415] + -1 * sv14[3398];
        sv14[3524] = sv14[3491] + -1 * sv14[3327];
        sv14[3525] = sv14[3492] + -1 * sv14[3336];
        sv14[3526] = sv14[3493] + -1 * sv14[3345];
        sv14[3527] = -1 * sv14[3419] + -1 * sv14[3354];
        sv14[3528] = -1 * sv14[3420] + -1 * sv14[3363];
        sv14[3529] = -1 * sv14[3421] + -1 * sv14[3372];
        sv14[3530] = -1 * sv14[3422] + -1 * sv14[3381];
        sv14[3531] = -1 * sv14[3423] + -1 * sv14[3390];
        sv14[3532] = -1 * sv14[3424] + -1 * sv14[3399];
        sv14[3533] = sv14[3494] + -1 * sv14[3328];
        sv14[3534] = sv14[3495] + -1 * sv14[3337];
        sv14[3535] = sv14[3496] + -1 * sv14[3346];
        sv14[3536] = -1 * sv14[3428] + -1 * sv14[3355];
        sv14[3537] = -1 * sv14[3429] + -1 * sv14[3364];
        sv14[3538] = -1 * sv14[3430] + -1 * sv14[3373];
        sv14[3539] = -1 * sv14[3431] + -1 * sv14[3382];
        sv14[3540] = -1 * sv14[3432] + -1 * sv14[3391];
        sv14[3541] = -1 * sv14[3433] + -1 * sv14[3400];
        sv14[3542] = -1 * sv14[3434] + -1 * sv14[3329];
        sv14[3543] = -1 * sv14[3435] + -1 * sv14[3330];
        sv14[3544] = -1 * sv14[3436] + -1 * sv14[3331];
        sv14[3545] = -1 * sv14[3437] + -1 * sv14[3332];
        sv14[3546] = -1 * sv14[3438] + -1 * sv14[3333];
        sv14[3547] = -1 * sv14[3439] + -1 * sv14[3334];
        sv14[3548] = -1 * sv14[3440] + -1 * sv14[3338];
        sv14[3549] = -1 * sv14[3441] + -1 * sv14[3339];
        sv14[3550] = -1 * sv14[3442] + -1 * sv14[3340];
        sv14[3551] = -1 * sv14[3443] + -1 * sv14[3341];
        sv14[3552] = -1 * sv14[3444] + -1 * sv14[3342];
        sv14[3553] = -1 * sv14[3445] + -1 * sv14[3343];
        sv14[3554] = -1 * sv14[3446] + -1 * sv14[3347];
        sv14[3555] = -1 * sv14[3447] + -1 * sv14[3348];
        sv14[3556] = -1 * sv14[3448] + -1 * sv14[3349];
        sv14[3557] = -1 * sv14[3449] + -1 * sv14[3350];
        sv14[3558] = -1 * sv14[3450] + -1 * sv14[3351];
        sv14[3559] = -1 * sv14[3451] + -1 * sv14[3352];
        sv14[3560] = sv14[3497] + -1 * sv14[3356];
        sv14[3561] = sv14[3498] + -1 * sv14[3365];
        sv14[3562] = sv14[3499] + -1 * sv14[3374];
        sv14[3563] = -1 * sv14[3455] + -1 * sv14[3383];
        sv14[3564] = -1 * sv14[3456] + -1 * sv14[3392];
        sv14[3565] = -1 * sv14[3457] + -1 * sv14[3401];
        sv14[3566] = sv14[3500] + -1 * sv14[3357];
        sv14[3567] = sv14[3501] + -1 * sv14[3366];
        sv14[3568] = sv14[3502] + -1 * sv14[3375];
        sv14[3569] = -1 * sv14[3461] + -1 * sv14[3384];
        sv14[3570] = -1 * sv14[3462] + -1 * sv14[3393];
        sv14[3571] = -1 * sv14[3463] + -1 * sv14[3402];
        sv14[3572] = sv14[3503] + -1 * sv14[3358];
        sv14[3573] = sv14[3504] + -1 * sv14[3367];
        sv14[3574] = sv14[3505] + -1 * sv14[3376];
        sv14[3575] = -1 * sv14[3467] + -1 * sv14[3385];
        sv14[3576] = -1 * sv14[3468] + -1 * sv14[3394];
        sv14[3577] = -1 * sv14[3469] + -1 * sv14[3403];
        sv14[3578] = -1 * sv14[3470] + -1 * sv14[3359];
        sv14[3579] = -1 * sv14[3471] + -1 * sv14[3360];
        sv14[3580] = -1 * sv14[3472] + -1 * sv14[3361];
        sv14[3581] = -1 * sv14[3473] + -1 * sv14[3368];
        sv14[3582] = -1 * sv14[3474] + -1 * sv14[3369];
        sv14[3583] = -1 * sv14[3475] + -1 * sv14[3370];
        sv14[3584] = -1 * sv14[3476] + -1 * sv14[3377];
        sv14[3585] = -1 * sv14[3477] + -1 * sv14[3378];
        sv14[3586] = -1 * sv14[3478] + -1 * sv14[3379];
        sv14[3587] = sv14[3506] + -1 * sv14[3386];
        sv14[3588] = sv14[3507] + -1 * sv14[3395];
        sv14[3589] = sv14[3508] + -1 * sv14[3404];
        sv14[3590] = sv14[3509] + -1 * sv14[3387];
        sv14[3591] = sv14[3510] + -1 * sv14[3396];
        sv14[3592] = sv14[3511] + -1 * sv14[3405];
        sv14[3593] = sv14[3512] + -1 * sv14[3388];
        sv14[3594] = sv14[3513] + -1 * sv14[3397];
        sv14[3595] = sv14[3514] + -1 * sv14[3406];
        sv14[3596] = sv14[3515] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3597] = sv14[3516] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3598] = sv14[3517] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3599] = sv14[3518] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3600] = sv14[3519] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3601] = sv14[3520] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3602] = sv14[3521] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3603] = sv14[3522] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3604] = sv14[3523] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3605] = sv14[3524] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3606] = sv14[3525] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3607] = sv14[3526] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3608] = sv14[3527] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3609] = sv14[3528] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3610] = sv14[3529] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3611] = sv14[3530] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3612] = sv14[3531] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3613] = sv14[3532] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3614] = sv14[3533] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3615] = sv14[3534] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3616] = sv14[3535] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3617] = sv14[3536] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3618] = sv14[3537] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3619] = sv14[3538] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3620] = sv14[3539] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3621] = sv14[3540] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3622] = sv14[3541] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3623] = sv14[3542] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3624] = sv14[3543] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3625] = sv14[3544] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3626] = sv14[3545] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3627] = sv14[3546] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3628] = sv14[3547] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3629] = sv14[3548] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3630] = sv14[3549] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3631] = sv14[3550] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3632] = sv14[3551] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3633] = sv14[3552] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3634] = sv14[3553] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3635] = sv14[3554] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3636] = sv14[3555] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3637] = sv14[3556] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3638] = sv14[3557] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3639] = sv14[3558] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3640] = sv14[3559] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3641] = sv14[3560] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3642] = sv14[3561] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3643] = sv14[3562] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3644] = sv14[3563] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3645] = sv14[3564] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3646] = sv14[3565] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3647] = sv14[3566] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3648] = sv14[3567] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3649] = sv14[3568] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3650] = sv14[3569] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3651] = sv14[3570] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3652] = sv14[3571] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3653] = sv14[3572] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3654] = sv14[3573] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3655] = sv14[3574] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3656] = sv14[3575] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3657] = sv14[3576] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3658] = sv14[3577] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3659] = sv14[3578] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3660] = sv14[3579] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3661] = sv14[3580] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3662] = sv14[3581] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3663] = sv14[3582] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3664] = sv14[3583] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3665] = sv14[3584] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3666] = sv14[3585] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3667] = sv14[3586] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3668] = sv14[3587] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3669] = sv14[3588] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3670] = sv14[3589] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3671] = sv14[3590] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3672] = sv14[3591] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3673] = sv14[3592] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3674] = sv14[3593] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3675] = sv14[3594] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3676] = sv14[3595] / std::pow(sv14[502], 0.3333333333333333);
        sv14[3677] = sv14[3596] * w[3][0];
        sv14[3678] = sv14[3597] * w[3][0];
        sv14[3679] = sv14[3598] * w[3][0];
        sv14[3680] = sv14[3599] * w[3][0];
        sv14[3681] = sv14[3600] * w[3][0];
        sv14[3682] = sv14[3601] * w[3][0];
        sv14[3683] = sv14[3602] * w[3][0];
        sv14[3684] = sv14[3603] * w[3][0];
        sv14[3685] = sv14[3604] * w[3][0];
        sv14[3686] = sv14[3605] * w[3][0];
        sv14[3687] = sv14[3606] * w[3][0];
        sv14[3688] = sv14[3607] * w[3][0];
        sv14[3689] = sv14[3608] * w[3][0];
        sv14[3690] = sv14[3609] * w[3][0];
        sv14[3691] = sv14[3610] * w[3][0];
        sv14[3692] = sv14[3611] * w[3][0];
        sv14[3693] = sv14[3612] * w[3][0];
        sv14[3694] = sv14[3613] * w[3][0];
        sv14[3695] = sv14[3614] * w[3][0];
        sv14[3696] = sv14[3615] * w[3][0];
        sv14[3697] = sv14[3616] * w[3][0];
        sv14[3698] = sv14[3617] * w[3][0];
        sv14[3699] = sv14[3618] * w[3][0];
        sv14[3700] = sv14[3619] * w[3][0];
        sv14[3701] = sv14[3620] * w[3][0];
        sv14[3702] = sv14[3621] * w[3][0];
        sv14[3703] = sv14[3622] * w[3][0];
        sv14[3704] = sv14[3623] * w[3][0];
        sv14[3705] = sv14[3624] * w[3][0];
        sv14[3706] = sv14[3625] * w[3][0];
        sv14[3707] = sv14[3626] * w[3][0];
        sv14[3708] = sv14[3627] * w[3][0];
        sv14[3709] = sv14[3628] * w[3][0];
        sv14[3710] = sv14[3629] * w[3][0];
        sv14[3711] = sv14[3630] * w[3][0];
        sv14[3712] = sv14[3631] * w[3][0];
        sv14[3713] = sv14[3632] * w[3][0];
        sv14[3714] = sv14[3633] * w[3][0];
        sv14[3715] = sv14[3634] * w[3][0];
        sv14[3716] = sv14[3635] * w[3][0];
        sv14[3717] = sv14[3636] * w[3][0];
        sv14[3718] = sv14[3637] * w[3][0];
        sv14[3719] = sv14[3638] * w[3][0];
        sv14[3720] = sv14[3639] * w[3][0];
        sv14[3721] = sv14[3640] * w[3][0];
        sv14[3722] = sv14[3641] * w[3][0];
        sv14[3723] = sv14[3642] * w[3][0];
        sv14[3724] = sv14[3643] * w[3][0];
        sv14[3725] = sv14[3644] * w[3][0];
        sv14[3726] = sv14[3645] * w[3][0];
        sv14[3727] = sv14[3646] * w[3][0];
        sv14[3728] = sv14[3647] * w[3][0];
        sv14[3729] = sv14[3648] * w[3][0];
        sv14[3730] = sv14[3649] * w[3][0];
        sv14[3731] = sv14[3650] * w[3][0];
        sv14[3732] = sv14[3651] * w[3][0];
        sv14[3733] = sv14[3652] * w[3][0];
        sv14[3734] = sv14[3653] * w[3][0];
        sv14[3735] = sv14[3654] * w[3][0];
        sv14[3736] = sv14[3655] * w[3][0];
        sv14[3737] = sv14[3656] * w[3][0];
        sv14[3738] = sv14[3657] * w[3][0];
        sv14[3739] = sv14[3658] * w[3][0];
        sv14[3740] = sv14[3659] * w[3][0];
        sv14[3741] = sv14[3660] * w[3][0];
        sv14[3742] = sv14[3661] * w[3][0];
        sv14[3743] = sv14[3662] * w[3][0];
        sv14[3744] = sv14[3663] * w[3][0];
        sv14[3745] = sv14[3664] * w[3][0];
        sv14[3746] = sv14[3665] * w[3][0];
        sv14[3747] = sv14[3666] * w[3][0];
        sv14[3748] = sv14[3667] * w[3][0];
        sv14[3749] = sv14[3668] * w[3][0];
        sv14[3750] = sv14[3669] * w[3][0];
        sv14[3751] = sv14[3670] * w[3][0];
        sv14[3752] = sv14[3671] * w[3][0];
        sv14[3753] = sv14[3672] * w[3][0];
        sv14[3754] = sv14[3673] * w[3][0];
        sv14[3755] = sv14[3674] * w[3][0];
        sv14[3756] = sv14[3675] * w[3][0];
        sv14[3757] = sv14[3676] * w[3][0];
        sv14[3758] = sv14[489] * w[5][0];
        sv14[3759] = sv14[490] * w[5][0];
        sv14[3760] = sv14[491] * w[5][0];
        sv14[3761] = sv14[492] * w[5][0];
        sv14[3762] = sv14[493] * w[5][0];
        sv14[3763] = sv14[494] * w[5][0];
        sv14[3764] = sv14[495] * w[5][0];
        sv14[3765] = sv14[496] * w[5][0];
        sv14[3766] = sv14[497] * w[5][0];
        sv14[3767] = std::pow(sv14[502], -1 + w[5][0]);
        sv14[3768] = sv14[3758] * sv14[3767];
        sv14[3769] = sv14[3759] * sv14[3767];
        sv14[3770] = sv14[3760] * sv14[3767];
        sv14[3771] = sv14[3761] * sv14[3767];
        sv14[3772] = sv14[3762] * sv14[3767];
        sv14[3773] = sv14[3763] * sv14[3767];
        sv14[3774] = sv14[3764] * sv14[3767];
        sv14[3775] = sv14[3765] * sv14[3767];
        sv14[3776] = sv14[3766] * sv14[3767];
        sv14[3777] = std::pow(sv14[502], w[5][0]);
        sv14[3778] = sv14[3768] * (1.0 / sv14[3777]);
        sv14[3779] = sv14[3769] * (1.0 / sv14[3777]);
        sv14[3780] = sv14[3770] * (1.0 / sv14[3777]);
        sv14[3781] = sv14[3771] * (1.0 / sv14[3777]);
        sv14[3782] = sv14[3772] * (1.0 / sv14[3777]);
        sv14[3783] = sv14[3773] * (1.0 / sv14[3777]);
        sv14[3784] = sv14[3774] * (1.0 / sv14[3777]);
        sv14[3785] = sv14[3775] * (1.0 / sv14[3777]);
        sv14[3786] = sv14[3776] * (1.0 / sv14[3777]);
        sv14[3787] = -1 * sv14[3778] / sv14[3777];
        sv14[3788] = -1 * sv14[3779] / sv14[3777];
        sv14[3789] = -1 * sv14[3780] / sv14[3777];
        sv14[3790] = -1 * sv14[3781] / sv14[3777];
        sv14[3791] = -1 * sv14[3782] / sv14[3777];
        sv14[3792] = -1 * sv14[3783] / sv14[3777];
        sv14[3793] = -1 * sv14[3784] / sv14[3777];
        sv14[3794] = -1 * sv14[3785] / sv14[3777];
        sv14[3795] = -1 * sv14[3786] / sv14[3777];
        sv14[3796] = sv14[3768] + sv14[3787];
        sv14[3797] = sv14[3769] + sv14[3788];
        sv14[3798] = sv14[3770] + sv14[3789];
        sv14[3799] = sv14[3771] + sv14[3790];
        sv14[3800] = sv14[3772] + sv14[3791];
        sv14[3801] = sv14[3773] + sv14[3792];
        sv14[3802] = sv14[3774] + sv14[3793];
        sv14[3803] = sv14[3775] + sv14[3794];
        sv14[3804] = sv14[3776] + sv14[3795];
        sv14[3805] = sv14[3796] * (-1 + w[6][0]);
        sv14[3806] = sv14[3797] * (-1 + w[6][0]);
        sv14[3807] = sv14[3798] * (-1 + w[6][0]);
        sv14[3808] = sv14[3799] * (-1 + w[6][0]);
        sv14[3809] = sv14[3800] * (-1 + w[6][0]);
        sv14[3810] = sv14[3801] * (-1 + w[6][0]);
        sv14[3811] = sv14[3802] * (-1 + w[6][0]);
        sv14[3812] = sv14[3803] * (-1 + w[6][0]);
        sv14[3813] = sv14[3804] * (-1 + w[6][0]);
        sv14[3814] = 1.0 / sv14[3777] + sv14[3777];
        sv14[3815] = std::pow(-2.0 + sv14[3814], -1 + (-1 + w[6][0]));
        sv14[3816] = sv14[3805] * sv14[3815];
        sv14[3817] = sv14[3806] * sv14[3815];
        sv14[3818] = sv14[3807] * sv14[3815];
        sv14[3819] = sv14[3808] * sv14[3815];
        sv14[3820] = sv14[3809] * sv14[3815];
        sv14[3821] = sv14[3810] * sv14[3815];
        sv14[3822] = sv14[3811] * sv14[3815];
        sv14[3823] = sv14[3812] * sv14[3815];
        sv14[3824] = sv14[3813] * sv14[3815];
        sv14[3825] = sv14[3796] * w[6][0];
        sv14[3826] = sv14[3797] * w[6][0];
        sv14[3827] = sv14[3798] * w[6][0];
        sv14[3828] = sv14[3799] * w[6][0];
        sv14[3829] = sv14[3800] * w[6][0];
        sv14[3830] = sv14[3801] * w[6][0];
        sv14[3831] = sv14[3802] * w[6][0];
        sv14[3832] = sv14[3803] * w[6][0];
        sv14[3833] = sv14[3804] * w[6][0];
        sv14[3834] = sv14[3816] * sv14[3825];
        sv14[3835] = sv14[3816] * sv14[3826];
        sv14[3836] = sv14[3816] * sv14[3827];
        sv14[3837] = sv14[3816] * sv14[3828];
        sv14[3838] = sv14[3816] * sv14[3829];
        sv14[3839] = sv14[3816] * sv14[3830];
        sv14[3840] = sv14[3816] * sv14[3831];
        sv14[3841] = sv14[3816] * sv14[3832];
        sv14[3842] = sv14[3816] * sv14[3833];
        sv14[3843] = sv14[3817] * sv14[3825];
        sv14[3844] = sv14[3817] * sv14[3826];
        sv14[3845] = sv14[3817] * sv14[3827];
        sv14[3846] = sv14[3817] * sv14[3828];
        sv14[3847] = sv14[3817] * sv14[3829];
        sv14[3848] = sv14[3817] * sv14[3830];
        sv14[3849] = sv14[3817] * sv14[3831];
        sv14[3850] = sv14[3817] * sv14[3832];
        sv14[3851] = sv14[3817] * sv14[3833];
        sv14[3852] = sv14[3818] * sv14[3825];
        sv14[3853] = sv14[3818] * sv14[3826];
        sv14[3854] = sv14[3818] * sv14[3827];
        sv14[3855] = sv14[3818] * sv14[3828];
        sv14[3856] = sv14[3818] * sv14[3829];
        sv14[3857] = sv14[3818] * sv14[3830];
        sv14[3858] = sv14[3818] * sv14[3831];
        sv14[3859] = sv14[3818] * sv14[3832];
        sv14[3860] = sv14[3818] * sv14[3833];
        sv14[3861] = sv14[3819] * sv14[3825];
        sv14[3862] = sv14[3819] * sv14[3826];
        sv14[3863] = sv14[3819] * sv14[3827];
        sv14[3864] = sv14[3819] * sv14[3828];
        sv14[3865] = sv14[3819] * sv14[3829];
        sv14[3866] = sv14[3819] * sv14[3830];
        sv14[3867] = sv14[3819] * sv14[3831];
        sv14[3868] = sv14[3819] * sv14[3832];
        sv14[3869] = sv14[3819] * sv14[3833];
        sv14[3870] = sv14[3820] * sv14[3825];
        sv14[3871] = sv14[3820] * sv14[3826];
        sv14[3872] = sv14[3820] * sv14[3827];
        sv14[3873] = sv14[3820] * sv14[3828];
        sv14[3874] = sv14[3820] * sv14[3829];
        sv14[3875] = sv14[3820] * sv14[3830];
        sv14[3876] = sv14[3820] * sv14[3831];
        sv14[3877] = sv14[3820] * sv14[3832];
        sv14[3878] = sv14[3820] * sv14[3833];
        sv14[3879] = sv14[3821] * sv14[3825];
        sv14[3880] = sv14[3821] * sv14[3826];
        sv14[3881] = sv14[3821] * sv14[3827];
        sv14[3882] = sv14[3821] * sv14[3828];
        sv14[3883] = sv14[3821] * sv14[3829];
        sv14[3884] = sv14[3821] * sv14[3830];
        sv14[3885] = sv14[3821] * sv14[3831];
        sv14[3886] = sv14[3821] * sv14[3832];
        sv14[3887] = sv14[3821] * sv14[3833];
        sv14[3888] = sv14[3822] * sv14[3825];
        sv14[3889] = sv14[3822] * sv14[3826];
        sv14[3890] = sv14[3822] * sv14[3827];
        sv14[3891] = sv14[3822] * sv14[3828];
        sv14[3892] = sv14[3822] * sv14[3829];
        sv14[3893] = sv14[3822] * sv14[3830];
        sv14[3894] = sv14[3822] * sv14[3831];
        sv14[3895] = sv14[3822] * sv14[3832];
        sv14[3896] = sv14[3822] * sv14[3833];
        sv14[3897] = sv14[3823] * sv14[3825];
        sv14[3898] = sv14[3823] * sv14[3826];
        sv14[3899] = sv14[3823] * sv14[3827];
        sv14[3900] = sv14[3823] * sv14[3828];
        sv14[3901] = sv14[3823] * sv14[3829];
        sv14[3902] = sv14[3823] * sv14[3830];
        sv14[3903] = sv14[3823] * sv14[3831];
        sv14[3904] = sv14[3823] * sv14[3832];
        sv14[3905] = sv14[3823] * sv14[3833];
        sv14[3906] = sv14[3824] * sv14[3825];
        sv14[3907] = sv14[3824] * sv14[3826];
        sv14[3908] = sv14[3824] * sv14[3827];
        sv14[3909] = sv14[3824] * sv14[3828];
        sv14[3910] = sv14[3824] * sv14[3829];
        sv14[3911] = sv14[3824] * sv14[3830];
        sv14[3912] = sv14[3824] * sv14[3831];
        sv14[3913] = sv14[3824] * sv14[3832];
        sv14[3914] = sv14[3824] * sv14[3833];
        sv14[3915] = sv14[489] * (-1 + w[5][0]);
        sv14[3916] = sv14[490] * (-1 + w[5][0]);
        sv14[3917] = sv14[491] * (-1 + w[5][0]);
        sv14[3918] = sv14[492] * (-1 + w[5][0]);
        sv14[3919] = sv14[493] * (-1 + w[5][0]);
        sv14[3920] = sv14[494] * (-1 + w[5][0]);
        sv14[3921] = sv14[495] * (-1 + w[5][0]);
        sv14[3922] = sv14[496] * (-1 + w[5][0]);
        sv14[3923] = sv14[497] * (-1 + w[5][0]);
        sv14[3924] = std::pow(sv14[502], -1 + (-1 + w[5][0]));
        sv14[3925] = sv14[3915] * sv14[3924];
        sv14[3926] = sv14[3916] * sv14[3924];
        sv14[3927] = sv14[3917] * sv14[3924];
        sv14[3928] = sv14[3918] * sv14[3924];
        sv14[3929] = sv14[3919] * sv14[3924];
        sv14[3930] = sv14[3920] * sv14[3924];
        sv14[3931] = sv14[3921] * sv14[3924];
        sv14[3932] = sv14[3922] * sv14[3924];
        sv14[3933] = sv14[3923] * sv14[3924];
        sv14[3934] = sv14[3925] * sv14[3758];
        sv14[3935] = sv14[3925] * sv14[3759];
        sv14[3936] = sv14[3925] * sv14[3760];
        sv14[3937] = sv14[3925] * sv14[3761];
        sv14[3938] = sv14[3925] * sv14[3762];
        sv14[3939] = sv14[3925] * sv14[3763];
        sv14[3940] = sv14[3925] * sv14[3764];
        sv14[3941] = sv14[3925] * sv14[3765];
        sv14[3942] = sv14[3925] * sv14[3766];
        sv14[3943] = sv14[3926] * sv14[3758];
        sv14[3944] = sv14[3926] * sv14[3759];
        sv14[3945] = sv14[3926] * sv14[3760];
        sv14[3946] = sv14[3926] * sv14[3761];
        sv14[3947] = sv14[3926] * sv14[3762];
        sv14[3948] = sv14[3926] * sv14[3763];
        sv14[3949] = sv14[3926] * sv14[3764];
        sv14[3950] = sv14[3926] * sv14[3765];
        sv14[3951] = sv14[3926] * sv14[3766];
        sv14[3952] = sv14[3927] * sv14[3758];
        sv14[3953] = sv14[3927] * sv14[3759];
        sv14[3954] = sv14[3927] * sv14[3760];
        sv14[3955] = sv14[3927] * sv14[3761];
        sv14[3956] = sv14[3927] * sv14[3762];
        sv14[3957] = sv14[3927] * sv14[3763];
        sv14[3958] = sv14[3927] * sv14[3764];
        sv14[3959] = sv14[3927] * sv14[3765];
        sv14[3960] = sv14[3927] * sv14[3766];
        sv14[3961] = sv14[3928] * sv14[3758];
        sv14[3962] = sv14[3928] * sv14[3759];
        sv14[3963] = sv14[3928] * sv14[3760];
        sv14[3964] = sv14[3928] * sv14[3761];
        sv14[3965] = sv14[3928] * sv14[3762];
        sv14[3966] = sv14[3928] * sv14[3763];
        sv14[3967] = sv14[3928] * sv14[3764];
        sv14[3968] = sv14[3928] * sv14[3765];
        sv14[3969] = sv14[3928] * sv14[3766];
        sv14[3970] = sv14[3929] * sv14[3758];
        sv14[3971] = sv14[3929] * sv14[3759];
        sv14[3972] = sv14[3929] * sv14[3760];
        sv14[3973] = sv14[3929] * sv14[3761];
        sv14[3974] = sv14[3929] * sv14[3762];
        sv14[3975] = sv14[3929] * sv14[3763];
        sv14[3976] = sv14[3929] * sv14[3764];
        sv14[3977] = sv14[3929] * sv14[3765];
        sv14[3978] = sv14[3929] * sv14[3766];
        sv14[3979] = sv14[3930] * sv14[3758];
        sv14[3980] = sv14[3930] * sv14[3759];
        sv14[3981] = sv14[3930] * sv14[3760];
        sv14[3982] = sv14[3930] * sv14[3761];
        sv14[3983] = sv14[3930] * sv14[3762];
        sv14[3984] = sv14[3930] * sv14[3763];
        sv14[3985] = sv14[3930] * sv14[3764];
        sv14[3986] = sv14[3930] * sv14[3765];
        sv14[3987] = sv14[3930] * sv14[3766];
        sv14[3988] = sv14[3931] * sv14[3758];
        sv14[3989] = sv14[3931] * sv14[3759];
        sv14[3990] = sv14[3931] * sv14[3760];
        sv14[3991] = sv14[3931] * sv14[3761];
        sv14[3992] = sv14[3931] * sv14[3762];
        sv14[3993] = sv14[3931] * sv14[3763];
        sv14[3994] = sv14[3931] * sv14[3764];
        sv14[3995] = sv14[3931] * sv14[3765];
        sv14[3996] = sv14[3931] * sv14[3766];
        sv14[3997] = sv14[3932] * sv14[3758];
        sv14[3998] = sv14[3932] * sv14[3759];
        sv14[3999] = sv14[3932] * sv14[3760];
        sv14[4000] = sv14[3932] * sv14[3761];
        sv14[4001] = sv14[3932] * sv14[3762];
        sv14[4002] = sv14[3932] * sv14[3763];
        sv14[4003] = sv14[3932] * sv14[3764];
        sv14[4004] = sv14[3932] * sv14[3765];
        sv14[4005] = sv14[3932] * sv14[3766];
        sv14[4006] = sv14[3933] * sv14[3758];
        sv14[4007] = sv14[3933] * sv14[3759];
        sv14[4008] = sv14[3933] * sv14[3760];
        sv14[4009] = sv14[3933] * sv14[3761];
        sv14[4010] = sv14[3933] * sv14[3762];
        sv14[4011] = sv14[3933] * sv14[3763];
        sv14[4012] = sv14[3933] * sv14[3764];
        sv14[4013] = sv14[3933] * sv14[3765];
        sv14[4014] = sv14[3933] * sv14[3766];
        sv14[4015] = sv14[2945] * w[5][0];
        sv14[4016] = sv14[2946] * w[5][0];
        sv14[4017] = sv14[2947] * w[5][0];
        sv14[4018] = sv14[2948] * w[5][0];
        sv14[4019] = sv14[2949] * w[5][0];
        sv14[4020] = sv14[2950] * w[5][0];
        sv14[4021] = sv14[2951] * w[5][0];
        sv14[4022] = sv14[2952] * w[5][0];
        sv14[4023] = sv14[2953] * w[5][0];
        sv14[4024] = sv14[2954] * w[5][0];
        sv14[4025] = sv14[2955] * w[5][0];
        sv14[4026] = sv14[2956] * w[5][0];
        sv14[4027] = sv14[2957] * w[5][0];
        sv14[4028] = sv14[2958] * w[5][0];
        sv14[4029] = sv14[2959] * w[5][0];
        sv14[4030] = sv14[2960] * w[5][0];
        sv14[4031] = sv14[2961] * w[5][0];
        sv14[4032] = sv14[2962] * w[5][0];
        sv14[4033] = sv14[2963] * w[5][0];
        sv14[4034] = sv14[2964] * w[5][0];
        sv14[4035] = sv14[2965] * w[5][0];
        sv14[4036] = sv14[2966] * w[5][0];
        sv14[4037] = sv14[2967] * w[5][0];
        sv14[4038] = sv14[2968] * w[5][0];
        sv14[4039] = sv14[2969] * w[5][0];
        sv14[4040] = sv14[2970] * w[5][0];
        sv14[4041] = sv14[2971] * w[5][0];
        sv14[4042] = sv14[2972] * w[5][0];
        sv14[4043] = sv14[2973] * w[5][0];
        sv14[4044] = sv14[2974] * w[5][0];
        sv14[4045] = sv14[2975] * w[5][0];
        sv14[4046] = sv14[2976] * w[5][0];
        sv14[4047] = sv14[2977] * w[5][0];
        sv14[4048] = sv14[2978] * w[5][0];
        sv14[4049] = sv14[2979] * w[5][0];
        sv14[4050] = sv14[2980] * w[5][0];
        sv14[4051] = sv14[2981] * w[5][0];
        sv14[4052] = sv14[2982] * w[5][0];
        sv14[4053] = sv14[2983] * w[5][0];
        sv14[4054] = sv14[2984] * w[5][0];
        sv14[4055] = sv14[2985] * w[5][0];
        sv14[4056] = sv14[2986] * w[5][0];
        sv14[4057] = sv14[2987] * w[5][0];
        sv14[4058] = sv14[2988] * w[5][0];
        sv14[4059] = sv14[2989] * w[5][0];
        sv14[4060] = sv14[2990] * w[5][0];
        sv14[4061] = sv14[2991] * w[5][0];
        sv14[4062] = sv14[2992] * w[5][0];
        sv14[4063] = sv14[2993] * w[5][0];
        sv14[4064] = sv14[2994] * w[5][0];
        sv14[4065] = sv14[2995] * w[5][0];
        sv14[4066] = sv14[2996] * w[5][0];
        sv14[4067] = sv14[2997] * w[5][0];
        sv14[4068] = sv14[2998] * w[5][0];
        sv14[4069] = sv14[2999] * w[5][0];
        sv14[4070] = sv14[3000] * w[5][0];
        sv14[4071] = sv14[3001] * w[5][0];
        sv14[4072] = sv14[3002] * w[5][0];
        sv14[4073] = sv14[3003] * w[5][0];
        sv14[4074] = sv14[3004] * w[5][0];
        sv14[4075] = sv14[3005] * w[5][0];
        sv14[4076] = sv14[3006] * w[5][0];
        sv14[4077] = sv14[3007] * w[5][0];
        sv14[4078] = sv14[3008] * w[5][0];
        sv14[4079] = sv14[3009] * w[5][0];
        sv14[4080] = sv14[3010] * w[5][0];
        sv14[4081] = sv14[3011] * w[5][0];
        sv14[4082] = sv14[3012] * w[5][0];
        sv14[4083] = sv14[3013] * w[5][0];
        sv14[4084] = sv14[3014] * w[5][0];
        sv14[4085] = sv14[3015] * w[5][0];
        sv14[4086] = sv14[3016] * w[5][0];
        sv14[4087] = sv14[3017] * w[5][0];
        sv14[4088] = sv14[3018] * w[5][0];
        sv14[4089] = sv14[3019] * w[5][0];
        sv14[4090] = sv14[3020] * w[5][0];
        sv14[4091] = sv14[3021] * w[5][0];
        sv14[4092] = sv14[3022] * w[5][0];
        sv14[4093] = sv14[3023] * w[5][0];
        sv14[4094] = sv14[3024] * w[5][0];
        sv14[4095] = sv14[3025] * w[5][0];
        sv14[4096] = sv14[4015] * sv14[3767];
        sv14[4097] = sv14[4016] * sv14[3767];
        sv14[4098] = sv14[4017] * sv14[3767];
        sv14[4099] = sv14[4018] * sv14[3767];
        sv14[4100] = sv14[4019] * sv14[3767];
        sv14[4101] = sv14[4020] * sv14[3767];
        sv14[4102] = sv14[4021] * sv14[3767];
        sv14[4103] = sv14[4022] * sv14[3767];
        sv14[4104] = sv14[4023] * sv14[3767];
        sv14[4105] = sv14[4024] * sv14[3767];
        sv14[4106] = sv14[4025] * sv14[3767];
        sv14[4107] = sv14[4026] * sv14[3767];
        sv14[4108] = sv14[4027] * sv14[3767];
        sv14[4109] = sv14[4028] * sv14[3767];
        sv14[4110] = sv14[4029] * sv14[3767];
        sv14[4111] = sv14[4030] * sv14[3767];
        sv14[4112] = sv14[4031] * sv14[3767];
        sv14[4113] = sv14[4032] * sv14[3767];
        sv14[4114] = sv14[4033] * sv14[3767];
        sv14[4115] = sv14[4034] * sv14[3767];
        sv14[4116] = sv14[4035] * sv14[3767];
        sv14[4117] = sv14[4036] * sv14[3767];
        sv14[4118] = sv14[4037] * sv14[3767];
        sv14[4119] = sv14[4038] * sv14[3767];
        sv14[4120] = sv14[4039] * sv14[3767];
        sv14[4121] = sv14[4040] * sv14[3767];
        sv14[4122] = sv14[4041] * sv14[3767];
        sv14[4123] = sv14[4042] * sv14[3767];
        sv14[4124] = sv14[4043] * sv14[3767];
        sv14[4125] = sv14[4044] * sv14[3767];
        sv14[4126] = sv14[4045] * sv14[3767];
        sv14[4127] = sv14[4046] * sv14[3767];
        sv14[4128] = sv14[4047] * sv14[3767];
        sv14[4129] = sv14[4048] * sv14[3767];
        sv14[4130] = sv14[4049] * sv14[3767];
        sv14[4131] = sv14[4050] * sv14[3767];
        sv14[4132] = sv14[4051] * sv14[3767];
        sv14[4133] = sv14[4052] * sv14[3767];
        sv14[4134] = sv14[4053] * sv14[3767];
        sv14[4135] = sv14[4054] * sv14[3767];
        sv14[4136] = sv14[4055] * sv14[3767];
        sv14[4137] = sv14[4056] * sv14[3767];
        sv14[4138] = sv14[4057] * sv14[3767];
        sv14[4139] = sv14[4058] * sv14[3767];
        sv14[4140] = sv14[4059] * sv14[3767];
        sv14[4141] = sv14[4060] * sv14[3767];
        sv14[4142] = sv14[4061] * sv14[3767];
        sv14[4143] = sv14[4062] * sv14[3767];
        sv14[4144] = sv14[4063] * sv14[3767];
        sv14[4145] = sv14[4064] * sv14[3767];
        sv14[4146] = sv14[4065] * sv14[3767];
        sv14[4147] = sv14[4066] * sv14[3767];
        sv14[4148] = sv14[4067] * sv14[3767];
        sv14[4149] = sv14[4068] * sv14[3767];
        sv14[4150] = sv14[4069] * sv14[3767];
        sv14[4151] = sv14[4070] * sv14[3767];
        sv14[4152] = sv14[4071] * sv14[3767];
        sv14[4153] = sv14[4072] * sv14[3767];
        sv14[4154] = sv14[4073] * sv14[3767];
        sv14[4155] = sv14[4074] * sv14[3767];
        sv14[4156] = sv14[4075] * sv14[3767];
        sv14[4157] = sv14[4076] * sv14[3767];
        sv14[4158] = sv14[4077] * sv14[3767];
        sv14[4159] = sv14[4078] * sv14[3767];
        sv14[4160] = sv14[4079] * sv14[3767];
        sv14[4161] = sv14[4080] * sv14[3767];
        sv14[4162] = sv14[4081] * sv14[3767];
        sv14[4163] = sv14[4082] * sv14[3767];
        sv14[4164] = sv14[4083] * sv14[3767];
        sv14[4165] = sv14[4084] * sv14[3767];
        sv14[4166] = sv14[4085] * sv14[3767];
        sv14[4167] = sv14[4086] * sv14[3767];
        sv14[4168] = sv14[4087] * sv14[3767];
        sv14[4169] = sv14[4088] * sv14[3767];
        sv14[4170] = sv14[4089] * sv14[3767];
        sv14[4171] = sv14[4090] * sv14[3767];
        sv14[4172] = sv14[4091] * sv14[3767];
        sv14[4173] = sv14[4092] * sv14[3767];
        sv14[4174] = sv14[4093] * sv14[3767];
        sv14[4175] = sv14[4094] * sv14[3767];
        sv14[4176] = sv14[4095] * sv14[3767];
        sv14[4177] = sv14[3934] + sv14[4096];
        sv14[4178] = sv14[3943] + sv14[4097];
        sv14[4179] = sv14[3952] + sv14[4098];
        sv14[4180] = sv14[3961] + sv14[4099];
        sv14[4181] = sv14[3970] + sv14[4100];
        sv14[4182] = sv14[3979] + sv14[4101];
        sv14[4183] = sv14[3988] + sv14[4102];
        sv14[4184] = sv14[3997] + sv14[4103];
        sv14[4185] = sv14[4006] + sv14[4104];
        sv14[4186] = sv14[3935] + sv14[4105];
        sv14[4187] = sv14[3944] + sv14[4106];
        sv14[4188] = sv14[3953] + sv14[4107];
        sv14[4189] = sv14[3962] + sv14[4108];
        sv14[4190] = sv14[3971] + sv14[4109];
        sv14[4191] = sv14[3980] + sv14[4110];
        sv14[4192] = sv14[3989] + sv14[4111];
        sv14[4193] = sv14[3998] + sv14[4112];
        sv14[4194] = sv14[4007] + sv14[4113];
        sv14[4195] = sv14[3936] + sv14[4114];
        sv14[4196] = sv14[3945] + sv14[4115];
        sv14[4197] = sv14[3954] + sv14[4116];
        sv14[4198] = sv14[3963] + sv14[4117];
        sv14[4199] = sv14[3972] + sv14[4118];
        sv14[4200] = sv14[3981] + sv14[4119];
        sv14[4201] = sv14[3990] + sv14[4120];
        sv14[4202] = sv14[3999] + sv14[4121];
        sv14[4203] = sv14[4008] + sv14[4122];
        sv14[4204] = sv14[3937] + sv14[4123];
        sv14[4205] = sv14[3938] + sv14[4124];
        sv14[4206] = sv14[3939] + sv14[4125];
        sv14[4207] = sv14[3940] + sv14[4126];
        sv14[4208] = sv14[3941] + sv14[4127];
        sv14[4209] = sv14[3942] + sv14[4128];
        sv14[4210] = sv14[3946] + sv14[4129];
        sv14[4211] = sv14[3947] + sv14[4130];
        sv14[4212] = sv14[3948] + sv14[4131];
        sv14[4213] = sv14[3949] + sv14[4132];
        sv14[4214] = sv14[3950] + sv14[4133];
        sv14[4215] = sv14[3951] + sv14[4134];
        sv14[4216] = sv14[3955] + sv14[4135];
        sv14[4217] = sv14[3956] + sv14[4136];
        sv14[4218] = sv14[3957] + sv14[4137];
        sv14[4219] = sv14[3958] + sv14[4138];
        sv14[4220] = sv14[3959] + sv14[4139];
        sv14[4221] = sv14[3960] + sv14[4140];
        sv14[4222] = sv14[3964] + sv14[4141];
        sv14[4223] = sv14[3973] + sv14[4142];
        sv14[4224] = sv14[3982] + sv14[4143];
        sv14[4225] = sv14[3991] + sv14[4144];
        sv14[4226] = sv14[4000] + sv14[4145];
        sv14[4227] = sv14[4009] + sv14[4146];
        sv14[4228] = sv14[3965] + sv14[4147];
        sv14[4229] = sv14[3974] + sv14[4148];
        sv14[4230] = sv14[3983] + sv14[4149];
        sv14[4231] = sv14[3992] + sv14[4150];
        sv14[4232] = sv14[4001] + sv14[4151];
        sv14[4233] = sv14[4010] + sv14[4152];
        sv14[4234] = sv14[3966] + sv14[4153];
        sv14[4235] = sv14[3975] + sv14[4154];
        sv14[4236] = sv14[3984] + sv14[4155];
        sv14[4237] = sv14[3993] + sv14[4156];
        sv14[4238] = sv14[4002] + sv14[4157];
        sv14[4239] = sv14[4011] + sv14[4158];
        sv14[4240] = sv14[3967] + sv14[4159];
        sv14[4241] = sv14[3968] + sv14[4160];
        sv14[4242] = sv14[3969] + sv14[4161];
        sv14[4243] = sv14[3976] + sv14[4162];
        sv14[4244] = sv14[3977] + sv14[4163];
        sv14[4245] = sv14[3978] + sv14[4164];
        sv14[4246] = sv14[3985] + sv14[4165];
        sv14[4247] = sv14[3986] + sv14[4166];
        sv14[4248] = sv14[3987] + sv14[4167];
        sv14[4249] = sv14[3994] + sv14[4168];
        sv14[4250] = sv14[4003] + sv14[4169];
        sv14[4251] = sv14[4012] + sv14[4170];
        sv14[4252] = sv14[3995] + sv14[4171];
        sv14[4253] = sv14[4004] + sv14[4172];
        sv14[4254] = sv14[4013] + sv14[4173];
        sv14[4255] = sv14[3996] + sv14[4174];
        sv14[4256] = sv14[4005] + sv14[4175];
        sv14[4257] = sv14[4014] + sv14[4176];
        sv14[4258] = sv14[4177] * (1.0 / sv14[3777]);
        sv14[4259] = sv14[4178] * (1.0 / sv14[3777]);
        sv14[4260] = sv14[4179] * (1.0 / sv14[3777]);
        sv14[4261] = sv14[4180] * (1.0 / sv14[3777]);
        sv14[4262] = sv14[4181] * (1.0 / sv14[3777]);
        sv14[4263] = sv14[4182] * (1.0 / sv14[3777]);
        sv14[4264] = sv14[4183] * (1.0 / sv14[3777]);
        sv14[4265] = sv14[4184] * (1.0 / sv14[3777]);
        sv14[4266] = sv14[4185] * (1.0 / sv14[3777]);
        sv14[4267] = sv14[4186] * (1.0 / sv14[3777]);
        sv14[4268] = sv14[4187] * (1.0 / sv14[3777]);
        sv14[4269] = sv14[4188] * (1.0 / sv14[3777]);
        sv14[4270] = sv14[4189] * (1.0 / sv14[3777]);
        sv14[4271] = sv14[4190] * (1.0 / sv14[3777]);
        sv14[4272] = sv14[4191] * (1.0 / sv14[3777]);
        sv14[4273] = sv14[4192] * (1.0 / sv14[3777]);
        sv14[4274] = sv14[4193] * (1.0 / sv14[3777]);
        sv14[4275] = sv14[4194] * (1.0 / sv14[3777]);
        sv14[4276] = sv14[4195] * (1.0 / sv14[3777]);
        sv14[4277] = sv14[4196] * (1.0 / sv14[3777]);
        sv14[4278] = sv14[4197] * (1.0 / sv14[3777]);
        sv14[4279] = sv14[4198] * (1.0 / sv14[3777]);
        sv14[4280] = sv14[4199] * (1.0 / sv14[3777]);
        sv14[4281] = sv14[4200] * (1.0 / sv14[3777]);
        sv14[4282] = sv14[4201] * (1.0 / sv14[3777]);
        sv14[4283] = sv14[4202] * (1.0 / sv14[3777]);
        sv14[4284] = sv14[4203] * (1.0 / sv14[3777]);
        sv14[4285] = sv14[4204] * (1.0 / sv14[3777]);
        sv14[4286] = sv14[4205] * (1.0 / sv14[3777]);
        sv14[4287] = sv14[4206] * (1.0 / sv14[3777]);
        sv14[4288] = sv14[4207] * (1.0 / sv14[3777]);
        sv14[4289] = sv14[4208] * (1.0 / sv14[3777]);
        sv14[4290] = sv14[4209] * (1.0 / sv14[3777]);
        sv14[4291] = sv14[4210] * (1.0 / sv14[3777]);
        sv14[4292] = sv14[4211] * (1.0 / sv14[3777]);
        sv14[4293] = sv14[4212] * (1.0 / sv14[3777]);
        sv14[4294] = sv14[4213] * (1.0 / sv14[3777]);
        sv14[4295] = sv14[4214] * (1.0 / sv14[3777]);
        sv14[4296] = sv14[4215] * (1.0 / sv14[3777]);
        sv14[4297] = sv14[4216] * (1.0 / sv14[3777]);
        sv14[4298] = sv14[4217] * (1.0 / sv14[3777]);
        sv14[4299] = sv14[4218] * (1.0 / sv14[3777]);
        sv14[4300] = sv14[4219] * (1.0 / sv14[3777]);
        sv14[4301] = sv14[4220] * (1.0 / sv14[3777]);
        sv14[4302] = sv14[4221] * (1.0 / sv14[3777]);
        sv14[4303] = sv14[4222] * (1.0 / sv14[3777]);
        sv14[4304] = sv14[4223] * (1.0 / sv14[3777]);
        sv14[4305] = sv14[4224] * (1.0 / sv14[3777]);
        sv14[4306] = sv14[4225] * (1.0 / sv14[3777]);
        sv14[4307] = sv14[4226] * (1.0 / sv14[3777]);
        sv14[4308] = sv14[4227] * (1.0 / sv14[3777]);
        sv14[4309] = sv14[4228] * (1.0 / sv14[3777]);
        sv14[4310] = sv14[4229] * (1.0 / sv14[3777]);
        sv14[4311] = sv14[4230] * (1.0 / sv14[3777]);
        sv14[4312] = sv14[4231] * (1.0 / sv14[3777]);
        sv14[4313] = sv14[4232] * (1.0 / sv14[3777]);
        sv14[4314] = sv14[4233] * (1.0 / sv14[3777]);
        sv14[4315] = sv14[4234] * (1.0 / sv14[3777]);
        sv14[4316] = sv14[4235] * (1.0 / sv14[3777]);
        sv14[4317] = sv14[4236] * (1.0 / sv14[3777]);
        sv14[4318] = sv14[4237] * (1.0 / sv14[3777]);
        sv14[4319] = sv14[4238] * (1.0 / sv14[3777]);
        sv14[4320] = sv14[4239] * (1.0 / sv14[3777]);
        sv14[4321] = sv14[4240] * (1.0 / sv14[3777]);
        sv14[4322] = sv14[4241] * (1.0 / sv14[3777]);
        sv14[4323] = sv14[4242] * (1.0 / sv14[3777]);
        sv14[4324] = sv14[4243] * (1.0 / sv14[3777]);
        sv14[4325] = sv14[4244] * (1.0 / sv14[3777]);
        sv14[4326] = sv14[4245] * (1.0 / sv14[3777]);
        sv14[4327] = sv14[4246] * (1.0 / sv14[3777]);
        sv14[4328] = sv14[4247] * (1.0 / sv14[3777]);
        sv14[4329] = sv14[4248] * (1.0 / sv14[3777]);
        sv14[4330] = sv14[4249] * (1.0 / sv14[3777]);
        sv14[4331] = sv14[4250] * (1.0 / sv14[3777]);
        sv14[4332] = sv14[4251] * (1.0 / sv14[3777]);
        sv14[4333] = sv14[4252] * (1.0 / sv14[3777]);
        sv14[4334] = sv14[4253] * (1.0 / sv14[3777]);
        sv14[4335] = sv14[4254] * (1.0 / sv14[3777]);
        sv14[4336] = sv14[4255] * (1.0 / sv14[3777]);
        sv14[4337] = sv14[4256] * (1.0 / sv14[3777]);
        sv14[4338] = sv14[4257] * (1.0 / sv14[3777]);
        sv14[4339] = sv14[3768] * sv14[3787];
        sv14[4340] = sv14[3768] * sv14[3788];
        sv14[4341] = sv14[3768] * sv14[3789];
        sv14[4342] = sv14[3768] * sv14[3790];
        sv14[4343] = sv14[3768] * sv14[3791];
        sv14[4344] = sv14[3768] * sv14[3792];
        sv14[4345] = sv14[3768] * sv14[3793];
        sv14[4346] = sv14[3768] * sv14[3794];
        sv14[4347] = sv14[3768] * sv14[3795];
        sv14[4348] = sv14[3769] * sv14[3787];
        sv14[4349] = sv14[3769] * sv14[3788];
        sv14[4350] = sv14[3769] * sv14[3789];
        sv14[4351] = sv14[3769] * sv14[3790];
        sv14[4352] = sv14[3769] * sv14[3791];
        sv14[4353] = sv14[3769] * sv14[3792];
        sv14[4354] = sv14[3769] * sv14[3793];
        sv14[4355] = sv14[3769] * sv14[3794];
        sv14[4356] = sv14[3769] * sv14[3795];
        sv14[4357] = sv14[3770] * sv14[3787];
        sv14[4358] = sv14[3770] * sv14[3788];
        sv14[4359] = sv14[3770] * sv14[3789];
        sv14[4360] = sv14[3770] * sv14[3790];
        sv14[4361] = sv14[3770] * sv14[3791];
        sv14[4362] = sv14[3770] * sv14[3792];
        sv14[4363] = sv14[3770] * sv14[3793];
        sv14[4364] = sv14[3770] * sv14[3794];
        sv14[4365] = sv14[3770] * sv14[3795];
        sv14[4366] = sv14[3771] * sv14[3787];
        sv14[4367] = sv14[3771] * sv14[3788];
        sv14[4368] = sv14[3771] * sv14[3789];
        sv14[4369] = sv14[3771] * sv14[3790];
        sv14[4370] = sv14[3771] * sv14[3791];
        sv14[4371] = sv14[3771] * sv14[3792];
        sv14[4372] = sv14[3771] * sv14[3793];
        sv14[4373] = sv14[3771] * sv14[3794];
        sv14[4374] = sv14[3771] * sv14[3795];
        sv14[4375] = sv14[3772] * sv14[3787];
        sv14[4376] = sv14[3772] * sv14[3788];
        sv14[4377] = sv14[3772] * sv14[3789];
        sv14[4378] = sv14[3772] * sv14[3790];
        sv14[4379] = sv14[3772] * sv14[3791];
        sv14[4380] = sv14[3772] * sv14[3792];
        sv14[4381] = sv14[3772] * sv14[3793];
        sv14[4382] = sv14[3772] * sv14[3794];
        sv14[4383] = sv14[3772] * sv14[3795];
        sv14[4384] = sv14[3773] * sv14[3787];
        sv14[4385] = sv14[3773] * sv14[3788];
        sv14[4386] = sv14[3773] * sv14[3789];
        sv14[4387] = sv14[3773] * sv14[3790];
        sv14[4388] = sv14[3773] * sv14[3791];
        sv14[4389] = sv14[3773] * sv14[3792];
        sv14[4390] = sv14[3773] * sv14[3793];
        sv14[4391] = sv14[3773] * sv14[3794];
        sv14[4392] = sv14[3773] * sv14[3795];
        sv14[4393] = sv14[3774] * sv14[3787];
        sv14[4394] = sv14[3774] * sv14[3788];
        sv14[4395] = sv14[3774] * sv14[3789];
        sv14[4396] = sv14[3774] * sv14[3790];
        sv14[4397] = sv14[3774] * sv14[3791];
        sv14[4398] = sv14[3774] * sv14[3792];
        sv14[4399] = sv14[3774] * sv14[3793];
        sv14[4400] = sv14[3774] * sv14[3794];
        sv14[4401] = sv14[3774] * sv14[3795];
        sv14[4402] = sv14[3775] * sv14[3787];
        sv14[4403] = sv14[3775] * sv14[3788];
        sv14[4404] = sv14[3775] * sv14[3789];
        sv14[4405] = sv14[3775] * sv14[3790];
        sv14[4406] = sv14[3775] * sv14[3791];
        sv14[4407] = sv14[3775] * sv14[3792];
        sv14[4408] = sv14[3775] * sv14[3793];
        sv14[4409] = sv14[3775] * sv14[3794];
        sv14[4410] = sv14[3775] * sv14[3795];
        sv14[4411] = sv14[3776] * sv14[3787];
        sv14[4412] = sv14[3776] * sv14[3788];
        sv14[4413] = sv14[3776] * sv14[3789];
        sv14[4414] = sv14[3776] * sv14[3790];
        sv14[4415] = sv14[3776] * sv14[3791];
        sv14[4416] = sv14[3776] * sv14[3792];
        sv14[4417] = sv14[3776] * sv14[3793];
        sv14[4418] = sv14[3776] * sv14[3794];
        sv14[4419] = sv14[3776] * sv14[3795];
        sv14[4420] = sv14[4258] + sv14[4339];
        sv14[4421] = sv14[4259] + sv14[4340];
        sv14[4422] = sv14[4260] + sv14[4341];
        sv14[4423] = sv14[4261] + sv14[4342];
        sv14[4424] = sv14[4262] + sv14[4343];
        sv14[4425] = sv14[4263] + sv14[4344];
        sv14[4426] = sv14[4264] + sv14[4345];
        sv14[4427] = sv14[4265] + sv14[4346];
        sv14[4428] = sv14[4266] + sv14[4347];
        sv14[4429] = sv14[4267] + sv14[4348];
        sv14[4430] = sv14[4268] + sv14[4349];
        sv14[4431] = sv14[4269] + sv14[4350];
        sv14[4432] = sv14[4270] + sv14[4351];
        sv14[4433] = sv14[4271] + sv14[4352];
        sv14[4434] = sv14[4272] + sv14[4353];
        sv14[4435] = sv14[4273] + sv14[4354];
        sv14[4436] = sv14[4274] + sv14[4355];
        sv14[4437] = sv14[4275] + sv14[4356];
        sv14[4438] = sv14[4276] + sv14[4357];
        sv14[4439] = sv14[4277] + sv14[4358];
        sv14[4440] = sv14[4278] + sv14[4359];
        sv14[4441] = sv14[4279] + sv14[4360];
        sv14[4442] = sv14[4280] + sv14[4361];
        sv14[4443] = sv14[4281] + sv14[4362];
        sv14[4444] = sv14[4282] + sv14[4363];
        sv14[4445] = sv14[4283] + sv14[4364];
        sv14[4446] = sv14[4284] + sv14[4365];
        sv14[4447] = sv14[4285] + sv14[4366];
        sv14[4448] = sv14[4286] + sv14[4375];
        sv14[4449] = sv14[4287] + sv14[4384];
        sv14[4450] = sv14[4288] + sv14[4393];
        sv14[4451] = sv14[4289] + sv14[4402];
        sv14[4452] = sv14[4290] + sv14[4411];
        sv14[4453] = sv14[4291] + sv14[4367];
        sv14[4454] = sv14[4292] + sv14[4376];
        sv14[4455] = sv14[4293] + sv14[4385];
        sv14[4456] = sv14[4294] + sv14[4394];
        sv14[4457] = sv14[4295] + sv14[4403];
        sv14[4458] = sv14[4296] + sv14[4412];
        sv14[4459] = sv14[4297] + sv14[4368];
        sv14[4460] = sv14[4298] + sv14[4377];
        sv14[4461] = sv14[4299] + sv14[4386];
        sv14[4462] = sv14[4300] + sv14[4395];
        sv14[4463] = sv14[4301] + sv14[4404];
        sv14[4464] = sv14[4302] + sv14[4413];
        sv14[4465] = sv14[4303] + sv14[4369];
        sv14[4466] = sv14[4304] + sv14[4370];
        sv14[4467] = sv14[4305] + sv14[4371];
        sv14[4468] = sv14[4306] + sv14[4372];
        sv14[4469] = sv14[4307] + sv14[4373];
        sv14[4470] = sv14[4308] + sv14[4374];
        sv14[4471] = sv14[4309] + sv14[4378];
        sv14[4472] = sv14[4310] + sv14[4379];
        sv14[4473] = sv14[4311] + sv14[4380];
        sv14[4474] = sv14[4312] + sv14[4381];
        sv14[4475] = sv14[4313] + sv14[4382];
        sv14[4476] = sv14[4314] + sv14[4383];
        sv14[4477] = sv14[4315] + sv14[4387];
        sv14[4478] = sv14[4316] + sv14[4388];
        sv14[4479] = sv14[4317] + sv14[4389];
        sv14[4480] = sv14[4318] + sv14[4390];
        sv14[4481] = sv14[4319] + sv14[4391];
        sv14[4482] = sv14[4320] + sv14[4392];
        sv14[4483] = sv14[4321] + sv14[4396];
        sv14[4484] = sv14[4322] + sv14[4405];
        sv14[4485] = sv14[4323] + sv14[4414];
        sv14[4486] = sv14[4324] + sv14[4397];
        sv14[4487] = sv14[4325] + sv14[4406];
        sv14[4488] = sv14[4326] + sv14[4415];
        sv14[4489] = sv14[4327] + sv14[4398];
        sv14[4490] = sv14[4328] + sv14[4407];
        sv14[4491] = sv14[4329] + sv14[4416];
        sv14[4492] = sv14[4330] + sv14[4399];
        sv14[4493] = sv14[4331] + sv14[4400];
        sv14[4494] = sv14[4332] + sv14[4401];
        sv14[4495] = sv14[4333] + sv14[4408];
        sv14[4496] = sv14[4334] + sv14[4409];
        sv14[4497] = sv14[4335] + sv14[4410];
        sv14[4498] = sv14[4336] + sv14[4417];
        sv14[4499] = sv14[4337] + sv14[4418];
        sv14[4500] = sv14[4338] + sv14[4419];
        sv14[4501] = -1 * sv14[4420] + -1 * sv14[4339];
        sv14[4502] = -1 * sv14[4421] + -1 * sv14[4348];
        sv14[4503] = -1 * sv14[4422] + -1 * sv14[4357];
        sv14[4504] = -1 * sv14[4423] + -1 * sv14[4366];
        sv14[4505] = -1 * sv14[4424] + -1 * sv14[4375];
        sv14[4506] = -1 * sv14[4425] + -1 * sv14[4384];
        sv14[4507] = -1 * sv14[4426] + -1 * sv14[4393];
        sv14[4508] = -1 * sv14[4427] + -1 * sv14[4402];
        sv14[4509] = -1 * sv14[4428] + -1 * sv14[4411];
        sv14[4510] = -1 * sv14[4429] + -1 * sv14[4340];
        sv14[4511] = -1 * sv14[4430] + -1 * sv14[4349];
        sv14[4512] = -1 * sv14[4431] + -1 * sv14[4358];
        sv14[4513] = -1 * sv14[4432] + -1 * sv14[4367];
        sv14[4514] = -1 * sv14[4433] + -1 * sv14[4376];
        sv14[4515] = -1 * sv14[4434] + -1 * sv14[4385];
        sv14[4516] = -1 * sv14[4435] + -1 * sv14[4394];
        sv14[4517] = -1 * sv14[4436] + -1 * sv14[4403];
        sv14[4518] = -1 * sv14[4437] + -1 * sv14[4412];
        sv14[4519] = -1 * sv14[4438] + -1 * sv14[4341];
        sv14[4520] = -1 * sv14[4439] + -1 * sv14[4350];
        sv14[4521] = -1 * sv14[4440] + -1 * sv14[4359];
        sv14[4522] = -1 * sv14[4441] + -1 * sv14[4368];
        sv14[4523] = -1 * sv14[4442] + -1 * sv14[4377];
        sv14[4524] = -1 * sv14[4443] + -1 * sv14[4386];
        sv14[4525] = -1 * sv14[4444] + -1 * sv14[4395];
        sv14[4526] = -1 * sv14[4445] + -1 * sv14[4404];
        sv14[4527] = -1 * sv14[4446] + -1 * sv14[4413];
        sv14[4528] = -1 * sv14[4447] + -1 * sv14[4342];
        sv14[4529] = -1 * sv14[4448] + -1 * sv14[4343];
        sv14[4530] = -1 * sv14[4449] + -1 * sv14[4344];
        sv14[4531] = -1 * sv14[4450] + -1 * sv14[4345];
        sv14[4532] = -1 * sv14[4451] + -1 * sv14[4346];
        sv14[4533] = -1 * sv14[4452] + -1 * sv14[4347];
        sv14[4534] = -1 * sv14[4453] + -1 * sv14[4351];
        sv14[4535] = -1 * sv14[4454] + -1 * sv14[4352];
        sv14[4536] = -1 * sv14[4455] + -1 * sv14[4353];
        sv14[4537] = -1 * sv14[4456] + -1 * sv14[4354];
        sv14[4538] = -1 * sv14[4457] + -1 * sv14[4355];
        sv14[4539] = -1 * sv14[4458] + -1 * sv14[4356];
        sv14[4540] = -1 * sv14[4459] + -1 * sv14[4360];
        sv14[4541] = -1 * sv14[4460] + -1 * sv14[4361];
        sv14[4542] = -1 * sv14[4461] + -1 * sv14[4362];
        sv14[4543] = -1 * sv14[4462] + -1 * sv14[4363];
        sv14[4544] = -1 * sv14[4463] + -1 * sv14[4364];
        sv14[4545] = -1 * sv14[4464] + -1 * sv14[4365];
        sv14[4546] = -1 * sv14[4465] + -1 * sv14[4369];
        sv14[4547] = -1 * sv14[4466] + -1 * sv14[4378];
        sv14[4548] = -1 * sv14[4467] + -1 * sv14[4387];
        sv14[4549] = -1 * sv14[4468] + -1 * sv14[4396];
        sv14[4550] = -1 * sv14[4469] + -1 * sv14[4405];
        sv14[4551] = -1 * sv14[4470] + -1 * sv14[4414];
        sv14[4552] = -1 * sv14[4471] + -1 * sv14[4370];
        sv14[4553] = -1 * sv14[4472] + -1 * sv14[4379];
        sv14[4554] = -1 * sv14[4473] + -1 * sv14[4388];
        sv14[4555] = -1 * sv14[4474] + -1 * sv14[4397];
        sv14[4556] = -1 * sv14[4475] + -1 * sv14[4406];
        sv14[4557] = -1 * sv14[4476] + -1 * sv14[4415];
        sv14[4558] = -1 * sv14[4477] + -1 * sv14[4371];
        sv14[4559] = -1 * sv14[4478] + -1 * sv14[4380];
        sv14[4560] = -1 * sv14[4479] + -1 * sv14[4389];
        sv14[4561] = -1 * sv14[4480] + -1 * sv14[4398];
        sv14[4562] = -1 * sv14[4481] + -1 * sv14[4407];
        sv14[4563] = -1 * sv14[4482] + -1 * sv14[4416];
        sv14[4564] = -1 * sv14[4483] + -1 * sv14[4372];
        sv14[4565] = -1 * sv14[4484] + -1 * sv14[4373];
        sv14[4566] = -1 * sv14[4485] + -1 * sv14[4374];
        sv14[4567] = -1 * sv14[4486] + -1 * sv14[4381];
        sv14[4568] = -1 * sv14[4487] + -1 * sv14[4382];
        sv14[4569] = -1 * sv14[4488] + -1 * sv14[4383];
        sv14[4570] = -1 * sv14[4489] + -1 * sv14[4390];
        sv14[4571] = -1 * sv14[4490] + -1 * sv14[4391];
        sv14[4572] = -1 * sv14[4491] + -1 * sv14[4392];
        sv14[4573] = -1 * sv14[4492] + -1 * sv14[4399];
        sv14[4574] = -1 * sv14[4493] + -1 * sv14[4408];
        sv14[4575] = -1 * sv14[4494] + -1 * sv14[4417];
        sv14[4576] = -1 * sv14[4495] + -1 * sv14[4400];
        sv14[4577] = -1 * sv14[4496] + -1 * sv14[4409];
        sv14[4578] = -1 * sv14[4497] + -1 * sv14[4418];
        sv14[4579] = -1 * sv14[4498] + -1 * sv14[4401];
        sv14[4580] = -1 * sv14[4499] + -1 * sv14[4410];
        sv14[4581] = -1 * sv14[4500] + -1 * sv14[4419];
        sv14[4582] = sv14[4501] / sv14[3777];
        sv14[4583] = sv14[4502] / sv14[3777];
        sv14[4584] = sv14[4503] / sv14[3777];
        sv14[4585] = sv14[4504] / sv14[3777];
        sv14[4586] = sv14[4505] / sv14[3777];
        sv14[4587] = sv14[4506] / sv14[3777];
        sv14[4588] = sv14[4507] / sv14[3777];
        sv14[4589] = sv14[4508] / sv14[3777];
        sv14[4590] = sv14[4509] / sv14[3777];
        sv14[4591] = sv14[4510] / sv14[3777];
        sv14[4592] = sv14[4511] / sv14[3777];
        sv14[4593] = sv14[4512] / sv14[3777];
        sv14[4594] = sv14[4513] / sv14[3777];
        sv14[4595] = sv14[4514] / sv14[3777];
        sv14[4596] = sv14[4515] / sv14[3777];
        sv14[4597] = sv14[4516] / sv14[3777];
        sv14[4598] = sv14[4517] / sv14[3777];
        sv14[4599] = sv14[4518] / sv14[3777];
        sv14[4600] = sv14[4519] / sv14[3777];
        sv14[4601] = sv14[4520] / sv14[3777];
        sv14[4602] = sv14[4521] / sv14[3777];
        sv14[4603] = sv14[4522] / sv14[3777];
        sv14[4604] = sv14[4523] / sv14[3777];
        sv14[4605] = sv14[4524] / sv14[3777];
        sv14[4606] = sv14[4525] / sv14[3777];
        sv14[4607] = sv14[4526] / sv14[3777];
        sv14[4608] = sv14[4527] / sv14[3777];
        sv14[4609] = sv14[4528] / sv14[3777];
        sv14[4610] = sv14[4529] / sv14[3777];
        sv14[4611] = sv14[4530] / sv14[3777];
        sv14[4612] = sv14[4531] / sv14[3777];
        sv14[4613] = sv14[4532] / sv14[3777];
        sv14[4614] = sv14[4533] / sv14[3777];
        sv14[4615] = sv14[4534] / sv14[3777];
        sv14[4616] = sv14[4535] / sv14[3777];
        sv14[4617] = sv14[4536] / sv14[3777];
        sv14[4618] = sv14[4537] / sv14[3777];
        sv14[4619] = sv14[4538] / sv14[3777];
        sv14[4620] = sv14[4539] / sv14[3777];
        sv14[4621] = sv14[4540] / sv14[3777];
        sv14[4622] = sv14[4541] / sv14[3777];
        sv14[4623] = sv14[4542] / sv14[3777];
        sv14[4624] = sv14[4543] / sv14[3777];
        sv14[4625] = sv14[4544] / sv14[3777];
        sv14[4626] = sv14[4545] / sv14[3777];
        sv14[4627] = sv14[4546] / sv14[3777];
        sv14[4628] = sv14[4547] / sv14[3777];
        sv14[4629] = sv14[4548] / sv14[3777];
        sv14[4630] = sv14[4549] / sv14[3777];
        sv14[4631] = sv14[4550] / sv14[3777];
        sv14[4632] = sv14[4551] / sv14[3777];
        sv14[4633] = sv14[4552] / sv14[3777];
        sv14[4634] = sv14[4553] / sv14[3777];
        sv14[4635] = sv14[4554] / sv14[3777];
        sv14[4636] = sv14[4555] / sv14[3777];
        sv14[4637] = sv14[4556] / sv14[3777];
        sv14[4638] = sv14[4557] / sv14[3777];
        sv14[4639] = sv14[4558] / sv14[3777];
        sv14[4640] = sv14[4559] / sv14[3777];
        sv14[4641] = sv14[4560] / sv14[3777];
        sv14[4642] = sv14[4561] / sv14[3777];
        sv14[4643] = sv14[4562] / sv14[3777];
        sv14[4644] = sv14[4563] / sv14[3777];
        sv14[4645] = sv14[4564] / sv14[3777];
        sv14[4646] = sv14[4565] / sv14[3777];
        sv14[4647] = sv14[4566] / sv14[3777];
        sv14[4648] = sv14[4567] / sv14[3777];
        sv14[4649] = sv14[4568] / sv14[3777];
        sv14[4650] = sv14[4569] / sv14[3777];
        sv14[4651] = sv14[4570] / sv14[3777];
        sv14[4652] = sv14[4571] / sv14[3777];
        sv14[4653] = sv14[4572] / sv14[3777];
        sv14[4654] = sv14[4573] / sv14[3777];
        sv14[4655] = sv14[4574] / sv14[3777];
        sv14[4656] = sv14[4575] / sv14[3777];
        sv14[4657] = sv14[4576] / sv14[3777];
        sv14[4658] = sv14[4577] / sv14[3777];
        sv14[4659] = sv14[4578] / sv14[3777];
        sv14[4660] = sv14[4579] / sv14[3777];
        sv14[4661] = sv14[4580] / sv14[3777];
        sv14[4662] = sv14[4581] / sv14[3777];
        sv14[4663] = sv14[4177] + sv14[4582];
        sv14[4664] = sv14[4178] + sv14[4583];
        sv14[4665] = sv14[4179] + sv14[4584];
        sv14[4666] = sv14[4180] + sv14[4585];
        sv14[4667] = sv14[4181] + sv14[4586];
        sv14[4668] = sv14[4182] + sv14[4587];
        sv14[4669] = sv14[4183] + sv14[4588];
        sv14[4670] = sv14[4184] + sv14[4589];
        sv14[4671] = sv14[4185] + sv14[4590];
        sv14[4672] = sv14[4186] + sv14[4591];
        sv14[4673] = sv14[4187] + sv14[4592];
        sv14[4674] = sv14[4188] + sv14[4593];
        sv14[4675] = sv14[4189] + sv14[4594];
        sv14[4676] = sv14[4190] + sv14[4595];
        sv14[4677] = sv14[4191] + sv14[4596];
        sv14[4678] = sv14[4192] + sv14[4597];
        sv14[4679] = sv14[4193] + sv14[4598];
        sv14[4680] = sv14[4194] + sv14[4599];
        sv14[4681] = sv14[4195] + sv14[4600];
        sv14[4682] = sv14[4196] + sv14[4601];
        sv14[4683] = sv14[4197] + sv14[4602];
        sv14[4684] = sv14[4198] + sv14[4603];
        sv14[4685] = sv14[4199] + sv14[4604];
        sv14[4686] = sv14[4200] + sv14[4605];
        sv14[4687] = sv14[4201] + sv14[4606];
        sv14[4688] = sv14[4202] + sv14[4607];
        sv14[4689] = sv14[4203] + sv14[4608];
        sv14[4690] = sv14[4204] + sv14[4609];
        sv14[4691] = sv14[4205] + sv14[4610];
        sv14[4692] = sv14[4206] + sv14[4611];
        sv14[4693] = sv14[4207] + sv14[4612];
        sv14[4694] = sv14[4208] + sv14[4613];
        sv14[4695] = sv14[4209] + sv14[4614];
        sv14[4696] = sv14[4210] + sv14[4615];
        sv14[4697] = sv14[4211] + sv14[4616];
        sv14[4698] = sv14[4212] + sv14[4617];
        sv14[4699] = sv14[4213] + sv14[4618];
        sv14[4700] = sv14[4214] + sv14[4619];
        sv14[4701] = sv14[4215] + sv14[4620];
        sv14[4702] = sv14[4216] + sv14[4621];
        sv14[4703] = sv14[4217] + sv14[4622];
        sv14[4704] = sv14[4218] + sv14[4623];
        sv14[4705] = sv14[4219] + sv14[4624];
        sv14[4706] = sv14[4220] + sv14[4625];
        sv14[4707] = sv14[4221] + sv14[4626];
        sv14[4708] = sv14[4222] + sv14[4627];
        sv14[4709] = sv14[4223] + sv14[4628];
        sv14[4710] = sv14[4224] + sv14[4629];
        sv14[4711] = sv14[4225] + sv14[4630];
        sv14[4712] = sv14[4226] + sv14[4631];
        sv14[4713] = sv14[4227] + sv14[4632];
        sv14[4714] = sv14[4228] + sv14[4633];
        sv14[4715] = sv14[4229] + sv14[4634];
        sv14[4716] = sv14[4230] + sv14[4635];
        sv14[4717] = sv14[4231] + sv14[4636];
        sv14[4718] = sv14[4232] + sv14[4637];
        sv14[4719] = sv14[4233] + sv14[4638];
        sv14[4720] = sv14[4234] + sv14[4639];
        sv14[4721] = sv14[4235] + sv14[4640];
        sv14[4722] = sv14[4236] + sv14[4641];
        sv14[4723] = sv14[4237] + sv14[4642];
        sv14[4724] = sv14[4238] + sv14[4643];
        sv14[4725] = sv14[4239] + sv14[4644];
        sv14[4726] = sv14[4240] + sv14[4645];
        sv14[4727] = sv14[4241] + sv14[4646];
        sv14[4728] = sv14[4242] + sv14[4647];
        sv14[4729] = sv14[4243] + sv14[4648];
        sv14[4730] = sv14[4244] + sv14[4649];
        sv14[4731] = sv14[4245] + sv14[4650];
        sv14[4732] = sv14[4246] + sv14[4651];
        sv14[4733] = sv14[4247] + sv14[4652];
        sv14[4734] = sv14[4248] + sv14[4653];
        sv14[4735] = sv14[4249] + sv14[4654];
        sv14[4736] = sv14[4250] + sv14[4655];
        sv14[4737] = sv14[4251] + sv14[4656];
        sv14[4738] = sv14[4252] + sv14[4657];
        sv14[4739] = sv14[4253] + sv14[4658];
        sv14[4740] = sv14[4254] + sv14[4659];
        sv14[4741] = sv14[4255] + sv14[4660];
        sv14[4742] = sv14[4256] + sv14[4661];
        sv14[4743] = sv14[4257] + sv14[4662];
        sv14[4744] = sv14[4663] * w[6][0];
        sv14[4745] = sv14[4664] * w[6][0];
        sv14[4746] = sv14[4665] * w[6][0];
        sv14[4747] = sv14[4666] * w[6][0];
        sv14[4748] = sv14[4667] * w[6][0];
        sv14[4749] = sv14[4668] * w[6][0];
        sv14[4750] = sv14[4669] * w[6][0];
        sv14[4751] = sv14[4670] * w[6][0];
        sv14[4752] = sv14[4671] * w[6][0];
        sv14[4753] = sv14[4672] * w[6][0];
        sv14[4754] = sv14[4673] * w[6][0];
        sv14[4755] = sv14[4674] * w[6][0];
        sv14[4756] = sv14[4675] * w[6][0];
        sv14[4757] = sv14[4676] * w[6][0];
        sv14[4758] = sv14[4677] * w[6][0];
        sv14[4759] = sv14[4678] * w[6][0];
        sv14[4760] = sv14[4679] * w[6][0];
        sv14[4761] = sv14[4680] * w[6][0];
        sv14[4762] = sv14[4681] * w[6][0];
        sv14[4763] = sv14[4682] * w[6][0];
        sv14[4764] = sv14[4683] * w[6][0];
        sv14[4765] = sv14[4684] * w[6][0];
        sv14[4766] = sv14[4685] * w[6][0];
        sv14[4767] = sv14[4686] * w[6][0];
        sv14[4768] = sv14[4687] * w[6][0];
        sv14[4769] = sv14[4688] * w[6][0];
        sv14[4770] = sv14[4689] * w[6][0];
        sv14[4771] = sv14[4690] * w[6][0];
        sv14[4772] = sv14[4691] * w[6][0];
        sv14[4773] = sv14[4692] * w[6][0];
        sv14[4774] = sv14[4693] * w[6][0];
        sv14[4775] = sv14[4694] * w[6][0];
        sv14[4776] = sv14[4695] * w[6][0];
        sv14[4777] = sv14[4696] * w[6][0];
        sv14[4778] = sv14[4697] * w[6][0];
        sv14[4779] = sv14[4698] * w[6][0];
        sv14[4780] = sv14[4699] * w[6][0];
        sv14[4781] = sv14[4700] * w[6][0];
        sv14[4782] = sv14[4701] * w[6][0];
        sv14[4783] = sv14[4702] * w[6][0];
        sv14[4784] = sv14[4703] * w[6][0];
        sv14[4785] = sv14[4704] * w[6][0];
        sv14[4786] = sv14[4705] * w[6][0];
        sv14[4787] = sv14[4706] * w[6][0];
        sv14[4788] = sv14[4707] * w[6][0];
        sv14[4789] = sv14[4708] * w[6][0];
        sv14[4790] = sv14[4709] * w[6][0];
        sv14[4791] = sv14[4710] * w[6][0];
        sv14[4792] = sv14[4711] * w[6][0];
        sv14[4793] = sv14[4712] * w[6][0];
        sv14[4794] = sv14[4713] * w[6][0];
        sv14[4795] = sv14[4714] * w[6][0];
        sv14[4796] = sv14[4715] * w[6][0];
        sv14[4797] = sv14[4716] * w[6][0];
        sv14[4798] = sv14[4717] * w[6][0];
        sv14[4799] = sv14[4718] * w[6][0];
        sv14[4800] = sv14[4719] * w[6][0];
        sv14[4801] = sv14[4720] * w[6][0];
        sv14[4802] = sv14[4721] * w[6][0];
        sv14[4803] = sv14[4722] * w[6][0];
        sv14[4804] = sv14[4723] * w[6][0];
        sv14[4805] = sv14[4724] * w[6][0];
        sv14[4806] = sv14[4725] * w[6][0];
        sv14[4807] = sv14[4726] * w[6][0];
        sv14[4808] = sv14[4727] * w[6][0];
        sv14[4809] = sv14[4728] * w[6][0];
        sv14[4810] = sv14[4729] * w[6][0];
        sv14[4811] = sv14[4730] * w[6][0];
        sv14[4812] = sv14[4731] * w[6][0];
        sv14[4813] = sv14[4732] * w[6][0];
        sv14[4814] = sv14[4733] * w[6][0];
        sv14[4815] = sv14[4734] * w[6][0];
        sv14[4816] = sv14[4735] * w[6][0];
        sv14[4817] = sv14[4736] * w[6][0];
        sv14[4818] = sv14[4737] * w[6][0];
        sv14[4819] = sv14[4738] * w[6][0];
        sv14[4820] = sv14[4739] * w[6][0];
        sv14[4821] = sv14[4740] * w[6][0];
        sv14[4822] = sv14[4741] * w[6][0];
        sv14[4823] = sv14[4742] * w[6][0];
        sv14[4824] = sv14[4743] * w[6][0];
        sv14[4825] = std::pow(-2.0 + sv14[3814], -1 + w[6][0]);
        sv14[4826] = sv14[4744] * sv14[4825];
        sv14[4827] = sv14[4745] * sv14[4825];
        sv14[4828] = sv14[4746] * sv14[4825];
        sv14[4829] = sv14[4747] * sv14[4825];
        sv14[4830] = sv14[4748] * sv14[4825];
        sv14[4831] = sv14[4749] * sv14[4825];
        sv14[4832] = sv14[4750] * sv14[4825];
        sv14[4833] = sv14[4751] * sv14[4825];
        sv14[4834] = sv14[4752] * sv14[4825];
        sv14[4835] = sv14[4753] * sv14[4825];
        sv14[4836] = sv14[4754] * sv14[4825];
        sv14[4837] = sv14[4755] * sv14[4825];
        sv14[4838] = sv14[4756] * sv14[4825];
        sv14[4839] = sv14[4757] * sv14[4825];
        sv14[4840] = sv14[4758] * sv14[4825];
        sv14[4841] = sv14[4759] * sv14[4825];
        sv14[4842] = sv14[4760] * sv14[4825];
        sv14[4843] = sv14[4761] * sv14[4825];
        sv14[4844] = sv14[4762] * sv14[4825];
        sv14[4845] = sv14[4763] * sv14[4825];
        sv14[4846] = sv14[4764] * sv14[4825];
        sv14[4847] = sv14[4765] * sv14[4825];
        sv14[4848] = sv14[4766] * sv14[4825];
        sv14[4849] = sv14[4767] * sv14[4825];
        sv14[4850] = sv14[4768] * sv14[4825];
        sv14[4851] = sv14[4769] * sv14[4825];
        sv14[4852] = sv14[4770] * sv14[4825];
        sv14[4853] = sv14[4771] * sv14[4825];
        sv14[4854] = sv14[4772] * sv14[4825];
        sv14[4855] = sv14[4773] * sv14[4825];
        sv14[4856] = sv14[4774] * sv14[4825];
        sv14[4857] = sv14[4775] * sv14[4825];
        sv14[4858] = sv14[4776] * sv14[4825];
        sv14[4859] = sv14[4777] * sv14[4825];
        sv14[4860] = sv14[4778] * sv14[4825];
        sv14[4861] = sv14[4779] * sv14[4825];
        sv14[4862] = sv14[4780] * sv14[4825];
        sv14[4863] = sv14[4781] * sv14[4825];
        sv14[4864] = sv14[4782] * sv14[4825];
        sv14[4865] = sv14[4783] * sv14[4825];
        sv14[4866] = sv14[4784] * sv14[4825];
        sv14[4867] = sv14[4785] * sv14[4825];
        sv14[4868] = sv14[4786] * sv14[4825];
        sv14[4869] = sv14[4787] * sv14[4825];
        sv14[4870] = sv14[4788] * sv14[4825];
        sv14[4871] = sv14[4789] * sv14[4825];
        sv14[4872] = sv14[4790] * sv14[4825];
        sv14[4873] = sv14[4791] * sv14[4825];
        sv14[4874] = sv14[4792] * sv14[4825];
        sv14[4875] = sv14[4793] * sv14[4825];
        sv14[4876] = sv14[4794] * sv14[4825];
        sv14[4877] = sv14[4795] * sv14[4825];
        sv14[4878] = sv14[4796] * sv14[4825];
        sv14[4879] = sv14[4797] * sv14[4825];
        sv14[4880] = sv14[4798] * sv14[4825];
        sv14[4881] = sv14[4799] * sv14[4825];
        sv14[4882] = sv14[4800] * sv14[4825];
        sv14[4883] = sv14[4801] * sv14[4825];
        sv14[4884] = sv14[4802] * sv14[4825];
        sv14[4885] = sv14[4803] * sv14[4825];
        sv14[4886] = sv14[4804] * sv14[4825];
        sv14[4887] = sv14[4805] * sv14[4825];
        sv14[4888] = sv14[4806] * sv14[4825];
        sv14[4889] = sv14[4807] * sv14[4825];
        sv14[4890] = sv14[4808] * sv14[4825];
        sv14[4891] = sv14[4809] * sv14[4825];
        sv14[4892] = sv14[4810] * sv14[4825];
        sv14[4893] = sv14[4811] * sv14[4825];
        sv14[4894] = sv14[4812] * sv14[4825];
        sv14[4895] = sv14[4813] * sv14[4825];
        sv14[4896] = sv14[4814] * sv14[4825];
        sv14[4897] = sv14[4815] * sv14[4825];
        sv14[4898] = sv14[4816] * sv14[4825];
        sv14[4899] = sv14[4817] * sv14[4825];
        sv14[4900] = sv14[4818] * sv14[4825];
        sv14[4901] = sv14[4819] * sv14[4825];
        sv14[4902] = sv14[4820] * sv14[4825];
        sv14[4903] = sv14[4821] * sv14[4825];
        sv14[4904] = sv14[4822] * sv14[4825];
        sv14[4905] = sv14[4823] * sv14[4825];
        sv14[4906] = sv14[4824] * sv14[4825];
        sv14[4907] = sv14[3834] + sv14[4826];
        sv14[4908] = sv14[3843] + sv14[4827];
        sv14[4909] = sv14[3852] + sv14[4828];
        sv14[4910] = sv14[3861] + sv14[4829];
        sv14[4911] = sv14[3870] + sv14[4830];
        sv14[4912] = sv14[3879] + sv14[4831];
        sv14[4913] = sv14[3888] + sv14[4832];
        sv14[4914] = sv14[3897] + sv14[4833];
        sv14[4915] = sv14[3906] + sv14[4834];
        sv14[4916] = sv14[3835] + sv14[4835];
        sv14[4917] = sv14[3844] + sv14[4836];
        sv14[4918] = sv14[3853] + sv14[4837];
        sv14[4919] = sv14[3862] + sv14[4838];
        sv14[4920] = sv14[3871] + sv14[4839];
        sv14[4921] = sv14[3880] + sv14[4840];
        sv14[4922] = sv14[3889] + sv14[4841];
        sv14[4923] = sv14[3898] + sv14[4842];
        sv14[4924] = sv14[3907] + sv14[4843];
        sv14[4925] = sv14[3836] + sv14[4844];
        sv14[4926] = sv14[3845] + sv14[4845];
        sv14[4927] = sv14[3854] + sv14[4846];
        sv14[4928] = sv14[3863] + sv14[4847];
        sv14[4929] = sv14[3872] + sv14[4848];
        sv14[4930] = sv14[3881] + sv14[4849];
        sv14[4931] = sv14[3890] + sv14[4850];
        sv14[4932] = sv14[3899] + sv14[4851];
        sv14[4933] = sv14[3908] + sv14[4852];
        sv14[4934] = sv14[3837] + sv14[4853];
        sv14[4935] = sv14[3838] + sv14[4854];
        sv14[4936] = sv14[3839] + sv14[4855];
        sv14[4937] = sv14[3840] + sv14[4856];
        sv14[4938] = sv14[3841] + sv14[4857];
        sv14[4939] = sv14[3842] + sv14[4858];
        sv14[4940] = sv14[3846] + sv14[4859];
        sv14[4941] = sv14[3847] + sv14[4860];
        sv14[4942] = sv14[3848] + sv14[4861];
        sv14[4943] = sv14[3849] + sv14[4862];
        sv14[4944] = sv14[3850] + sv14[4863];
        sv14[4945] = sv14[3851] + sv14[4864];
        sv14[4946] = sv14[3855] + sv14[4865];
        sv14[4947] = sv14[3856] + sv14[4866];
        sv14[4948] = sv14[3857] + sv14[4867];
        sv14[4949] = sv14[3858] + sv14[4868];
        sv14[4950] = sv14[3859] + sv14[4869];
        sv14[4951] = sv14[3860] + sv14[4870];
        sv14[4952] = sv14[3864] + sv14[4871];
        sv14[4953] = sv14[3873] + sv14[4872];
        sv14[4954] = sv14[3882] + sv14[4873];
        sv14[4955] = sv14[3891] + sv14[4874];
        sv14[4956] = sv14[3900] + sv14[4875];
        sv14[4957] = sv14[3909] + sv14[4876];
        sv14[4958] = sv14[3865] + sv14[4877];
        sv14[4959] = sv14[3874] + sv14[4878];
        sv14[4960] = sv14[3883] + sv14[4879];
        sv14[4961] = sv14[3892] + sv14[4880];
        sv14[4962] = sv14[3901] + sv14[4881];
        sv14[4963] = sv14[3910] + sv14[4882];
        sv14[4964] = sv14[3866] + sv14[4883];
        sv14[4965] = sv14[3875] + sv14[4884];
        sv14[4966] = sv14[3884] + sv14[4885];
        sv14[4967] = sv14[3893] + sv14[4886];
        sv14[4968] = sv14[3902] + sv14[4887];
        sv14[4969] = sv14[3911] + sv14[4888];
        sv14[4970] = sv14[3867] + sv14[4889];
        sv14[4971] = sv14[3868] + sv14[4890];
        sv14[4972] = sv14[3869] + sv14[4891];
        sv14[4973] = sv14[3876] + sv14[4892];
        sv14[4974] = sv14[3877] + sv14[4893];
        sv14[4975] = sv14[3878] + sv14[4894];
        sv14[4976] = sv14[3885] + sv14[4895];
        sv14[4977] = sv14[3886] + sv14[4896];
        sv14[4978] = sv14[3887] + sv14[4897];
        sv14[4979] = sv14[3894] + sv14[4898];
        sv14[4980] = sv14[3903] + sv14[4899];
        sv14[4981] = sv14[3912] + sv14[4900];
        sv14[4982] = sv14[3895] + sv14[4901];
        sv14[4983] = sv14[3904] + sv14[4902];
        sv14[4984] = sv14[3913] + sv14[4903];
        sv14[4985] = sv14[3896] + sv14[4904];
        sv14[4986] = sv14[3905] + sv14[4905];
        sv14[4987] = sv14[3914] + sv14[4906];
        sv14[4988] = sv14[4907] * w[4][0];
        sv14[4989] = sv14[4908] * w[4][0];
        sv14[4990] = sv14[4909] * w[4][0];
        sv14[4991] = sv14[4910] * w[4][0];
        sv14[4992] = sv14[4911] * w[4][0];
        sv14[4993] = sv14[4912] * w[4][0];
        sv14[4994] = sv14[4913] * w[4][0];
        sv14[4995] = sv14[4914] * w[4][0];
        sv14[4996] = sv14[4915] * w[4][0];
        sv14[4997] = sv14[4916] * w[4][0];
        sv14[4998] = sv14[4917] * w[4][0];
        sv14[4999] = sv14[4918] * w[4][0];
        sv14[5000] = sv14[4919] * w[4][0];
        sv14[5001] = sv14[4920] * w[4][0];
        sv14[5002] = sv14[4921] * w[4][0];
        sv14[5003] = sv14[4922] * w[4][0];
        sv14[5004] = sv14[4923] * w[4][0];
        sv14[5005] = sv14[4924] * w[4][0];
        sv14[5006] = sv14[4925] * w[4][0];
        sv14[5007] = sv14[4926] * w[4][0];
        sv14[5008] = sv14[4927] * w[4][0];
        sv14[5009] = sv14[4928] * w[4][0];
        sv14[5010] = sv14[4929] * w[4][0];
        sv14[5011] = sv14[4930] * w[4][0];
        sv14[5012] = sv14[4931] * w[4][0];
        sv14[5013] = sv14[4932] * w[4][0];
        sv14[5014] = sv14[4933] * w[4][0];
        sv14[5015] = sv14[4934] * w[4][0];
        sv14[5016] = sv14[4935] * w[4][0];
        sv14[5017] = sv14[4936] * w[4][0];
        sv14[5018] = sv14[4937] * w[4][0];
        sv14[5019] = sv14[4938] * w[4][0];
        sv14[5020] = sv14[4939] * w[4][0];
        sv14[5021] = sv14[4940] * w[4][0];
        sv14[5022] = sv14[4941] * w[4][0];
        sv14[5023] = sv14[4942] * w[4][0];
        sv14[5024] = sv14[4943] * w[4][0];
        sv14[5025] = sv14[4944] * w[4][0];
        sv14[5026] = sv14[4945] * w[4][0];
        sv14[5027] = sv14[4946] * w[4][0];
        sv14[5028] = sv14[4947] * w[4][0];
        sv14[5029] = sv14[4948] * w[4][0];
        sv14[5030] = sv14[4949] * w[4][0];
        sv14[5031] = sv14[4950] * w[4][0];
        sv14[5032] = sv14[4951] * w[4][0];
        sv14[5033] = sv14[4952] * w[4][0];
        sv14[5034] = sv14[4953] * w[4][0];
        sv14[5035] = sv14[4954] * w[4][0];
        sv14[5036] = sv14[4955] * w[4][0];
        sv14[5037] = sv14[4956] * w[4][0];
        sv14[5038] = sv14[4957] * w[4][0];
        sv14[5039] = sv14[4958] * w[4][0];
        sv14[5040] = sv14[4959] * w[4][0];
        sv14[5041] = sv14[4960] * w[4][0];
        sv14[5042] = sv14[4961] * w[4][0];
        sv14[5043] = sv14[4962] * w[4][0];
        sv14[5044] = sv14[4963] * w[4][0];
        sv14[5045] = sv14[4964] * w[4][0];
        sv14[5046] = sv14[4965] * w[4][0];
        sv14[5047] = sv14[4966] * w[4][0];
        sv14[5048] = sv14[4967] * w[4][0];
        sv14[5049] = sv14[4968] * w[4][0];
        sv14[5050] = sv14[4969] * w[4][0];
        sv14[5051] = sv14[4970] * w[4][0];
        sv14[5052] = sv14[4971] * w[4][0];
        sv14[5053] = sv14[4972] * w[4][0];
        sv14[5054] = sv14[4973] * w[4][0];
        sv14[5055] = sv14[4974] * w[4][0];
        sv14[5056] = sv14[4975] * w[4][0];
        sv14[5057] = sv14[4976] * w[4][0];
        sv14[5058] = sv14[4977] * w[4][0];
        sv14[5059] = sv14[4978] * w[4][0];
        sv14[5060] = sv14[4979] * w[4][0];
        sv14[5061] = sv14[4980] * w[4][0];
        sv14[5062] = sv14[4981] * w[4][0];
        sv14[5063] = sv14[4982] * w[4][0];
        sv14[5064] = sv14[4983] * w[4][0];
        sv14[5065] = sv14[4984] * w[4][0];
        sv14[5066] = sv14[4985] * w[4][0];
        sv14[5067] = sv14[4986] * w[4][0];
        sv14[5068] = sv14[4987] * w[4][0];
        sv14[5069] = sv14[3677] + sv14[4988];
        sv14[5070] = sv14[3678] + sv14[4989];
        sv14[5071] = sv14[3679] + sv14[4990];
        sv14[5072] = sv14[3680] + sv14[4991];
        sv14[5073] = sv14[3681] + sv14[4992];
        sv14[5074] = sv14[3682] + sv14[4993];
        sv14[5075] = sv14[3683] + sv14[4994];
        sv14[5076] = sv14[3684] + sv14[4995];
        sv14[5077] = sv14[3685] + sv14[4996];
        sv14[5078] = sv14[3686] + sv14[4997];
        sv14[5079] = sv14[3687] + sv14[4998];
        sv14[5080] = sv14[3688] + sv14[4999];
        sv14[5081] = sv14[3689] + sv14[5000];
        sv14[5082] = sv14[3690] + sv14[5001];
        sv14[5083] = sv14[3691] + sv14[5002];
        sv14[5084] = sv14[3692] + sv14[5003];
        sv14[5085] = sv14[3693] + sv14[5004];
        sv14[5086] = sv14[3694] + sv14[5005];
        sv14[5087] = sv14[3695] + sv14[5006];
        sv14[5088] = sv14[3696] + sv14[5007];
        sv14[5089] = sv14[3697] + sv14[5008];
        sv14[5090] = sv14[3698] + sv14[5009];
        sv14[5091] = sv14[3699] + sv14[5010];
        sv14[5092] = sv14[3700] + sv14[5011];
        sv14[5093] = sv14[3701] + sv14[5012];
        sv14[5094] = sv14[3702] + sv14[5013];
        sv14[5095] = sv14[3703] + sv14[5014];
        sv14[5096] = sv14[3704] + sv14[5015];
        sv14[5097] = sv14[3705] + sv14[5016];
        sv14[5098] = sv14[3706] + sv14[5017];
        sv14[5099] = sv14[3707] + sv14[5018];
        sv14[5100] = sv14[3708] + sv14[5019];
        sv14[5101] = sv14[3709] + sv14[5020];
        sv14[5102] = sv14[3710] + sv14[5021];
        sv14[5103] = sv14[3711] + sv14[5022];
        sv14[5104] = sv14[3712] + sv14[5023];
        sv14[5105] = sv14[3713] + sv14[5024];
        sv14[5106] = sv14[3714] + sv14[5025];
        sv14[5107] = sv14[3715] + sv14[5026];
        sv14[5108] = sv14[3716] + sv14[5027];
        sv14[5109] = sv14[3717] + sv14[5028];
        sv14[5110] = sv14[3718] + sv14[5029];
        sv14[5111] = sv14[3719] + sv14[5030];
        sv14[5112] = sv14[3720] + sv14[5031];
        sv14[5113] = sv14[3721] + sv14[5032];
        sv14[5114] = sv14[3722] + sv14[5033];
        sv14[5115] = sv14[3723] + sv14[5034];
        sv14[5116] = sv14[3724] + sv14[5035];
        sv14[5117] = sv14[3725] + sv14[5036];
        sv14[5118] = sv14[3726] + sv14[5037];
        sv14[5119] = sv14[3727] + sv14[5038];
        sv14[5120] = sv14[3728] + sv14[5039];
        sv14[5121] = sv14[3729] + sv14[5040];
        sv14[5122] = sv14[3730] + sv14[5041];
        sv14[5123] = sv14[3731] + sv14[5042];
        sv14[5124] = sv14[3732] + sv14[5043];
        sv14[5125] = sv14[3733] + sv14[5044];
        sv14[5126] = sv14[3734] + sv14[5045];
        sv14[5127] = sv14[3735] + sv14[5046];
        sv14[5128] = sv14[3736] + sv14[5047];
        sv14[5129] = sv14[3737] + sv14[5048];
        sv14[5130] = sv14[3738] + sv14[5049];
        sv14[5131] = sv14[3739] + sv14[5050];
        sv14[5132] = sv14[3740] + sv14[5051];
        sv14[5133] = sv14[3741] + sv14[5052];
        sv14[5134] = sv14[3742] + sv14[5053];
        sv14[5135] = sv14[3743] + sv14[5054];
        sv14[5136] = sv14[3744] + sv14[5055];
        sv14[5137] = sv14[3745] + sv14[5056];
        sv14[5138] = sv14[3746] + sv14[5057];
        sv14[5139] = sv14[3747] + sv14[5058];
        sv14[5140] = sv14[3748] + sv14[5059];
        sv14[5141] = sv14[3749] + sv14[5060];
        sv14[5142] = sv14[3750] + sv14[5061];
        sv14[5143] = sv14[3751] + sv14[5062];
        sv14[5144] = sv14[3752] + sv14[5063];
        sv14[5145] = sv14[3753] + sv14[5064];
        sv14[5146] = sv14[3754] + sv14[5065];
        sv14[5147] = sv14[3755] + sv14[5066];
        sv14[5148] = sv14[3756] + sv14[5067];
        sv14[5149] = sv14[3757] + sv14[5068];
        sv14[5150] = w[1][0] * sv14[181];
        sv14[5151] = w[1][1] * sv14[329];
        sv14[5152] = sv14[5150] + sv14[5151];
        sv14[5153] = w[1][2] * sv14[234];
        sv14[5154] = sv14[5152] + sv14[5153];
        sv14[5155] = w[1][0] * sv14[5154];
        sv14[5156] = w[1][0] * sv14[329];
        sv14[5157] = w[1][1] * sv14[84];
        sv14[5158] = sv14[5156] + sv14[5157];
        sv14[5159] = w[1][2] * sv14[134];
        sv14[5160] = sv14[5158] + sv14[5159];
        sv14[5161] = w[1][1] * sv14[5160];
        sv14[5162] = sv14[5155] + sv14[5161];
        sv14[5163] = w[1][0] * sv14[234];
        sv14[5164] = w[1][1] * sv14[134];
        sv14[5165] = sv14[5163] + sv14[5164];
        sv14[5166] = w[1][2] * sv14[52];
        sv14[5167] = sv14[5165] + sv14[5166];
        sv14[5168] = w[1][2] * sv14[5167];
        sv14[5169] = sv14[5162] + sv14[5168];
        sv14[5170] = sv14[5169] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5171] = w[1][0] * sv14[194];
        sv14[5172] = w[1][0] * sv14[195];
        sv14[5173] = w[1][0] * sv14[196];
        sv14[5174] = w[1][0] * sv14[200];
        sv14[5175] = w[1][0] * sv14[201];
        sv14[5176] = w[1][0] * sv14[202];
        sv14[5177] = w[1][0] * sv14[206];
        sv14[5178] = w[1][0] * sv14[207];
        sv14[5179] = w[1][0] * sv14[208];
        sv14[5180] = w[1][1] * sv14[295];
        sv14[5181] = w[1][1] * sv14[296];
        sv14[5182] = w[1][1] * sv14[297];
        sv14[5183] = w[1][1] * sv14[304];
        sv14[5184] = w[1][1] * sv14[305];
        sv14[5185] = w[1][1] * sv14[306];
        sv14[5186] = w[1][1] * sv14[313];
        sv14[5187] = w[1][1] * sv14[314];
        sv14[5188] = w[1][1] * sv14[315];
        sv14[5189] = sv14[5171] + sv14[5180];
        sv14[5190] = sv14[5172] + sv14[5181];
        sv14[5191] = sv14[5173] + sv14[5182];
        sv14[5192] = sv14[5183] + sv14[5174];
        sv14[5193] = sv14[5184] + sv14[5175];
        sv14[5194] = sv14[5176] + sv14[5185];
        sv14[5195] = sv14[5177] + sv14[5186];
        sv14[5196] = sv14[5178] + sv14[5187];
        sv14[5197] = sv14[5179] + sv14[5188];
        sv14[5198] = w[1][2] * sv14[250];
        sv14[5199] = w[1][2] * sv14[251];
        sv14[5200] = w[1][2] * sv14[252];
        sv14[5201] = w[1][2] * sv14[259];
        sv14[5202] = w[1][2] * sv14[260];
        sv14[5203] = w[1][2] * sv14[261];
        sv14[5204] = w[1][2] * sv14[268];
        sv14[5205] = w[1][2] * sv14[269];
        sv14[5206] = w[1][2] * sv14[270];
        sv14[5207] = sv14[5189] + sv14[5198];
        sv14[5208] = sv14[5190] + sv14[5199];
        sv14[5209] = sv14[5191] + sv14[5200];
        sv14[5210] = sv14[5192] + sv14[5201];
        sv14[5211] = sv14[5193] + sv14[5202];
        sv14[5212] = sv14[5194] + sv14[5203];
        sv14[5213] = sv14[5195] + sv14[5204];
        sv14[5214] = sv14[5196] + sv14[5205];
        sv14[5215] = sv14[5197] + sv14[5206];
        sv14[5216] = w[1][0] * sv14[5207];
        sv14[5217] = w[1][0] * sv14[5208];
        sv14[5218] = w[1][0] * sv14[5209];
        sv14[5219] = w[1][0] * sv14[5210];
        sv14[5220] = w[1][0] * sv14[5211];
        sv14[5221] = w[1][0] * sv14[5212];
        sv14[5222] = w[1][0] * sv14[5213];
        sv14[5223] = w[1][0] * sv14[5214];
        sv14[5224] = w[1][0] * sv14[5215];
        sv14[5225] = w[1][0] * sv14[295];
        sv14[5226] = w[1][0] * sv14[296];
        sv14[5227] = w[1][0] * sv14[297];
        sv14[5228] = w[1][0] * sv14[304];
        sv14[5229] = w[1][0] * sv14[305];
        sv14[5230] = w[1][0] * sv14[306];
        sv14[5231] = w[1][0] * sv14[313];
        sv14[5232] = w[1][0] * sv14[314];
        sv14[5233] = w[1][0] * sv14[315];
        sv14[5234] = w[1][1] * sv14[8];
        sv14[5235] = w[1][1] * sv14[9];
        sv14[5236] = w[1][1] * sv14[10];
        sv14[5237] = w[1][1] * sv14[19];
        sv14[5238] = w[1][1] * sv14[20];
        sv14[5239] = w[1][1] * sv14[21];
        sv14[5240] = w[1][1] * sv14[30];
        sv14[5241] = w[1][1] * sv14[31];
        sv14[5242] = w[1][1] * sv14[32];
        sv14[5243] = sv14[5234] + sv14[5225];
        sv14[5244] = sv14[5235] + sv14[5226];
        sv14[5245] = sv14[5227] + sv14[5236];
        sv14[5246] = sv14[5237] + sv14[5228];
        sv14[5247] = sv14[5238] + sv14[5229];
        sv14[5248] = sv14[5239] + sv14[5230];
        sv14[5249] = sv14[5240] + sv14[5231];
        sv14[5250] = sv14[5241] + sv14[5232];
        sv14[5251] = sv14[5233] + sv14[5242];
        sv14[5252] = w[1][2] * sv14[109];
        sv14[5253] = w[1][2] * sv14[110];
        sv14[5254] = w[1][2] * sv14[111];
        sv14[5255] = w[1][2] * sv14[118];
        sv14[5256] = w[1][2] * sv14[119];
        sv14[5257] = w[1][2] * sv14[120];
        sv14[5258] = w[1][2] * sv14[127];
        sv14[5259] = w[1][2] * sv14[128];
        sv14[5260] = w[1][2] * sv14[129];
        sv14[5261] = sv14[5243] + sv14[5252];
        sv14[5262] = sv14[5244] + sv14[5253];
        sv14[5263] = sv14[5245] + sv14[5254];
        sv14[5264] = sv14[5246] + sv14[5255];
        sv14[5265] = sv14[5247] + sv14[5256];
        sv14[5266] = sv14[5248] + sv14[5257];
        sv14[5267] = sv14[5249] + sv14[5258];
        sv14[5268] = sv14[5250] + sv14[5259];
        sv14[5269] = sv14[5251] + sv14[5260];
        sv14[5270] = w[1][1] * sv14[5261];
        sv14[5271] = w[1][1] * sv14[5262];
        sv14[5272] = w[1][1] * sv14[5263];
        sv14[5273] = w[1][1] * sv14[5264];
        sv14[5274] = w[1][1] * sv14[5265];
        sv14[5275] = w[1][1] * sv14[5266];
        sv14[5276] = w[1][1] * sv14[5267];
        sv14[5277] = w[1][1] * sv14[5268];
        sv14[5278] = w[1][1] * sv14[5269];
        sv14[5279] = sv14[5270] + sv14[5216];
        sv14[5280] = sv14[5271] + sv14[5217];
        sv14[5281] = sv14[5218] + sv14[5272];
        sv14[5282] = sv14[5273] + sv14[5219];
        sv14[5283] = sv14[5274] + sv14[5220];
        sv14[5284] = sv14[5221] + sv14[5275];
        sv14[5285] = sv14[5276] + sv14[5222];
        sv14[5286] = sv14[5277] + sv14[5223];
        sv14[5287] = sv14[5224] + sv14[5278];
        sv14[5288] = w[1][0] * sv14[250];
        sv14[5289] = w[1][0] * sv14[251];
        sv14[5290] = w[1][0] * sv14[252];
        sv14[5291] = w[1][0] * sv14[259];
        sv14[5292] = w[1][0] * sv14[260];
        sv14[5293] = w[1][0] * sv14[261];
        sv14[5294] = w[1][0] * sv14[268];
        sv14[5295] = w[1][0] * sv14[269];
        sv14[5296] = w[1][0] * sv14[270];
        sv14[5297] = w[1][1] * sv14[109];
        sv14[5298] = w[1][1] * sv14[110];
        sv14[5299] = w[1][1] * sv14[111];
        sv14[5300] = w[1][1] * sv14[118];
        sv14[5301] = w[1][1] * sv14[119];
        sv14[5302] = w[1][1] * sv14[120];
        sv14[5303] = w[1][1] * sv14[127];
        sv14[5304] = w[1][1] * sv14[128];
        sv14[5305] = w[1][1] * sv14[129];
        sv14[5306] = sv14[5297] + sv14[5288];
        sv14[5307] = sv14[5298] + sv14[5289];
        sv14[5308] = sv14[5290] + sv14[5299];
        sv14[5309] = sv14[5300] + sv14[5291];
        sv14[5310] = sv14[5301] + sv14[5292];
        sv14[5311] = sv14[5293] + sv14[5302];
        sv14[5312] = sv14[5303] + sv14[5294];
        sv14[5313] = sv14[5304] + sv14[5295];
        sv14[5314] = sv14[5296] + sv14[5305];
        sv14[5315] = w[1][2] * sv14[65];
        sv14[5316] = w[1][2] * sv14[66];
        sv14[5317] = w[1][2] * sv14[67];
        sv14[5318] = w[1][2] * sv14[71];
        sv14[5319] = w[1][2] * sv14[72];
        sv14[5320] = w[1][2] * sv14[73];
        sv14[5321] = w[1][2] * sv14[77];
        sv14[5322] = w[1][2] * sv14[78];
        sv14[5323] = w[1][2] * sv14[79];
        sv14[5324] = sv14[5306] + sv14[5315];
        sv14[5325] = sv14[5307] + sv14[5316];
        sv14[5326] = sv14[5308] + sv14[5317];
        sv14[5327] = sv14[5309] + sv14[5318];
        sv14[5328] = sv14[5310] + sv14[5319];
        sv14[5329] = sv14[5311] + sv14[5320];
        sv14[5330] = sv14[5312] + sv14[5321];
        sv14[5331] = sv14[5313] + sv14[5322];
        sv14[5332] = sv14[5314] + sv14[5323];
        sv14[5333] = w[1][2] * sv14[5324];
        sv14[5334] = w[1][2] * sv14[5325];
        sv14[5335] = w[1][2] * sv14[5326];
        sv14[5336] = w[1][2] * sv14[5327];
        sv14[5337] = w[1][2] * sv14[5328];
        sv14[5338] = w[1][2] * sv14[5329];
        sv14[5339] = w[1][2] * sv14[5330];
        sv14[5340] = w[1][2] * sv14[5331];
        sv14[5341] = w[1][2] * sv14[5332];
        sv14[5342] = sv14[5279] + sv14[5333];
        sv14[5343] = sv14[5280] + sv14[5334];
        sv14[5344] = sv14[5281] + sv14[5335];
        sv14[5345] = sv14[5282] + sv14[5336];
        sv14[5346] = sv14[5283] + sv14[5337];
        sv14[5347] = sv14[5284] + sv14[5338];
        sv14[5348] = sv14[5285] + sv14[5339];
        sv14[5349] = sv14[5286] + sv14[5340];
        sv14[5350] = sv14[5287] + sv14[5341];
        sv14[5351] = sv14[3272] * sv14[5170];
        sv14[5352] = sv14[3273] * sv14[5170];
        sv14[5353] = sv14[3274] * sv14[5170];
        sv14[5354] = sv14[3275] * sv14[5170];
        sv14[5355] = sv14[3276] * sv14[5170];
        sv14[5356] = sv14[3277] * sv14[5170];
        sv14[5357] = sv14[3278] * sv14[5170];
        sv14[5358] = sv14[3279] * sv14[5170];
        sv14[5359] = sv14[3280] * sv14[5170];
        sv14[5360] = sv14[5342] + -1 * sv14[5351];
        sv14[5361] = sv14[5343] + -1 * sv14[5352];
        sv14[5362] = sv14[5344] + -1 * sv14[5353];
        sv14[5363] = sv14[5345] + -1 * sv14[5354];
        sv14[5364] = sv14[5346] + -1 * sv14[5355];
        sv14[5365] = sv14[5347] + -1 * sv14[5356];
        sv14[5366] = sv14[5348] + -1 * sv14[5357];
        sv14[5367] = sv14[5349] + -1 * sv14[5358];
        sv14[5368] = sv14[5350] + -1 * sv14[5359];
        sv14[5369] = sv14[5360] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5370] = sv14[5361] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5371] = sv14[5362] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5372] = sv14[5363] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5373] = sv14[5364] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5374] = sv14[5365] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5375] = sv14[5366] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5376] = sv14[5367] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5377] = sv14[5368] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5378] = (-1 + sv14[5170]) * (2 * sv14[5369]);
        sv14[5379] = (-1 + sv14[5170]) * (2 * sv14[5370]);
        sv14[5380] = (-1 + sv14[5170]) * (2 * sv14[5371]);
        sv14[5381] = (-1 + sv14[5170]) * (2 * sv14[5372]);
        sv14[5382] = (-1 + sv14[5170]) * (2 * sv14[5373]);
        sv14[5383] = (-1 + sv14[5170]) * (2 * sv14[5374]);
        sv14[5384] = (-1 + sv14[5170]) * (2 * sv14[5375]);
        sv14[5385] = (-1 + sv14[5170]) * (2 * sv14[5376]);
        sv14[5386] = (-1 + sv14[5170]) * (2 * sv14[5377]);
        sv14[5387] = sv14[5378] * w[8][0];
        sv14[5388] = sv14[5379] * w[8][0];
        sv14[5389] = sv14[5380] * w[8][0];
        sv14[5390] = sv14[5381] * w[8][0];
        sv14[5391] = sv14[5382] * w[8][0];
        sv14[5392] = sv14[5383] * w[8][0];
        sv14[5393] = sv14[5384] * w[8][0];
        sv14[5394] = sv14[5385] * w[8][0];
        sv14[5395] = sv14[5386] * w[8][0];
        sv14[5396] = std::pow(-1 + sv14[5170], 2) * w[8][0];
        sv14[5397] = std::exp(sv14[5396]);
        sv14[5398] = sv14[5387] * sv14[5397];
        sv14[5399] = sv14[5388] * sv14[5397];
        sv14[5400] = sv14[5389] * sv14[5397];
        sv14[5401] = sv14[5390] * sv14[5397];
        sv14[5402] = sv14[5391] * sv14[5397];
        sv14[5403] = sv14[5392] * sv14[5397];
        sv14[5404] = sv14[5393] * sv14[5397];
        sv14[5405] = sv14[5394] * sv14[5397];
        sv14[5406] = sv14[5395] * sv14[5397];
        sv14[5407] = sv14[5398] * sv14[5387];
        sv14[5408] = sv14[5398] * sv14[5388];
        sv14[5409] = sv14[5398] * sv14[5389];
        sv14[5410] = sv14[5398] * sv14[5390];
        sv14[5411] = sv14[5398] * sv14[5391];
        sv14[5412] = sv14[5398] * sv14[5392];
        sv14[5413] = sv14[5398] * sv14[5393];
        sv14[5414] = sv14[5398] * sv14[5394];
        sv14[5415] = sv14[5398] * sv14[5395];
        sv14[5416] = sv14[5399] * sv14[5387];
        sv14[5417] = sv14[5399] * sv14[5388];
        sv14[5418] = sv14[5399] * sv14[5389];
        sv14[5419] = sv14[5399] * sv14[5390];
        sv14[5420] = sv14[5399] * sv14[5391];
        sv14[5421] = sv14[5399] * sv14[5392];
        sv14[5422] = sv14[5399] * sv14[5393];
        sv14[5423] = sv14[5399] * sv14[5394];
        sv14[5424] = sv14[5399] * sv14[5395];
        sv14[5425] = sv14[5400] * sv14[5387];
        sv14[5426] = sv14[5400] * sv14[5388];
        sv14[5427] = sv14[5400] * sv14[5389];
        sv14[5428] = sv14[5400] * sv14[5390];
        sv14[5429] = sv14[5400] * sv14[5391];
        sv14[5430] = sv14[5400] * sv14[5392];
        sv14[5431] = sv14[5400] * sv14[5393];
        sv14[5432] = sv14[5400] * sv14[5394];
        sv14[5433] = sv14[5400] * sv14[5395];
        sv14[5434] = sv14[5401] * sv14[5387];
        sv14[5435] = sv14[5401] * sv14[5388];
        sv14[5436] = sv14[5401] * sv14[5389];
        sv14[5437] = sv14[5401] * sv14[5390];
        sv14[5438] = sv14[5401] * sv14[5391];
        sv14[5439] = sv14[5401] * sv14[5392];
        sv14[5440] = sv14[5401] * sv14[5393];
        sv14[5441] = sv14[5401] * sv14[5394];
        sv14[5442] = sv14[5401] * sv14[5395];
        sv14[5443] = sv14[5402] * sv14[5387];
        sv14[5444] = sv14[5402] * sv14[5388];
        sv14[5445] = sv14[5402] * sv14[5389];
        sv14[5446] = sv14[5402] * sv14[5390];
        sv14[5447] = sv14[5402] * sv14[5391];
        sv14[5448] = sv14[5402] * sv14[5392];
        sv14[5449] = sv14[5402] * sv14[5393];
        sv14[5450] = sv14[5402] * sv14[5394];
        sv14[5451] = sv14[5402] * sv14[5395];
        sv14[5452] = sv14[5403] * sv14[5387];
        sv14[5453] = sv14[5403] * sv14[5388];
        sv14[5454] = sv14[5403] * sv14[5389];
        sv14[5455] = sv14[5403] * sv14[5390];
        sv14[5456] = sv14[5403] * sv14[5391];
        sv14[5457] = sv14[5403] * sv14[5392];
        sv14[5458] = sv14[5403] * sv14[5393];
        sv14[5459] = sv14[5403] * sv14[5394];
        sv14[5460] = sv14[5403] * sv14[5395];
        sv14[5461] = sv14[5404] * sv14[5387];
        sv14[5462] = sv14[5404] * sv14[5388];
        sv14[5463] = sv14[5404] * sv14[5389];
        sv14[5464] = sv14[5404] * sv14[5390];
        sv14[5465] = sv14[5404] * sv14[5391];
        sv14[5466] = sv14[5404] * sv14[5392];
        sv14[5467] = sv14[5404] * sv14[5393];
        sv14[5468] = sv14[5404] * sv14[5394];
        sv14[5469] = sv14[5404] * sv14[5395];
        sv14[5470] = sv14[5405] * sv14[5387];
        sv14[5471] = sv14[5405] * sv14[5388];
        sv14[5472] = sv14[5405] * sv14[5389];
        sv14[5473] = sv14[5405] * sv14[5390];
        sv14[5474] = sv14[5405] * sv14[5391];
        sv14[5475] = sv14[5405] * sv14[5392];
        sv14[5476] = sv14[5405] * sv14[5393];
        sv14[5477] = sv14[5405] * sv14[5394];
        sv14[5478] = sv14[5405] * sv14[5395];
        sv14[5479] = sv14[5406] * sv14[5387];
        sv14[5480] = sv14[5406] * sv14[5388];
        sv14[5481] = sv14[5406] * sv14[5389];
        sv14[5482] = sv14[5406] * sv14[5390];
        sv14[5483] = sv14[5406] * sv14[5391];
        sv14[5484] = sv14[5406] * sv14[5392];
        sv14[5485] = sv14[5406] * sv14[5393];
        sv14[5486] = sv14[5406] * sv14[5394];
        sv14[5487] = sv14[5406] * sv14[5395];
        sv14[5488] = sv14[3107] * sv14[5170];
        sv14[5489] = sv14[3108] * sv14[5170];
        sv14[5490] = sv14[3109] * sv14[5170];
        sv14[5491] = sv14[3110] * sv14[5170];
        sv14[5492] = sv14[3111] * sv14[5170];
        sv14[5493] = sv14[3112] * sv14[5170];
        sv14[5494] = sv14[3113] * sv14[5170];
        sv14[5495] = sv14[3114] * sv14[5170];
        sv14[5496] = sv14[3115] * sv14[5170];
        sv14[5497] = sv14[3116] * sv14[5170];
        sv14[5498] = sv14[3117] * sv14[5170];
        sv14[5499] = sv14[3118] * sv14[5170];
        sv14[5500] = sv14[3119] * sv14[5170];
        sv14[5501] = sv14[3120] * sv14[5170];
        sv14[5502] = sv14[3121] * sv14[5170];
        sv14[5503] = sv14[3122] * sv14[5170];
        sv14[5504] = sv14[3123] * sv14[5170];
        sv14[5505] = sv14[3124] * sv14[5170];
        sv14[5506] = sv14[3125] * sv14[5170];
        sv14[5507] = sv14[3126] * sv14[5170];
        sv14[5508] = sv14[3127] * sv14[5170];
        sv14[5509] = sv14[3128] * sv14[5170];
        sv14[5510] = sv14[3129] * sv14[5170];
        sv14[5511] = sv14[3130] * sv14[5170];
        sv14[5512] = sv14[3131] * sv14[5170];
        sv14[5513] = sv14[3132] * sv14[5170];
        sv14[5514] = sv14[3133] * sv14[5170];
        sv14[5515] = sv14[3134] * sv14[5170];
        sv14[5516] = sv14[3135] * sv14[5170];
        sv14[5517] = sv14[3136] * sv14[5170];
        sv14[5518] = sv14[3137] * sv14[5170];
        sv14[5519] = sv14[3138] * sv14[5170];
        sv14[5520] = sv14[3139] * sv14[5170];
        sv14[5521] = sv14[3140] * sv14[5170];
        sv14[5522] = sv14[3141] * sv14[5170];
        sv14[5523] = sv14[3142] * sv14[5170];
        sv14[5524] = sv14[3143] * sv14[5170];
        sv14[5525] = sv14[3144] * sv14[5170];
        sv14[5526] = sv14[3145] * sv14[5170];
        sv14[5527] = sv14[3146] * sv14[5170];
        sv14[5528] = sv14[3147] * sv14[5170];
        sv14[5529] = sv14[3148] * sv14[5170];
        sv14[5530] = sv14[3149] * sv14[5170];
        sv14[5531] = sv14[3150] * sv14[5170];
        sv14[5532] = sv14[3151] * sv14[5170];
        sv14[5533] = sv14[3152] * sv14[5170];
        sv14[5534] = sv14[3153] * sv14[5170];
        sv14[5535] = sv14[3154] * sv14[5170];
        sv14[5536] = sv14[3155] * sv14[5170];
        sv14[5537] = sv14[3156] * sv14[5170];
        sv14[5538] = sv14[3157] * sv14[5170];
        sv14[5539] = sv14[3158] * sv14[5170];
        sv14[5540] = sv14[3159] * sv14[5170];
        sv14[5541] = sv14[3160] * sv14[5170];
        sv14[5542] = sv14[3161] * sv14[5170];
        sv14[5543] = sv14[3162] * sv14[5170];
        sv14[5544] = sv14[3163] * sv14[5170];
        sv14[5545] = sv14[3164] * sv14[5170];
        sv14[5546] = sv14[3165] * sv14[5170];
        sv14[5547] = sv14[3166] * sv14[5170];
        sv14[5548] = sv14[3167] * sv14[5170];
        sv14[5549] = sv14[3168] * sv14[5170];
        sv14[5550] = sv14[3169] * sv14[5170];
        sv14[5551] = sv14[3170] * sv14[5170];
        sv14[5552] = sv14[3171] * sv14[5170];
        sv14[5553] = sv14[3172] * sv14[5170];
        sv14[5554] = sv14[3173] * sv14[5170];
        sv14[5555] = sv14[3174] * sv14[5170];
        sv14[5556] = sv14[3175] * sv14[5170];
        sv14[5557] = sv14[3176] * sv14[5170];
        sv14[5558] = sv14[3177] * sv14[5170];
        sv14[5559] = sv14[3178] * sv14[5170];
        sv14[5560] = sv14[3179] * sv14[5170];
        sv14[5561] = sv14[3180] * sv14[5170];
        sv14[5562] = sv14[3181] * sv14[5170];
        sv14[5563] = sv14[3182] * sv14[5170];
        sv14[5564] = sv14[3183] * sv14[5170];
        sv14[5565] = sv14[3184] * sv14[5170];
        sv14[5566] = sv14[3185] * sv14[5170];
        sv14[5567] = sv14[3186] * sv14[5170];
        sv14[5568] = sv14[3187] * sv14[5170];
        sv14[5569] = sv14[3272] * sv14[5369];
        sv14[5570] = sv14[3272] * sv14[5370];
        sv14[5571] = sv14[3272] * sv14[5371];
        sv14[5572] = sv14[3272] * sv14[5372];
        sv14[5573] = sv14[3272] * sv14[5373];
        sv14[5574] = sv14[3272] * sv14[5374];
        sv14[5575] = sv14[3272] * sv14[5375];
        sv14[5576] = sv14[3272] * sv14[5376];
        sv14[5577] = sv14[3272] * sv14[5377];
        sv14[5578] = sv14[3273] * sv14[5369];
        sv14[5579] = sv14[3273] * sv14[5370];
        sv14[5580] = sv14[3273] * sv14[5371];
        sv14[5581] = sv14[3273] * sv14[5372];
        sv14[5582] = sv14[3273] * sv14[5373];
        sv14[5583] = sv14[3273] * sv14[5374];
        sv14[5584] = sv14[3273] * sv14[5375];
        sv14[5585] = sv14[3273] * sv14[5376];
        sv14[5586] = sv14[3273] * sv14[5377];
        sv14[5587] = sv14[3274] * sv14[5369];
        sv14[5588] = sv14[3274] * sv14[5370];
        sv14[5589] = sv14[3274] * sv14[5371];
        sv14[5590] = sv14[3274] * sv14[5372];
        sv14[5591] = sv14[3274] * sv14[5373];
        sv14[5592] = sv14[3274] * sv14[5374];
        sv14[5593] = sv14[3274] * sv14[5375];
        sv14[5594] = sv14[3274] * sv14[5376];
        sv14[5595] = sv14[3274] * sv14[5377];
        sv14[5596] = sv14[3275] * sv14[5369];
        sv14[5597] = sv14[3275] * sv14[5370];
        sv14[5598] = sv14[3275] * sv14[5371];
        sv14[5599] = sv14[3275] * sv14[5372];
        sv14[5600] = sv14[3275] * sv14[5373];
        sv14[5601] = sv14[3275] * sv14[5374];
        sv14[5602] = sv14[3275] * sv14[5375];
        sv14[5603] = sv14[3275] * sv14[5376];
        sv14[5604] = sv14[3275] * sv14[5377];
        sv14[5605] = sv14[3276] * sv14[5369];
        sv14[5606] = sv14[3276] * sv14[5370];
        sv14[5607] = sv14[3276] * sv14[5371];
        sv14[5608] = sv14[3276] * sv14[5372];
        sv14[5609] = sv14[3276] * sv14[5373];
        sv14[5610] = sv14[3276] * sv14[5374];
        sv14[5611] = sv14[3276] * sv14[5375];
        sv14[5612] = sv14[3276] * sv14[5376];
        sv14[5613] = sv14[3276] * sv14[5377];
        sv14[5614] = sv14[3277] * sv14[5369];
        sv14[5615] = sv14[3277] * sv14[5370];
        sv14[5616] = sv14[3277] * sv14[5371];
        sv14[5617] = sv14[3277] * sv14[5372];
        sv14[5618] = sv14[3277] * sv14[5373];
        sv14[5619] = sv14[3277] * sv14[5374];
        sv14[5620] = sv14[3277] * sv14[5375];
        sv14[5621] = sv14[3277] * sv14[5376];
        sv14[5622] = sv14[3277] * sv14[5377];
        sv14[5623] = sv14[3278] * sv14[5369];
        sv14[5624] = sv14[3278] * sv14[5370];
        sv14[5625] = sv14[3278] * sv14[5371];
        sv14[5626] = sv14[3278] * sv14[5372];
        sv14[5627] = sv14[3278] * sv14[5373];
        sv14[5628] = sv14[3278] * sv14[5374];
        sv14[5629] = sv14[3278] * sv14[5375];
        sv14[5630] = sv14[3278] * sv14[5376];
        sv14[5631] = sv14[3278] * sv14[5377];
        sv14[5632] = sv14[3279] * sv14[5369];
        sv14[5633] = sv14[3279] * sv14[5370];
        sv14[5634] = sv14[3279] * sv14[5371];
        sv14[5635] = sv14[3279] * sv14[5372];
        sv14[5636] = sv14[3279] * sv14[5373];
        sv14[5637] = sv14[3279] * sv14[5374];
        sv14[5638] = sv14[3279] * sv14[5375];
        sv14[5639] = sv14[3279] * sv14[5376];
        sv14[5640] = sv14[3279] * sv14[5377];
        sv14[5641] = sv14[3280] * sv14[5369];
        sv14[5642] = sv14[3280] * sv14[5370];
        sv14[5643] = sv14[3280] * sv14[5371];
        sv14[5644] = sv14[3280] * sv14[5372];
        sv14[5645] = sv14[3280] * sv14[5373];
        sv14[5646] = sv14[3280] * sv14[5374];
        sv14[5647] = sv14[3280] * sv14[5375];
        sv14[5648] = sv14[3280] * sv14[5376];
        sv14[5649] = sv14[3280] * sv14[5377];
        sv14[5650] = sv14[5488] + sv14[5569];
        sv14[5651] = sv14[5489] + sv14[5570];
        sv14[5652] = sv14[5490] + sv14[5571];
        sv14[5653] = sv14[5491] + sv14[5572];
        sv14[5654] = sv14[5492] + sv14[5573];
        sv14[5655] = sv14[5493] + sv14[5574];
        sv14[5656] = sv14[5494] + sv14[5575];
        sv14[5657] = sv14[5495] + sv14[5576];
        sv14[5658] = sv14[5496] + sv14[5577];
        sv14[5659] = sv14[5497] + sv14[5578];
        sv14[5660] = sv14[5498] + sv14[5579];
        sv14[5661] = sv14[5499] + sv14[5580];
        sv14[5662] = sv14[5500] + sv14[5581];
        sv14[5663] = sv14[5501] + sv14[5582];
        sv14[5664] = sv14[5502] + sv14[5583];
        sv14[5665] = sv14[5503] + sv14[5584];
        sv14[5666] = sv14[5504] + sv14[5585];
        sv14[5667] = sv14[5505] + sv14[5586];
        sv14[5668] = sv14[5506] + sv14[5587];
        sv14[5669] = sv14[5507] + sv14[5588];
        sv14[5670] = sv14[5508] + sv14[5589];
        sv14[5671] = sv14[5509] + sv14[5590];
        sv14[5672] = sv14[5510] + sv14[5591];
        sv14[5673] = sv14[5511] + sv14[5592];
        sv14[5674] = sv14[5512] + sv14[5593];
        sv14[5675] = sv14[5513] + sv14[5594];
        sv14[5676] = sv14[5514] + sv14[5595];
        sv14[5677] = sv14[5515] + sv14[5596];
        sv14[5678] = sv14[5516] + sv14[5605];
        sv14[5679] = sv14[5517] + sv14[5614];
        sv14[5680] = sv14[5518] + sv14[5623];
        sv14[5681] = sv14[5519] + sv14[5632];
        sv14[5682] = sv14[5520] + sv14[5641];
        sv14[5683] = sv14[5521] + sv14[5597];
        sv14[5684] = sv14[5522] + sv14[5606];
        sv14[5685] = sv14[5523] + sv14[5615];
        sv14[5686] = sv14[5524] + sv14[5624];
        sv14[5687] = sv14[5525] + sv14[5633];
        sv14[5688] = sv14[5526] + sv14[5642];
        sv14[5689] = sv14[5527] + sv14[5598];
        sv14[5690] = sv14[5528] + sv14[5607];
        sv14[5691] = sv14[5529] + sv14[5616];
        sv14[5692] = sv14[5530] + sv14[5625];
        sv14[5693] = sv14[5531] + sv14[5634];
        sv14[5694] = sv14[5532] + sv14[5643];
        sv14[5695] = sv14[5533] + sv14[5599];
        sv14[5696] = sv14[5534] + sv14[5600];
        sv14[5697] = sv14[5535] + sv14[5601];
        sv14[5698] = sv14[5536] + sv14[5602];
        sv14[5699] = sv14[5537] + sv14[5603];
        sv14[5700] = sv14[5538] + sv14[5604];
        sv14[5701] = sv14[5539] + sv14[5608];
        sv14[5702] = sv14[5540] + sv14[5609];
        sv14[5703] = sv14[5541] + sv14[5610];
        sv14[5704] = sv14[5542] + sv14[5611];
        sv14[5705] = sv14[5543] + sv14[5612];
        sv14[5706] = sv14[5544] + sv14[5613];
        sv14[5707] = sv14[5545] + sv14[5617];
        sv14[5708] = sv14[5546] + sv14[5618];
        sv14[5709] = sv14[5547] + sv14[5619];
        sv14[5710] = sv14[5548] + sv14[5620];
        sv14[5711] = sv14[5549] + sv14[5621];
        sv14[5712] = sv14[5550] + sv14[5622];
        sv14[5713] = sv14[5551] + sv14[5626];
        sv14[5714] = sv14[5552] + sv14[5635];
        sv14[5715] = sv14[5553] + sv14[5644];
        sv14[5716] = sv14[5554] + sv14[5627];
        sv14[5717] = sv14[5555] + sv14[5636];
        sv14[5718] = sv14[5556] + sv14[5645];
        sv14[5719] = sv14[5557] + sv14[5628];
        sv14[5720] = sv14[5558] + sv14[5637];
        sv14[5721] = sv14[5559] + sv14[5646];
        sv14[5722] = sv14[5560] + sv14[5629];
        sv14[5723] = sv14[5561] + sv14[5630];
        sv14[5724] = sv14[5562] + sv14[5631];
        sv14[5725] = sv14[5563] + sv14[5638];
        sv14[5726] = sv14[5564] + sv14[5639];
        sv14[5727] = sv14[5565] + sv14[5640];
        sv14[5728] = sv14[5566] + sv14[5647];
        sv14[5729] = sv14[5567] + sv14[5648];
        sv14[5730] = sv14[5568] + sv14[5649];
        sv14[5731] = sp[250] + -1 * sv14[5650];
        sv14[5732] = sp[251] + -1 * sv14[5651];
        sv14[5733] = sp[252] + -1 * sv14[5652];
        sv14[5734] = sp[251] + -1 * sv14[5659];
        sv14[5735] = sp[253] + -1 * sv14[5660];
        sv14[5736] = sp[254] + -1 * sv14[5661];
        sv14[5737] = sp[252] + -1 * sv14[5668];
        sv14[5738] = sp[254] + -1 * sv14[5669];
        sv14[5739] = sp[255] + -1 * sv14[5670];
        sv14[5740] = sp[250] + -1 * sv14[5695];
        sv14[5741] = sp[251] + -1 * sv14[5696];
        sv14[5742] = sp[252] + -1 * sv14[5697];
        sv14[5743] = sp[251] + -1 * sv14[5701];
        sv14[5744] = sp[253] + -1 * sv14[5702];
        sv14[5745] = sp[254] + -1 * sv14[5703];
        sv14[5746] = sp[252] + -1 * sv14[5707];
        sv14[5747] = sp[254] + -1 * sv14[5708];
        sv14[5748] = sp[255] + -1 * sv14[5709];
        sv14[5749] = sp[250] + -1 * sv14[5722];
        sv14[5750] = sp[251] + -1 * sv14[5723];
        sv14[5751] = sp[252] + -1 * sv14[5724];
        sv14[5752] = sp[251] + -1 * sv14[5725];
        sv14[5753] = sp[253] + -1 * sv14[5726];
        sv14[5754] = sp[254] + -1 * sv14[5727];
        sv14[5755] = sp[252] + -1 * sv14[5728];
        sv14[5756] = sp[254] + -1 * sv14[5729];
        sv14[5757] = sp[255] + -1 * sv14[5730];
        sv14[5758] = sv14[5731] + -1 * sv14[5569];
        sv14[5759] = sv14[5732] + -1 * sv14[5578];
        sv14[5760] = sv14[5733] + -1 * sv14[5587];
        sv14[5761] = -1 * sv14[5653] + -1 * sv14[5596];
        sv14[5762] = -1 * sv14[5654] + -1 * sv14[5605];
        sv14[5763] = -1 * sv14[5655] + -1 * sv14[5614];
        sv14[5764] = -1 * sv14[5656] + -1 * sv14[5623];
        sv14[5765] = -1 * sv14[5657] + -1 * sv14[5632];
        sv14[5766] = -1 * sv14[5658] + -1 * sv14[5641];
        sv14[5767] = sv14[5734] + -1 * sv14[5570];
        sv14[5768] = sv14[5735] + -1 * sv14[5579];
        sv14[5769] = sv14[5736] + -1 * sv14[5588];
        sv14[5770] = -1 * sv14[5662] + -1 * sv14[5597];
        sv14[5771] = -1 * sv14[5663] + -1 * sv14[5606];
        sv14[5772] = -1 * sv14[5664] + -1 * sv14[5615];
        sv14[5773] = -1 * sv14[5665] + -1 * sv14[5624];
        sv14[5774] = -1 * sv14[5666] + -1 * sv14[5633];
        sv14[5775] = -1 * sv14[5667] + -1 * sv14[5642];
        sv14[5776] = sv14[5737] + -1 * sv14[5571];
        sv14[5777] = sv14[5738] + -1 * sv14[5580];
        sv14[5778] = sv14[5739] + -1 * sv14[5589];
        sv14[5779] = -1 * sv14[5671] + -1 * sv14[5598];
        sv14[5780] = -1 * sv14[5672] + -1 * sv14[5607];
        sv14[5781] = -1 * sv14[5673] + -1 * sv14[5616];
        sv14[5782] = -1 * sv14[5674] + -1 * sv14[5625];
        sv14[5783] = -1 * sv14[5675] + -1 * sv14[5634];
        sv14[5784] = -1 * sv14[5676] + -1 * sv14[5643];
        sv14[5785] = -1 * sv14[5677] + -1 * sv14[5572];
        sv14[5786] = -1 * sv14[5678] + -1 * sv14[5573];
        sv14[5787] = -1 * sv14[5679] + -1 * sv14[5574];
        sv14[5788] = -1 * sv14[5680] + -1 * sv14[5575];
        sv14[5789] = -1 * sv14[5681] + -1 * sv14[5576];
        sv14[5790] = -1 * sv14[5682] + -1 * sv14[5577];
        sv14[5791] = -1 * sv14[5683] + -1 * sv14[5581];
        sv14[5792] = -1 * sv14[5684] + -1 * sv14[5582];
        sv14[5793] = -1 * sv14[5685] + -1 * sv14[5583];
        sv14[5794] = -1 * sv14[5686] + -1 * sv14[5584];
        sv14[5795] = -1 * sv14[5687] + -1 * sv14[5585];
        sv14[5796] = -1 * sv14[5688] + -1 * sv14[5586];
        sv14[5797] = -1 * sv14[5689] + -1 * sv14[5590];
        sv14[5798] = -1 * sv14[5690] + -1 * sv14[5591];
        sv14[5799] = -1 * sv14[5691] + -1 * sv14[5592];
        sv14[5800] = -1 * sv14[5692] + -1 * sv14[5593];
        sv14[5801] = -1 * sv14[5693] + -1 * sv14[5594];
        sv14[5802] = -1 * sv14[5694] + -1 * sv14[5595];
        sv14[5803] = sv14[5740] + -1 * sv14[5599];
        sv14[5804] = sv14[5741] + -1 * sv14[5608];
        sv14[5805] = sv14[5742] + -1 * sv14[5617];
        sv14[5806] = -1 * sv14[5698] + -1 * sv14[5626];
        sv14[5807] = -1 * sv14[5699] + -1 * sv14[5635];
        sv14[5808] = -1 * sv14[5700] + -1 * sv14[5644];
        sv14[5809] = sv14[5743] + -1 * sv14[5600];
        sv14[5810] = sv14[5744] + -1 * sv14[5609];
        sv14[5811] = sv14[5745] + -1 * sv14[5618];
        sv14[5812] = -1 * sv14[5704] + -1 * sv14[5627];
        sv14[5813] = -1 * sv14[5705] + -1 * sv14[5636];
        sv14[5814] = -1 * sv14[5706] + -1 * sv14[5645];
        sv14[5815] = sv14[5746] + -1 * sv14[5601];
        sv14[5816] = sv14[5747] + -1 * sv14[5610];
        sv14[5817] = sv14[5748] + -1 * sv14[5619];
        sv14[5818] = -1 * sv14[5710] + -1 * sv14[5628];
        sv14[5819] = -1 * sv14[5711] + -1 * sv14[5637];
        sv14[5820] = -1 * sv14[5712] + -1 * sv14[5646];
        sv14[5821] = -1 * sv14[5713] + -1 * sv14[5602];
        sv14[5822] = -1 * sv14[5714] + -1 * sv14[5603];
        sv14[5823] = -1 * sv14[5715] + -1 * sv14[5604];
        sv14[5824] = -1 * sv14[5716] + -1 * sv14[5611];
        sv14[5825] = -1 * sv14[5717] + -1 * sv14[5612];
        sv14[5826] = -1 * sv14[5718] + -1 * sv14[5613];
        sv14[5827] = -1 * sv14[5719] + -1 * sv14[5620];
        sv14[5828] = -1 * sv14[5720] + -1 * sv14[5621];
        sv14[5829] = -1 * sv14[5721] + -1 * sv14[5622];
        sv14[5830] = sv14[5749] + -1 * sv14[5629];
        sv14[5831] = sv14[5750] + -1 * sv14[5638];
        sv14[5832] = sv14[5751] + -1 * sv14[5647];
        sv14[5833] = sv14[5752] + -1 * sv14[5630];
        sv14[5834] = sv14[5753] + -1 * sv14[5639];
        sv14[5835] = sv14[5754] + -1 * sv14[5648];
        sv14[5836] = sv14[5755] + -1 * sv14[5631];
        sv14[5837] = sv14[5756] + -1 * sv14[5640];
        sv14[5838] = sv14[5757] + -1 * sv14[5649];
        sv14[5839] = sv14[5758] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5840] = sv14[5759] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5841] = sv14[5760] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5842] = sv14[5761] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5843] = sv14[5762] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5844] = sv14[5763] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5845] = sv14[5764] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5846] = sv14[5765] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5847] = sv14[5766] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5848] = sv14[5767] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5849] = sv14[5768] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5850] = sv14[5769] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5851] = sv14[5770] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5852] = sv14[5771] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5853] = sv14[5772] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5854] = sv14[5773] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5855] = sv14[5774] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5856] = sv14[5775] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5857] = sv14[5776] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5858] = sv14[5777] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5859] = sv14[5778] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5860] = sv14[5779] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5861] = sv14[5780] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5862] = sv14[5781] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5863] = sv14[5782] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5864] = sv14[5783] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5865] = sv14[5784] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5866] = sv14[5785] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5867] = sv14[5786] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5868] = sv14[5787] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5869] = sv14[5788] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5870] = sv14[5789] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5871] = sv14[5790] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5872] = sv14[5791] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5873] = sv14[5792] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5874] = sv14[5793] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5875] = sv14[5794] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5876] = sv14[5795] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5877] = sv14[5796] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5878] = sv14[5797] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5879] = sv14[5798] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5880] = sv14[5799] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5881] = sv14[5800] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5882] = sv14[5801] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5883] = sv14[5802] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5884] = sv14[5803] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5885] = sv14[5804] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5886] = sv14[5805] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5887] = sv14[5806] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5888] = sv14[5807] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5889] = sv14[5808] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5890] = sv14[5809] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5891] = sv14[5810] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5892] = sv14[5811] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5893] = sv14[5812] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5894] = sv14[5813] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5895] = sv14[5814] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5896] = sv14[5815] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5897] = sv14[5816] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5898] = sv14[5817] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5899] = sv14[5818] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5900] = sv14[5819] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5901] = sv14[5820] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5902] = sv14[5821] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5903] = sv14[5822] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5904] = sv14[5823] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5905] = sv14[5824] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5906] = sv14[5825] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5907] = sv14[5826] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5908] = sv14[5827] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5909] = sv14[5828] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5910] = sv14[5829] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5911] = sv14[5830] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5912] = sv14[5831] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5913] = sv14[5832] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5914] = sv14[5833] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5915] = sv14[5834] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5916] = sv14[5835] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5917] = sv14[5836] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5918] = sv14[5837] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5919] = sv14[5838] / std::pow(sv14[502], 0.3333333333333333);
        sv14[5920] = (-1 + sv14[5170]) * (2 * sv14[5839]);
        sv14[5921] = (-1 + sv14[5170]) * (2 * sv14[5840]);
        sv14[5922] = (-1 + sv14[5170]) * (2 * sv14[5841]);
        sv14[5923] = (-1 + sv14[5170]) * (2 * sv14[5842]);
        sv14[5924] = (-1 + sv14[5170]) * (2 * sv14[5843]);
        sv14[5925] = (-1 + sv14[5170]) * (2 * sv14[5844]);
        sv14[5926] = (-1 + sv14[5170]) * (2 * sv14[5845]);
        sv14[5927] = (-1 + sv14[5170]) * (2 * sv14[5846]);
        sv14[5928] = (-1 + sv14[5170]) * (2 * sv14[5847]);
        sv14[5929] = (-1 + sv14[5170]) * (2 * sv14[5848]);
        sv14[5930] = (-1 + sv14[5170]) * (2 * sv14[5849]);
        sv14[5931] = (-1 + sv14[5170]) * (2 * sv14[5850]);
        sv14[5932] = (-1 + sv14[5170]) * (2 * sv14[5851]);
        sv14[5933] = (-1 + sv14[5170]) * (2 * sv14[5852]);
        sv14[5934] = (-1 + sv14[5170]) * (2 * sv14[5853]);
        sv14[5935] = (-1 + sv14[5170]) * (2 * sv14[5854]);
        sv14[5936] = (-1 + sv14[5170]) * (2 * sv14[5855]);
        sv14[5937] = (-1 + sv14[5170]) * (2 * sv14[5856]);
        sv14[5938] = (-1 + sv14[5170]) * (2 * sv14[5857]);
        sv14[5939] = (-1 + sv14[5170]) * (2 * sv14[5858]);
        sv14[5940] = (-1 + sv14[5170]) * (2 * sv14[5859]);
        sv14[5941] = (-1 + sv14[5170]) * (2 * sv14[5860]);
        sv14[5942] = (-1 + sv14[5170]) * (2 * sv14[5861]);
        sv14[5943] = (-1 + sv14[5170]) * (2 * sv14[5862]);
        sv14[5944] = (-1 + sv14[5170]) * (2 * sv14[5863]);
        sv14[5945] = (-1 + sv14[5170]) * (2 * sv14[5864]);
        sv14[5946] = (-1 + sv14[5170]) * (2 * sv14[5865]);
        sv14[5947] = (-1 + sv14[5170]) * (2 * sv14[5866]);
        sv14[5948] = (-1 + sv14[5170]) * (2 * sv14[5867]);
        sv14[5949] = (-1 + sv14[5170]) * (2 * sv14[5868]);
        sv14[5950] = (-1 + sv14[5170]) * (2 * sv14[5869]);
        sv14[5951] = (-1 + sv14[5170]) * (2 * sv14[5870]);
        sv14[5952] = (-1 + sv14[5170]) * (2 * sv14[5871]);
        sv14[5953] = (-1 + sv14[5170]) * (2 * sv14[5872]);
        sv14[5954] = (-1 + sv14[5170]) * (2 * sv14[5873]);
        sv14[5955] = (-1 + sv14[5170]) * (2 * sv14[5874]);
        sv14[5956] = (-1 + sv14[5170]) * (2 * sv14[5875]);
        sv14[5957] = (-1 + sv14[5170]) * (2 * sv14[5876]);
        sv14[5958] = (-1 + sv14[5170]) * (2 * sv14[5877]);
        sv14[5959] = (-1 + sv14[5170]) * (2 * sv14[5878]);
        sv14[5960] = (-1 + sv14[5170]) * (2 * sv14[5879]);
        sv14[5961] = (-1 + sv14[5170]) * (2 * sv14[5880]);
        sv14[5962] = (-1 + sv14[5170]) * (2 * sv14[5881]);
        sv14[5963] = (-1 + sv14[5170]) * (2 * sv14[5882]);
        sv14[5964] = (-1 + sv14[5170]) * (2 * sv14[5883]);
        sv14[5965] = (-1 + sv14[5170]) * (2 * sv14[5884]);
        sv14[5966] = (-1 + sv14[5170]) * (2 * sv14[5885]);
        sv14[5967] = (-1 + sv14[5170]) * (2 * sv14[5886]);
        sv14[5968] = (-1 + sv14[5170]) * (2 * sv14[5887]);
        sv14[5969] = (-1 + sv14[5170]) * (2 * sv14[5888]);
        sv14[5970] = (-1 + sv14[5170]) * (2 * sv14[5889]);
        sv14[5971] = (-1 + sv14[5170]) * (2 * sv14[5890]);
        sv14[5972] = (-1 + sv14[5170]) * (2 * sv14[5891]);
        sv14[5973] = (-1 + sv14[5170]) * (2 * sv14[5892]);
        sv14[5974] = (-1 + sv14[5170]) * (2 * sv14[5893]);
        sv14[5975] = (-1 + sv14[5170]) * (2 * sv14[5894]);
        sv14[5976] = (-1 + sv14[5170]) * (2 * sv14[5895]);
        sv14[5977] = (-1 + sv14[5170]) * (2 * sv14[5896]);
        sv14[5978] = (-1 + sv14[5170]) * (2 * sv14[5897]);
        sv14[5979] = (-1 + sv14[5170]) * (2 * sv14[5898]);
        sv14[5980] = (-1 + sv14[5170]) * (2 * sv14[5899]);
        sv14[5981] = (-1 + sv14[5170]) * (2 * sv14[5900]);
        sv14[5982] = (-1 + sv14[5170]) * (2 * sv14[5901]);
        sv14[5983] = (-1 + sv14[5170]) * (2 * sv14[5902]);
        sv14[5984] = (-1 + sv14[5170]) * (2 * sv14[5903]);
        sv14[5985] = (-1 + sv14[5170]) * (2 * sv14[5904]);
        sv14[5986] = (-1 + sv14[5170]) * (2 * sv14[5905]);
        sv14[5987] = (-1 + sv14[5170]) * (2 * sv14[5906]);
        sv14[5988] = (-1 + sv14[5170]) * (2 * sv14[5907]);
        sv14[5989] = (-1 + sv14[5170]) * (2 * sv14[5908]);
        sv14[5990] = (-1 + sv14[5170]) * (2 * sv14[5909]);
        sv14[5991] = (-1 + sv14[5170]) * (2 * sv14[5910]);
        sv14[5992] = (-1 + sv14[5170]) * (2 * sv14[5911]);
        sv14[5993] = (-1 + sv14[5170]) * (2 * sv14[5912]);
        sv14[5994] = (-1 + sv14[5170]) * (2 * sv14[5913]);
        sv14[5995] = (-1 + sv14[5170]) * (2 * sv14[5914]);
        sv14[5996] = (-1 + sv14[5170]) * (2 * sv14[5915]);
        sv14[5997] = (-1 + sv14[5170]) * (2 * sv14[5916]);
        sv14[5998] = (-1 + sv14[5170]) * (2 * sv14[5917]);
        sv14[5999] = (-1 + sv14[5170]) * (2 * sv14[5918]);
        sv14[6000] = (-1 + sv14[5170]) * (2 * sv14[5919]);
        sv14[6001] = 2 * sv14[5369] * sv14[5369];
        sv14[6002] = 2 * sv14[5369] * sv14[5370];
        sv14[6003] = 2 * sv14[5369] * sv14[5371];
        sv14[6004] = 2 * sv14[5369] * sv14[5372];
        sv14[6005] = 2 * sv14[5369] * sv14[5373];
        sv14[6006] = 2 * sv14[5369] * sv14[5374];
        sv14[6007] = 2 * sv14[5369] * sv14[5375];
        sv14[6008] = 2 * sv14[5369] * sv14[5376];
        sv14[6009] = 2 * sv14[5369] * sv14[5377];
        sv14[6010] = 2 * sv14[5370] * sv14[5369];
        sv14[6011] = 2 * sv14[5370] * sv14[5370];
        sv14[6012] = 2 * sv14[5370] * sv14[5371];
        sv14[6013] = 2 * sv14[5370] * sv14[5372];
        sv14[6014] = 2 * sv14[5370] * sv14[5373];
        sv14[6015] = 2 * sv14[5370] * sv14[5374];
        sv14[6016] = 2 * sv14[5370] * sv14[5375];
        sv14[6017] = 2 * sv14[5370] * sv14[5376];
        sv14[6018] = 2 * sv14[5370] * sv14[5377];
        sv14[6019] = 2 * sv14[5371] * sv14[5369];
        sv14[6020] = 2 * sv14[5371] * sv14[5370];
        sv14[6021] = 2 * sv14[5371] * sv14[5371];
        sv14[6022] = 2 * sv14[5371] * sv14[5372];
        sv14[6023] = 2 * sv14[5371] * sv14[5373];
        sv14[6024] = 2 * sv14[5371] * sv14[5374];
        sv14[6025] = 2 * sv14[5371] * sv14[5375];
        sv14[6026] = 2 * sv14[5371] * sv14[5376];
        sv14[6027] = 2 * sv14[5371] * sv14[5377];
        sv14[6028] = 2 * sv14[5372] * sv14[5369];
        sv14[6029] = 2 * sv14[5372] * sv14[5370];
        sv14[6030] = 2 * sv14[5372] * sv14[5371];
        sv14[6031] = 2 * sv14[5372] * sv14[5372];
        sv14[6032] = 2 * sv14[5372] * sv14[5373];
        sv14[6033] = 2 * sv14[5372] * sv14[5374];
        sv14[6034] = 2 * sv14[5372] * sv14[5375];
        sv14[6035] = 2 * sv14[5372] * sv14[5376];
        sv14[6036] = 2 * sv14[5372] * sv14[5377];
        sv14[6037] = 2 * sv14[5373] * sv14[5369];
        sv14[6038] = 2 * sv14[5373] * sv14[5370];
        sv14[6039] = 2 * sv14[5373] * sv14[5371];
        sv14[6040] = 2 * sv14[5373] * sv14[5372];
        sv14[6041] = 2 * sv14[5373] * sv14[5373];
        sv14[6042] = 2 * sv14[5373] * sv14[5374];
        sv14[6043] = 2 * sv14[5373] * sv14[5375];
        sv14[6044] = 2 * sv14[5373] * sv14[5376];
        sv14[6045] = 2 * sv14[5373] * sv14[5377];
        sv14[6046] = 2 * sv14[5374] * sv14[5369];
        sv14[6047] = 2 * sv14[5374] * sv14[5370];
        sv14[6048] = 2 * sv14[5374] * sv14[5371];
        sv14[6049] = 2 * sv14[5374] * sv14[5372];
        sv14[6050] = 2 * sv14[5374] * sv14[5373];
        sv14[6051] = 2 * sv14[5374] * sv14[5374];
        sv14[6052] = 2 * sv14[5374] * sv14[5375];
        sv14[6053] = 2 * sv14[5374] * sv14[5376];
        sv14[6054] = 2 * sv14[5374] * sv14[5377];
        sv14[6055] = 2 * sv14[5375] * sv14[5369];
        sv14[6056] = 2 * sv14[5375] * sv14[5370];
        sv14[6057] = 2 * sv14[5375] * sv14[5371];
        sv14[6058] = 2 * sv14[5375] * sv14[5372];
        sv14[6059] = 2 * sv14[5375] * sv14[5373];
        sv14[6060] = 2 * sv14[5375] * sv14[5374];
        sv14[6061] = 2 * sv14[5375] * sv14[5375];
        sv14[6062] = 2 * sv14[5375] * sv14[5376];
        sv14[6063] = 2 * sv14[5375] * sv14[5377];
        sv14[6064] = 2 * sv14[5376] * sv14[5369];
        sv14[6065] = 2 * sv14[5376] * sv14[5370];
        sv14[6066] = 2 * sv14[5376] * sv14[5371];
        sv14[6067] = 2 * sv14[5376] * sv14[5372];
        sv14[6068] = 2 * sv14[5376] * sv14[5373];
        sv14[6069] = 2 * sv14[5376] * sv14[5374];
        sv14[6070] = 2 * sv14[5376] * sv14[5375];
        sv14[6071] = 2 * sv14[5376] * sv14[5376];
        sv14[6072] = 2 * sv14[5376] * sv14[5377];
        sv14[6073] = 2 * sv14[5377] * sv14[5369];
        sv14[6074] = 2 * sv14[5377] * sv14[5370];
        sv14[6075] = 2 * sv14[5377] * sv14[5371];
        sv14[6076] = 2 * sv14[5377] * sv14[5372];
        sv14[6077] = 2 * sv14[5377] * sv14[5373];
        sv14[6078] = 2 * sv14[5377] * sv14[5374];
        sv14[6079] = 2 * sv14[5377] * sv14[5375];
        sv14[6080] = 2 * sv14[5377] * sv14[5376];
        sv14[6081] = 2 * sv14[5377] * sv14[5377];
        sv14[6082] = sv14[5920] + sv14[6001];
        sv14[6083] = sv14[5921] + sv14[6002];
        sv14[6084] = sv14[5922] + sv14[6003];
        sv14[6085] = sv14[5923] + sv14[6004];
        sv14[6086] = sv14[5924] + sv14[6005];
        sv14[6087] = sv14[5925] + sv14[6006];
        sv14[6088] = sv14[5926] + sv14[6007];
        sv14[6089] = sv14[5927] + sv14[6008];
        sv14[6090] = sv14[5928] + sv14[6009];
        sv14[6091] = sv14[5929] + sv14[6010];
        sv14[6092] = sv14[5930] + sv14[6011];
        sv14[6093] = sv14[5931] + sv14[6012];
        sv14[6094] = sv14[5932] + sv14[6013];
        sv14[6095] = sv14[5933] + sv14[6014];
        sv14[6096] = sv14[5934] + sv14[6015];
        sv14[6097] = sv14[5935] + sv14[6016];
        sv14[6098] = sv14[5936] + sv14[6017];
        sv14[6099] = sv14[5937] + sv14[6018];
        sv14[6100] = sv14[5938] + sv14[6019];
        sv14[6101] = sv14[5939] + sv14[6020];
        sv14[6102] = sv14[5940] + sv14[6021];
        sv14[6103] = sv14[5941] + sv14[6022];
        sv14[6104] = sv14[5942] + sv14[6023];
        sv14[6105] = sv14[5943] + sv14[6024];
        sv14[6106] = sv14[5944] + sv14[6025];
        sv14[6107] = sv14[5945] + sv14[6026];
        sv14[6108] = sv14[5946] + sv14[6027];
        sv14[6109] = sv14[5947] + sv14[6028];
        sv14[6110] = sv14[5948] + sv14[6037];
        sv14[6111] = sv14[5949] + sv14[6046];
        sv14[6112] = sv14[5950] + sv14[6055];
        sv14[6113] = sv14[5951] + sv14[6064];
        sv14[6114] = sv14[5952] + sv14[6073];
        sv14[6115] = sv14[5953] + sv14[6029];
        sv14[6116] = sv14[5954] + sv14[6038];
        sv14[6117] = sv14[5955] + sv14[6047];
        sv14[6118] = sv14[5956] + sv14[6056];
        sv14[6119] = sv14[5957] + sv14[6065];
        sv14[6120] = sv14[5958] + sv14[6074];
        sv14[6121] = sv14[5959] + sv14[6030];
        sv14[6122] = sv14[5960] + sv14[6039];
        sv14[6123] = sv14[5961] + sv14[6048];
        sv14[6124] = sv14[5962] + sv14[6057];
        sv14[6125] = sv14[5963] + sv14[6066];
        sv14[6126] = sv14[5964] + sv14[6075];
        sv14[6127] = sv14[5965] + sv14[6031];
        sv14[6128] = sv14[5966] + sv14[6032];
        sv14[6129] = sv14[5967] + sv14[6033];
        sv14[6130] = sv14[5968] + sv14[6034];
        sv14[6131] = sv14[5969] + sv14[6035];
        sv14[6132] = sv14[5970] + sv14[6036];
        sv14[6133] = sv14[5971] + sv14[6040];
        sv14[6134] = sv14[5972] + sv14[6041];
        sv14[6135] = sv14[5973] + sv14[6042];
        sv14[6136] = sv14[5974] + sv14[6043];
        sv14[6137] = sv14[5975] + sv14[6044];
        sv14[6138] = sv14[5976] + sv14[6045];
        sv14[6139] = sv14[5977] + sv14[6049];
        sv14[6140] = sv14[5978] + sv14[6050];
        sv14[6141] = sv14[5979] + sv14[6051];
        sv14[6142] = sv14[5980] + sv14[6052];
        sv14[6143] = sv14[5981] + sv14[6053];
        sv14[6144] = sv14[5982] + sv14[6054];
        sv14[6145] = sv14[5983] + sv14[6058];
        sv14[6146] = sv14[5984] + sv14[6067];
        sv14[6147] = sv14[5985] + sv14[6076];
        sv14[6148] = sv14[5986] + sv14[6059];
        sv14[6149] = sv14[5987] + sv14[6068];
        sv14[6150] = sv14[5988] + sv14[6077];
        sv14[6151] = sv14[5989] + sv14[6060];
        sv14[6152] = sv14[5990] + sv14[6069];
        sv14[6153] = sv14[5991] + sv14[6078];
        sv14[6154] = sv14[5992] + sv14[6061];
        sv14[6155] = sv14[5993] + sv14[6062];
        sv14[6156] = sv14[5994] + sv14[6063];
        sv14[6157] = sv14[5995] + sv14[6070];
        sv14[6158] = sv14[5996] + sv14[6071];
        sv14[6159] = sv14[5997] + sv14[6072];
        sv14[6160] = sv14[5998] + sv14[6079];
        sv14[6161] = sv14[5999] + sv14[6080];
        sv14[6162] = sv14[6000] + sv14[6081];
        sv14[6163] = sv14[6082] * w[8][0];
        sv14[6164] = sv14[6083] * w[8][0];
        sv14[6165] = sv14[6084] * w[8][0];
        sv14[6166] = sv14[6085] * w[8][0];
        sv14[6167] = sv14[6086] * w[8][0];
        sv14[6168] = sv14[6087] * w[8][0];
        sv14[6169] = sv14[6088] * w[8][0];
        sv14[6170] = sv14[6089] * w[8][0];
        sv14[6171] = sv14[6090] * w[8][0];
        sv14[6172] = sv14[6091] * w[8][0];
        sv14[6173] = sv14[6092] * w[8][0];
        sv14[6174] = sv14[6093] * w[8][0];
        sv14[6175] = sv14[6094] * w[8][0];
        sv14[6176] = sv14[6095] * w[8][0];
        sv14[6177] = sv14[6096] * w[8][0];
        sv14[6178] = sv14[6097] * w[8][0];
        sv14[6179] = sv14[6098] * w[8][0];
        sv14[6180] = sv14[6099] * w[8][0];
        sv14[6181] = sv14[6100] * w[8][0];
        sv14[6182] = sv14[6101] * w[8][0];
        sv14[6183] = sv14[6102] * w[8][0];
        sv14[6184] = sv14[6103] * w[8][0];
        sv14[6185] = sv14[6104] * w[8][0];
        sv14[6186] = sv14[6105] * w[8][0];
        sv14[6187] = sv14[6106] * w[8][0];
        sv14[6188] = sv14[6107] * w[8][0];
        sv14[6189] = sv14[6108] * w[8][0];
        sv14[6190] = sv14[6109] * w[8][0];
        sv14[6191] = sv14[6110] * w[8][0];
        sv14[6192] = sv14[6111] * w[8][0];
        sv14[6193] = sv14[6112] * w[8][0];
        sv14[6194] = sv14[6113] * w[8][0];
        sv14[6195] = sv14[6114] * w[8][0];
        sv14[6196] = sv14[6115] * w[8][0];
        sv14[6197] = sv14[6116] * w[8][0];
        sv14[6198] = sv14[6117] * w[8][0];
        sv14[6199] = sv14[6118] * w[8][0];
        sv14[6200] = sv14[6119] * w[8][0];
        sv14[6201] = sv14[6120] * w[8][0];
        sv14[6202] = sv14[6121] * w[8][0];
        sv14[6203] = sv14[6122] * w[8][0];
        sv14[6204] = sv14[6123] * w[8][0];
        sv14[6205] = sv14[6124] * w[8][0];
        sv14[6206] = sv14[6125] * w[8][0];
        sv14[6207] = sv14[6126] * w[8][0];
        sv14[6208] = sv14[6127] * w[8][0];
        sv14[6209] = sv14[6128] * w[8][0];
        sv14[6210] = sv14[6129] * w[8][0];
        sv14[6211] = sv14[6130] * w[8][0];
        sv14[6212] = sv14[6131] * w[8][0];
        sv14[6213] = sv14[6132] * w[8][0];
        sv14[6214] = sv14[6133] * w[8][0];
        sv14[6215] = sv14[6134] * w[8][0];
        sv14[6216] = sv14[6135] * w[8][0];
        sv14[6217] = sv14[6136] * w[8][0];
        sv14[6218] = sv14[6137] * w[8][0];
        sv14[6219] = sv14[6138] * w[8][0];
        sv14[6220] = sv14[6139] * w[8][0];
        sv14[6221] = sv14[6140] * w[8][0];
        sv14[6222] = sv14[6141] * w[8][0];
        sv14[6223] = sv14[6142] * w[8][0];
        sv14[6224] = sv14[6143] * w[8][0];
        sv14[6225] = sv14[6144] * w[8][0];
        sv14[6226] = sv14[6145] * w[8][0];
        sv14[6227] = sv14[6146] * w[8][0];
        sv14[6228] = sv14[6147] * w[8][0];
        sv14[6229] = sv14[6148] * w[8][0];
        sv14[6230] = sv14[6149] * w[8][0];
        sv14[6231] = sv14[6150] * w[8][0];
        sv14[6232] = sv14[6151] * w[8][0];
        sv14[6233] = sv14[6152] * w[8][0];
        sv14[6234] = sv14[6153] * w[8][0];
        sv14[6235] = sv14[6154] * w[8][0];
        sv14[6236] = sv14[6155] * w[8][0];
        sv14[6237] = sv14[6156] * w[8][0];
        sv14[6238] = sv14[6157] * w[8][0];
        sv14[6239] = sv14[6158] * w[8][0];
        sv14[6240] = sv14[6159] * w[8][0];
        sv14[6241] = sv14[6160] * w[8][0];
        sv14[6242] = sv14[6161] * w[8][0];
        sv14[6243] = sv14[6162] * w[8][0];
        sv14[6244] = sv14[6163] * sv14[5397];
        sv14[6245] = sv14[6164] * sv14[5397];
        sv14[6246] = sv14[6165] * sv14[5397];
        sv14[6247] = sv14[6166] * sv14[5397];
        sv14[6248] = sv14[6167] * sv14[5397];
        sv14[6249] = sv14[6168] * sv14[5397];
        sv14[6250] = sv14[6169] * sv14[5397];
        sv14[6251] = sv14[6170] * sv14[5397];
        sv14[6252] = sv14[6171] * sv14[5397];
        sv14[6253] = sv14[6172] * sv14[5397];
        sv14[6254] = sv14[6173] * sv14[5397];
        sv14[6255] = sv14[6174] * sv14[5397];
        sv14[6256] = sv14[6175] * sv14[5397];
        sv14[6257] = sv14[6176] * sv14[5397];
        sv14[6258] = sv14[6177] * sv14[5397];
        sv14[6259] = sv14[6178] * sv14[5397];
        sv14[6260] = sv14[6179] * sv14[5397];
        sv14[6261] = sv14[6180] * sv14[5397];
        sv14[6262] = sv14[6181] * sv14[5397];
        sv14[6263] = sv14[6182] * sv14[5397];
        sv14[6264] = sv14[6183] * sv14[5397];
        sv14[6265] = sv14[6184] * sv14[5397];
        sv14[6266] = sv14[6185] * sv14[5397];
        sv14[6267] = sv14[6186] * sv14[5397];
        sv14[6268] = sv14[6187] * sv14[5397];
        sv14[6269] = sv14[6188] * sv14[5397];
        sv14[6270] = sv14[6189] * sv14[5397];
        sv14[6271] = sv14[6190] * sv14[5397];
        sv14[6272] = sv14[6191] * sv14[5397];
        sv14[6273] = sv14[6192] * sv14[5397];
        sv14[6274] = sv14[6193] * sv14[5397];
        sv14[6275] = sv14[6194] * sv14[5397];
        sv14[6276] = sv14[6195] * sv14[5397];
        sv14[6277] = sv14[6196] * sv14[5397];
        sv14[6278] = sv14[6197] * sv14[5397];
        sv14[6279] = sv14[6198] * sv14[5397];
        sv14[6280] = sv14[6199] * sv14[5397];
        sv14[6281] = sv14[6200] * sv14[5397];
        sv14[6282] = sv14[6201] * sv14[5397];
        sv14[6283] = sv14[6202] * sv14[5397];
        sv14[6284] = sv14[6203] * sv14[5397];
        sv14[6285] = sv14[6204] * sv14[5397];
        sv14[6286] = sv14[6205] * sv14[5397];
        sv14[6287] = sv14[6206] * sv14[5397];
        sv14[6288] = sv14[6207] * sv14[5397];
        sv14[6289] = sv14[6208] * sv14[5397];
        sv14[6290] = sv14[6209] * sv14[5397];
        sv14[6291] = sv14[6210] * sv14[5397];
        sv14[6292] = sv14[6211] * sv14[5397];
        sv14[6293] = sv14[6212] * sv14[5397];
        sv14[6294] = sv14[6213] * sv14[5397];
        sv14[6295] = sv14[6214] * sv14[5397];
        sv14[6296] = sv14[6215] * sv14[5397];
        sv14[6297] = sv14[6216] * sv14[5397];
        sv14[6298] = sv14[6217] * sv14[5397];
        sv14[6299] = sv14[6218] * sv14[5397];
        sv14[6300] = sv14[6219] * sv14[5397];
        sv14[6301] = sv14[6220] * sv14[5397];
        sv14[6302] = sv14[6221] * sv14[5397];
        sv14[6303] = sv14[6222] * sv14[5397];
        sv14[6304] = sv14[6223] * sv14[5397];
        sv14[6305] = sv14[6224] * sv14[5397];
        sv14[6306] = sv14[6225] * sv14[5397];
        sv14[6307] = sv14[6226] * sv14[5397];
        sv14[6308] = sv14[6227] * sv14[5397];
        sv14[6309] = sv14[6228] * sv14[5397];
        sv14[6310] = sv14[6229] * sv14[5397];
        sv14[6311] = sv14[6230] * sv14[5397];
        sv14[6312] = sv14[6231] * sv14[5397];
        sv14[6313] = sv14[6232] * sv14[5397];
        sv14[6314] = sv14[6233] * sv14[5397];
        sv14[6315] = sv14[6234] * sv14[5397];
        sv14[6316] = sv14[6235] * sv14[5397];
        sv14[6317] = sv14[6236] * sv14[5397];
        sv14[6318] = sv14[6237] * sv14[5397];
        sv14[6319] = sv14[6238] * sv14[5397];
        sv14[6320] = sv14[6239] * sv14[5397];
        sv14[6321] = sv14[6240] * sv14[5397];
        sv14[6322] = sv14[6241] * sv14[5397];
        sv14[6323] = sv14[6242] * sv14[5397];
        sv14[6324] = sv14[6243] * sv14[5397];
        sv14[6325] = sv14[5407] + sv14[6244];
        sv14[6326] = sv14[5416] + sv14[6245];
        sv14[6327] = sv14[5425] + sv14[6246];
        sv14[6328] = sv14[5434] + sv14[6247];
        sv14[6329] = sv14[5443] + sv14[6248];
        sv14[6330] = sv14[5452] + sv14[6249];
        sv14[6331] = sv14[5461] + sv14[6250];
        sv14[6332] = sv14[5470] + sv14[6251];
        sv14[6333] = sv14[5479] + sv14[6252];
        sv14[6334] = sv14[5408] + sv14[6253];
        sv14[6335] = sv14[5417] + sv14[6254];
        sv14[6336] = sv14[5426] + sv14[6255];
        sv14[6337] = sv14[5435] + sv14[6256];
        sv14[6338] = sv14[5444] + sv14[6257];
        sv14[6339] = sv14[5453] + sv14[6258];
        sv14[6340] = sv14[5462] + sv14[6259];
        sv14[6341] = sv14[5471] + sv14[6260];
        sv14[6342] = sv14[5480] + sv14[6261];
        sv14[6343] = sv14[5409] + sv14[6262];
        sv14[6344] = sv14[5418] + sv14[6263];
        sv14[6345] = sv14[5427] + sv14[6264];
        sv14[6346] = sv14[5436] + sv14[6265];
        sv14[6347] = sv14[5445] + sv14[6266];
        sv14[6348] = sv14[5454] + sv14[6267];
        sv14[6349] = sv14[5463] + sv14[6268];
        sv14[6350] = sv14[5472] + sv14[6269];
        sv14[6351] = sv14[5481] + sv14[6270];
        sv14[6352] = sv14[5410] + sv14[6271];
        sv14[6353] = sv14[5411] + sv14[6272];
        sv14[6354] = sv14[5412] + sv14[6273];
        sv14[6355] = sv14[5413] + sv14[6274];
        sv14[6356] = sv14[5414] + sv14[6275];
        sv14[6357] = sv14[5415] + sv14[6276];
        sv14[6358] = sv14[5419] + sv14[6277];
        sv14[6359] = sv14[5420] + sv14[6278];
        sv14[6360] = sv14[5421] + sv14[6279];
        sv14[6361] = sv14[5422] + sv14[6280];
        sv14[6362] = sv14[5423] + sv14[6281];
        sv14[6363] = sv14[5424] + sv14[6282];
        sv14[6364] = sv14[5428] + sv14[6283];
        sv14[6365] = sv14[5429] + sv14[6284];
        sv14[6366] = sv14[5430] + sv14[6285];
        sv14[6367] = sv14[5431] + sv14[6286];
        sv14[6368] = sv14[5432] + sv14[6287];
        sv14[6369] = sv14[5433] + sv14[6288];
        sv14[6370] = sv14[5437] + sv14[6289];
        sv14[6371] = sv14[5446] + sv14[6290];
        sv14[6372] = sv14[5455] + sv14[6291];
        sv14[6373] = sv14[5464] + sv14[6292];
        sv14[6374] = sv14[5473] + sv14[6293];
        sv14[6375] = sv14[5482] + sv14[6294];
        sv14[6376] = sv14[5438] + sv14[6295];
        sv14[6377] = sv14[5447] + sv14[6296];
        sv14[6378] = sv14[5456] + sv14[6297];
        sv14[6379] = sv14[5465] + sv14[6298];
        sv14[6380] = sv14[5474] + sv14[6299];
        sv14[6381] = sv14[5483] + sv14[6300];
        sv14[6382] = sv14[5439] + sv14[6301];
        sv14[6383] = sv14[5448] + sv14[6302];
        sv14[6384] = sv14[5457] + sv14[6303];
        sv14[6385] = sv14[5466] + sv14[6304];
        sv14[6386] = sv14[5475] + sv14[6305];
        sv14[6387] = sv14[5484] + sv14[6306];
        sv14[6388] = sv14[5440] + sv14[6307];
        sv14[6389] = sv14[5441] + sv14[6308];
        sv14[6390] = sv14[5442] + sv14[6309];
        sv14[6391] = sv14[5449] + sv14[6310];
        sv14[6392] = sv14[5450] + sv14[6311];
        sv14[6393] = sv14[5451] + sv14[6312];
        sv14[6394] = sv14[5458] + sv14[6313];
        sv14[6395] = sv14[5459] + sv14[6314];
        sv14[6396] = sv14[5460] + sv14[6315];
        sv14[6397] = sv14[5467] + sv14[6316];
        sv14[6398] = sv14[5476] + sv14[6317];
        sv14[6399] = sv14[5485] + sv14[6318];
        sv14[6400] = sv14[5468] + sv14[6319];
        sv14[6401] = sv14[5477] + sv14[6320];
        sv14[6402] = sv14[5486] + sv14[6321];
        sv14[6403] = sv14[5469] + sv14[6322];
        sv14[6404] = sv14[5478] + sv14[6323];
        sv14[6405] = sv14[5487] + sv14[6324];
        sv14[6406] = sv14[6325] * (sp[256] / 2.0);
        sv14[6407] = sv14[6326] * (sp[256] / 2.0);
        sv14[6408] = sv14[6327] * (sp[256] / 2.0);
        sv14[6409] = sv14[6328] * (sp[256] / 2.0);
        sv14[6410] = sv14[6329] * (sp[256] / 2.0);
        sv14[6411] = sv14[6330] * (sp[256] / 2.0);
        sv14[6412] = sv14[6331] * (sp[256] / 2.0);
        sv14[6413] = sv14[6332] * (sp[256] / 2.0);
        sv14[6414] = sv14[6333] * (sp[256] / 2.0);
        sv14[6415] = sv14[6334] * (sp[256] / 2.0);
        sv14[6416] = sv14[6335] * (sp[256] / 2.0);
        sv14[6417] = sv14[6336] * (sp[256] / 2.0);
        sv14[6418] = sv14[6337] * (sp[256] / 2.0);
        sv14[6419] = sv14[6338] * (sp[256] / 2.0);
        sv14[6420] = sv14[6339] * (sp[256] / 2.0);
        sv14[6421] = sv14[6340] * (sp[256] / 2.0);
        sv14[6422] = sv14[6341] * (sp[256] / 2.0);
        sv14[6423] = sv14[6342] * (sp[256] / 2.0);
        sv14[6424] = sv14[6343] * (sp[256] / 2.0);
        sv14[6425] = sv14[6344] * (sp[256] / 2.0);
        sv14[6426] = sv14[6345] * (sp[256] / 2.0);
        sv14[6427] = sv14[6346] * (sp[256] / 2.0);
        sv14[6428] = sv14[6347] * (sp[256] / 2.0);
        sv14[6429] = sv14[6348] * (sp[256] / 2.0);
        sv14[6430] = sv14[6349] * (sp[256] / 2.0);
        sv14[6431] = sv14[6350] * (sp[256] / 2.0);
        sv14[6432] = sv14[6351] * (sp[256] / 2.0);
        sv14[6433] = sv14[6352] * (sp[256] / 2.0);
        sv14[6434] = sv14[6353] * (sp[256] / 2.0);
        sv14[6435] = sv14[6354] * (sp[256] / 2.0);
        sv14[6436] = sv14[6355] * (sp[256] / 2.0);
        sv14[6437] = sv14[6356] * (sp[256] / 2.0);
        sv14[6438] = sv14[6357] * (sp[256] / 2.0);
        sv14[6439] = sv14[6358] * (sp[256] / 2.0);
        sv14[6440] = sv14[6359] * (sp[256] / 2.0);
        sv14[6441] = sv14[6360] * (sp[256] / 2.0);
        sv14[6442] = sv14[6361] * (sp[256] / 2.0);
        sv14[6443] = sv14[6362] * (sp[256] / 2.0);
        sv14[6444] = sv14[6363] * (sp[256] / 2.0);
        sv14[6445] = sv14[6364] * (sp[256] / 2.0);
        sv14[6446] = sv14[6365] * (sp[256] / 2.0);
        sv14[6447] = sv14[6366] * (sp[256] / 2.0);
        sv14[6448] = sv14[6367] * (sp[256] / 2.0);
        sv14[6449] = sv14[6368] * (sp[256] / 2.0);
        sv14[6450] = sv14[6369] * (sp[256] / 2.0);
        sv14[6451] = sv14[6370] * (sp[256] / 2.0);
        sv14[6452] = sv14[6371] * (sp[256] / 2.0);
        sv14[6453] = sv14[6372] * (sp[256] / 2.0);
        sv14[6454] = sv14[6373] * (sp[256] / 2.0);
        sv14[6455] = sv14[6374] * (sp[256] / 2.0);
        sv14[6456] = sv14[6375] * (sp[256] / 2.0);
        sv14[6457] = sv14[6376] * (sp[256] / 2.0);
        sv14[6458] = sv14[6377] * (sp[256] / 2.0);
        sv14[6459] = sv14[6378] * (sp[256] / 2.0);
        sv14[6460] = sv14[6379] * (sp[256] / 2.0);
        sv14[6461] = sv14[6380] * (sp[256] / 2.0);
        sv14[6462] = sv14[6381] * (sp[256] / 2.0);
        sv14[6463] = sv14[6382] * (sp[256] / 2.0);
        sv14[6464] = sv14[6383] * (sp[256] / 2.0);
        sv14[6465] = sv14[6384] * (sp[256] / 2.0);
        sv14[6466] = sv14[6385] * (sp[256] / 2.0);
        sv14[6467] = sv14[6386] * (sp[256] / 2.0);
        sv14[6468] = sv14[6387] * (sp[256] / 2.0);
        sv14[6469] = sv14[6388] * (sp[256] / 2.0);
        sv14[6470] = sv14[6389] * (sp[256] / 2.0);
        sv14[6471] = sv14[6390] * (sp[256] / 2.0);
        sv14[6472] = sv14[6391] * (sp[256] / 2.0);
        sv14[6473] = sv14[6392] * (sp[256] / 2.0);
        sv14[6474] = sv14[6393] * (sp[256] / 2.0);
        sv14[6475] = sv14[6394] * (sp[256] / 2.0);
        sv14[6476] = sv14[6395] * (sp[256] / 2.0);
        sv14[6477] = sv14[6396] * (sp[256] / 2.0);
        sv14[6478] = sv14[6397] * (sp[256] / 2.0);
        sv14[6479] = sv14[6398] * (sp[256] / 2.0);
        sv14[6480] = sv14[6399] * (sp[256] / 2.0);
        sv14[6481] = sv14[6400] * (sp[256] / 2.0);
        sv14[6482] = sv14[6401] * (sp[256] / 2.0);
        sv14[6483] = sv14[6402] * (sp[256] / 2.0);
        sv14[6484] = sv14[6403] * (sp[256] / 2.0);
        sv14[6485] = sv14[6404] * (sp[256] / 2.0);
        sv14[6486] = sv14[6405] * (sp[256] / 2.0);
        sv14[6487] = sv14[6406] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6488] = sv14[6407] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6489] = sv14[6408] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6490] = sv14[6409] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6491] = sv14[6410] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6492] = sv14[6411] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6493] = sv14[6412] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6494] = sv14[6413] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6495] = sv14[6414] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6496] = sv14[6415] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6497] = sv14[6416] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6498] = sv14[6417] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6499] = sv14[6418] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6500] = sv14[6419] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6501] = sv14[6420] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6502] = sv14[6421] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6503] = sv14[6422] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6504] = sv14[6423] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6505] = sv14[6424] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6506] = sv14[6425] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6507] = sv14[6426] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6508] = sv14[6427] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6509] = sv14[6428] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6510] = sv14[6429] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6511] = sv14[6430] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6512] = sv14[6431] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6513] = sv14[6432] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6514] = sv14[6433] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6515] = sv14[6434] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6516] = sv14[6435] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6517] = sv14[6436] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6518] = sv14[6437] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6519] = sv14[6438] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6520] = sv14[6439] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6521] = sv14[6440] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6522] = sv14[6441] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6523] = sv14[6442] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6524] = sv14[6443] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6525] = sv14[6444] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6526] = sv14[6445] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6527] = sv14[6446] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6528] = sv14[6447] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6529] = sv14[6448] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6530] = sv14[6449] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6531] = sv14[6450] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6532] = sv14[6451] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6533] = sv14[6452] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6534] = sv14[6453] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6535] = sv14[6454] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6536] = sv14[6455] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6537] = sv14[6456] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6538] = sv14[6457] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6539] = sv14[6458] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6540] = sv14[6459] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6541] = sv14[6460] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6542] = sv14[6461] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6543] = sv14[6462] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6544] = sv14[6463] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6545] = sv14[6464] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6546] = sv14[6465] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6547] = sv14[6466] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6548] = sv14[6467] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6549] = sv14[6468] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6550] = sv14[6469] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6551] = sv14[6470] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6552] = sv14[6471] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6553] = sv14[6472] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6554] = sv14[6473] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6555] = sv14[6474] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6556] = sv14[6475] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6557] = sv14[6476] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6558] = sv14[6477] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6559] = sv14[6478] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6560] = sv14[6479] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6561] = sv14[6480] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6562] = sv14[6481] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6563] = sv14[6482] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6564] = sv14[6483] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6565] = sv14[6484] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6566] = sv14[6485] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6567] = sv14[6486] * (-1 + sv14[5170] <= 1e-10 ? 0.0 : 1);
        sv14[6568] = sv14[5069] + sv14[6487];
        sv14[6569] = sv14[5070] + sv14[6488];
        sv14[6570] = sv14[5071] + sv14[6489];
        sv14[6571] = sv14[5072] + sv14[6490];
        sv14[6572] = sv14[5073] + sv14[6491];
        sv14[6573] = sv14[5074] + sv14[6492];
        sv14[6574] = sv14[5075] + sv14[6493];
        sv14[6575] = sv14[5076] + sv14[6494];
        sv14[6576] = sv14[5077] + sv14[6495];
        sv14[6577] = sv14[5078] + sv14[6496];
        sv14[6578] = sv14[5079] + sv14[6497];
        sv14[6579] = sv14[5080] + sv14[6498];
        sv14[6580] = sv14[5081] + sv14[6499];
        sv14[6581] = sv14[5082] + sv14[6500];
        sv14[6582] = sv14[5083] + sv14[6501];
        sv14[6583] = sv14[5084] + sv14[6502];
        sv14[6584] = sv14[5085] + sv14[6503];
        sv14[6585] = sv14[5086] + sv14[6504];
        sv14[6586] = sv14[5087] + sv14[6505];
        sv14[6587] = sv14[5088] + sv14[6506];
        sv14[6588] = sv14[5089] + sv14[6507];
        sv14[6589] = sv14[5090] + sv14[6508];
        sv14[6590] = sv14[5091] + sv14[6509];
        sv14[6591] = sv14[5092] + sv14[6510];
        sv14[6592] = sv14[5093] + sv14[6511];
        sv14[6593] = sv14[5094] + sv14[6512];
        sv14[6594] = sv14[5095] + sv14[6513];
        sv14[6595] = sv14[5096] + sv14[6514];
        sv14[6596] = sv14[5097] + sv14[6515];
        sv14[6597] = sv14[5098] + sv14[6516];
        sv14[6598] = sv14[5099] + sv14[6517];
        sv14[6599] = sv14[5100] + sv14[6518];
        sv14[6600] = sv14[5101] + sv14[6519];
        sv14[6601] = sv14[5102] + sv14[6520];
        sv14[6602] = sv14[5103] + sv14[6521];
        sv14[6603] = sv14[5104] + sv14[6522];
        sv14[6604] = sv14[5105] + sv14[6523];
        sv14[6605] = sv14[5106] + sv14[6524];
        sv14[6606] = sv14[5107] + sv14[6525];
        sv14[6607] = sv14[5108] + sv14[6526];
        sv14[6608] = sv14[5109] + sv14[6527];
        sv14[6609] = sv14[5110] + sv14[6528];
        sv14[6610] = sv14[5111] + sv14[6529];
        sv14[6611] = sv14[5112] + sv14[6530];
        sv14[6612] = sv14[5113] + sv14[6531];
        sv14[6613] = sv14[5114] + sv14[6532];
        sv14[6614] = sv14[5115] + sv14[6533];
        sv14[6615] = sv14[5116] + sv14[6534];
        sv14[6616] = sv14[5117] + sv14[6535];
        sv14[6617] = sv14[5118] + sv14[6536];
        sv14[6618] = sv14[5119] + sv14[6537];
        sv14[6619] = sv14[5120] + sv14[6538];
        sv14[6620] = sv14[5121] + sv14[6539];
        sv14[6621] = sv14[5122] + sv14[6540];
        sv14[6622] = sv14[5123] + sv14[6541];
        sv14[6623] = sv14[5124] + sv14[6542];
        sv14[6624] = sv14[5125] + sv14[6543];
        sv14[6625] = sv14[5126] + sv14[6544];
        sv14[6626] = sv14[5127] + sv14[6545];
        sv14[6627] = sv14[5128] + sv14[6546];
        sv14[6628] = sv14[5129] + sv14[6547];
        sv14[6629] = sv14[5130] + sv14[6548];
        sv14[6630] = sv14[5131] + sv14[6549];
        sv14[6631] = sv14[5132] + sv14[6550];
        sv14[6632] = sv14[5133] + sv14[6551];
        sv14[6633] = sv14[5134] + sv14[6552];
        sv14[6634] = sv14[5135] + sv14[6553];
        sv14[6635] = sv14[5136] + sv14[6554];
        sv14[6636] = sv14[5137] + sv14[6555];
        sv14[6637] = sv14[5138] + sv14[6556];
        sv14[6638] = sv14[5139] + sv14[6557];
        sv14[6639] = sv14[5140] + sv14[6558];
        sv14[6640] = sv14[5141] + sv14[6559];
        sv14[6641] = sv14[5142] + sv14[6560];
        sv14[6642] = sv14[5143] + sv14[6561];
        sv14[6643] = sv14[5144] + sv14[6562];
        sv14[6644] = sv14[5145] + sv14[6563];
        sv14[6645] = sv14[5146] + sv14[6564];
        sv14[6646] = sv14[5147] + sv14[6565];
        sv14[6647] = sv14[5148] + sv14[6566];
        sv14[6648] = sv14[5149] + sv14[6567];
        sv14[6649] = w[2][0] * sv14[181];
        sv14[6650] = w[2][1] * sv14[329];
        sv14[6651] = sv14[6649] + sv14[6650];
        sv14[6652] = w[2][2] * sv14[234];
        sv14[6653] = sv14[6651] + sv14[6652];
        sv14[6654] = w[2][0] * sv14[6653];
        sv14[6655] = w[2][0] * sv14[329];
        sv14[6656] = w[2][1] * sv14[84];
        sv14[6657] = sv14[6655] + sv14[6656];
        sv14[6658] = w[2][2] * sv14[134];
        sv14[6659] = sv14[6657] + sv14[6658];
        sv14[6660] = w[2][1] * sv14[6659];
        sv14[6661] = sv14[6654] + sv14[6660];
        sv14[6662] = w[2][0] * sv14[234];
        sv14[6663] = w[2][1] * sv14[134];
        sv14[6664] = sv14[6662] + sv14[6663];
        sv14[6665] = w[2][2] * sv14[52];
        sv14[6666] = sv14[6664] + sv14[6665];
        sv14[6667] = w[2][2] * sv14[6666];
        sv14[6668] = sv14[6661] + sv14[6667];
        sv14[6669] = sv14[6668] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6670] = w[2][0] * sv14[194];
        sv14[6671] = w[2][0] * sv14[195];
        sv14[6672] = w[2][0] * sv14[196];
        sv14[6673] = w[2][0] * sv14[200];
        sv14[6674] = w[2][0] * sv14[201];
        sv14[6675] = w[2][0] * sv14[202];
        sv14[6676] = w[2][0] * sv14[206];
        sv14[6677] = w[2][0] * sv14[207];
        sv14[6678] = w[2][0] * sv14[208];
        sv14[6679] = w[2][1] * sv14[295];
        sv14[6680] = w[2][1] * sv14[296];
        sv14[6681] = w[2][1] * sv14[297];
        sv14[6682] = w[2][1] * sv14[304];
        sv14[6683] = w[2][1] * sv14[305];
        sv14[6684] = w[2][1] * sv14[306];
        sv14[6685] = w[2][1] * sv14[313];
        sv14[6686] = w[2][1] * sv14[314];
        sv14[6687] = w[2][1] * sv14[315];
        sv14[6688] = sv14[6670] + sv14[6679];
        sv14[6689] = sv14[6671] + sv14[6680];
        sv14[6690] = sv14[6672] + sv14[6681];
        sv14[6691] = sv14[6682] + sv14[6673];
        sv14[6692] = sv14[6683] + sv14[6674];
        sv14[6693] = sv14[6675] + sv14[6684];
        sv14[6694] = sv14[6676] + sv14[6685];
        sv14[6695] = sv14[6677] + sv14[6686];
        sv14[6696] = sv14[6678] + sv14[6687];
        sv14[6697] = w[2][2] * sv14[250];
        sv14[6698] = w[2][2] * sv14[251];
        sv14[6699] = w[2][2] * sv14[252];
        sv14[6700] = w[2][2] * sv14[259];
        sv14[6701] = w[2][2] * sv14[260];
        sv14[6702] = w[2][2] * sv14[261];
        sv14[6703] = w[2][2] * sv14[268];
        sv14[6704] = w[2][2] * sv14[269];
        sv14[6705] = w[2][2] * sv14[270];
        sv14[6706] = sv14[6688] + sv14[6697];
        sv14[6707] = sv14[6689] + sv14[6698];
        sv14[6708] = sv14[6690] + sv14[6699];
        sv14[6709] = sv14[6691] + sv14[6700];
        sv14[6710] = sv14[6692] + sv14[6701];
        sv14[6711] = sv14[6693] + sv14[6702];
        sv14[6712] = sv14[6694] + sv14[6703];
        sv14[6713] = sv14[6695] + sv14[6704];
        sv14[6714] = sv14[6696] + sv14[6705];
        sv14[6715] = w[2][0] * sv14[6706];
        sv14[6716] = w[2][0] * sv14[6707];
        sv14[6717] = w[2][0] * sv14[6708];
        sv14[6718] = w[2][0] * sv14[6709];
        sv14[6719] = w[2][0] * sv14[6710];
        sv14[6720] = w[2][0] * sv14[6711];
        sv14[6721] = w[2][0] * sv14[6712];
        sv14[6722] = w[2][0] * sv14[6713];
        sv14[6723] = w[2][0] * sv14[6714];
        sv14[6724] = w[2][0] * sv14[295];
        sv14[6725] = w[2][0] * sv14[296];
        sv14[6726] = w[2][0] * sv14[297];
        sv14[6727] = w[2][0] * sv14[304];
        sv14[6728] = w[2][0] * sv14[305];
        sv14[6729] = w[2][0] * sv14[306];
        sv14[6730] = w[2][0] * sv14[313];
        sv14[6731] = w[2][0] * sv14[314];
        sv14[6732] = w[2][0] * sv14[315];
        sv14[6733] = w[2][1] * sv14[8];
        sv14[6734] = w[2][1] * sv14[9];
        sv14[6735] = w[2][1] * sv14[10];
        sv14[6736] = w[2][1] * sv14[19];
        sv14[6737] = w[2][1] * sv14[20];
        sv14[6738] = w[2][1] * sv14[21];
        sv14[6739] = w[2][1] * sv14[30];
        sv14[6740] = w[2][1] * sv14[31];
        sv14[6741] = w[2][1] * sv14[32];
        sv14[6742] = sv14[6733] + sv14[6724];
        sv14[6743] = sv14[6734] + sv14[6725];
        sv14[6744] = sv14[6726] + sv14[6735];
        sv14[6745] = sv14[6736] + sv14[6727];
        sv14[6746] = sv14[6737] + sv14[6728];
        sv14[6747] = sv14[6738] + sv14[6729];
        sv14[6748] = sv14[6739] + sv14[6730];
        sv14[6749] = sv14[6740] + sv14[6731];
        sv14[6750] = sv14[6732] + sv14[6741];
        sv14[6751] = w[2][2] * sv14[109];
        sv14[6752] = w[2][2] * sv14[110];
        sv14[6753] = w[2][2] * sv14[111];
        sv14[6754] = w[2][2] * sv14[118];
        sv14[6755] = w[2][2] * sv14[119];
        sv14[6756] = w[2][2] * sv14[120];
        sv14[6757] = w[2][2] * sv14[127];
        sv14[6758] = w[2][2] * sv14[128];
        sv14[6759] = w[2][2] * sv14[129];
        sv14[6760] = sv14[6742] + sv14[6751];
        sv14[6761] = sv14[6743] + sv14[6752];
        sv14[6762] = sv14[6744] + sv14[6753];
        sv14[6763] = sv14[6745] + sv14[6754];
        sv14[6764] = sv14[6746] + sv14[6755];
        sv14[6765] = sv14[6747] + sv14[6756];
        sv14[6766] = sv14[6748] + sv14[6757];
        sv14[6767] = sv14[6749] + sv14[6758];
        sv14[6768] = sv14[6750] + sv14[6759];
        sv14[6769] = w[2][1] * sv14[6760];
        sv14[6770] = w[2][1] * sv14[6761];
        sv14[6771] = w[2][1] * sv14[6762];
        sv14[6772] = w[2][1] * sv14[6763];
        sv14[6773] = w[2][1] * sv14[6764];
        sv14[6774] = w[2][1] * sv14[6765];
        sv14[6775] = w[2][1] * sv14[6766];
        sv14[6776] = w[2][1] * sv14[6767];
        sv14[6777] = w[2][1] * sv14[6768];
        sv14[6778] = sv14[6769] + sv14[6715];
        sv14[6779] = sv14[6770] + sv14[6716];
        sv14[6780] = sv14[6717] + sv14[6771];
        sv14[6781] = sv14[6772] + sv14[6718];
        sv14[6782] = sv14[6773] + sv14[6719];
        sv14[6783] = sv14[6720] + sv14[6774];
        sv14[6784] = sv14[6775] + sv14[6721];
        sv14[6785] = sv14[6776] + sv14[6722];
        sv14[6786] = sv14[6723] + sv14[6777];
        sv14[6787] = w[2][0] * sv14[250];
        sv14[6788] = w[2][0] * sv14[251];
        sv14[6789] = w[2][0] * sv14[252];
        sv14[6790] = w[2][0] * sv14[259];
        sv14[6791] = w[2][0] * sv14[260];
        sv14[6792] = w[2][0] * sv14[261];
        sv14[6793] = w[2][0] * sv14[268];
        sv14[6794] = w[2][0] * sv14[269];
        sv14[6795] = w[2][0] * sv14[270];
        sv14[6796] = w[2][1] * sv14[109];
        sv14[6797] = w[2][1] * sv14[110];
        sv14[6798] = w[2][1] * sv14[111];
        sv14[6799] = w[2][1] * sv14[118];
        sv14[6800] = w[2][1] * sv14[119];
        sv14[6801] = w[2][1] * sv14[120];
        sv14[6802] = w[2][1] * sv14[127];
        sv14[6803] = w[2][1] * sv14[128];
        sv14[6804] = w[2][1] * sv14[129];
        sv14[6805] = sv14[6796] + sv14[6787];
        sv14[6806] = sv14[6797] + sv14[6788];
        sv14[6807] = sv14[6789] + sv14[6798];
        sv14[6808] = sv14[6799] + sv14[6790];
        sv14[6809] = sv14[6800] + sv14[6791];
        sv14[6810] = sv14[6792] + sv14[6801];
        sv14[6811] = sv14[6802] + sv14[6793];
        sv14[6812] = sv14[6803] + sv14[6794];
        sv14[6813] = sv14[6795] + sv14[6804];
        sv14[6814] = w[2][2] * sv14[65];
        sv14[6815] = w[2][2] * sv14[66];
        sv14[6816] = w[2][2] * sv14[67];
        sv14[6817] = w[2][2] * sv14[71];
        sv14[6818] = w[2][2] * sv14[72];
        sv14[6819] = w[2][2] * sv14[73];
        sv14[6820] = w[2][2] * sv14[77];
        sv14[6821] = w[2][2] * sv14[78];
        sv14[6822] = w[2][2] * sv14[79];
        sv14[6823] = sv14[6805] + sv14[6814];
        sv14[6824] = sv14[6806] + sv14[6815];
        sv14[6825] = sv14[6807] + sv14[6816];
        sv14[6826] = sv14[6808] + sv14[6817];
        sv14[6827] = sv14[6809] + sv14[6818];
        sv14[6828] = sv14[6810] + sv14[6819];
        sv14[6829] = sv14[6811] + sv14[6820];
        sv14[6830] = sv14[6812] + sv14[6821];
        sv14[6831] = sv14[6813] + sv14[6822];
        sv14[6832] = w[2][2] * sv14[6823];
        sv14[6833] = w[2][2] * sv14[6824];
        sv14[6834] = w[2][2] * sv14[6825];
        sv14[6835] = w[2][2] * sv14[6826];
        sv14[6836] = w[2][2] * sv14[6827];
        sv14[6837] = w[2][2] * sv14[6828];
        sv14[6838] = w[2][2] * sv14[6829];
        sv14[6839] = w[2][2] * sv14[6830];
        sv14[6840] = w[2][2] * sv14[6831];
        sv14[6841] = sv14[6778] + sv14[6832];
        sv14[6842] = sv14[6779] + sv14[6833];
        sv14[6843] = sv14[6780] + sv14[6834];
        sv14[6844] = sv14[6781] + sv14[6835];
        sv14[6845] = sv14[6782] + sv14[6836];
        sv14[6846] = sv14[6783] + sv14[6837];
        sv14[6847] = sv14[6784] + sv14[6838];
        sv14[6848] = sv14[6785] + sv14[6839];
        sv14[6849] = sv14[6786] + sv14[6840];
        sv14[6850] = sv14[3272] * sv14[6669];
        sv14[6851] = sv14[3273] * sv14[6669];
        sv14[6852] = sv14[3274] * sv14[6669];
        sv14[6853] = sv14[3275] * sv14[6669];
        sv14[6854] = sv14[3276] * sv14[6669];
        sv14[6855] = sv14[3277] * sv14[6669];
        sv14[6856] = sv14[3278] * sv14[6669];
        sv14[6857] = sv14[3279] * sv14[6669];
        sv14[6858] = sv14[3280] * sv14[6669];
        sv14[6859] = sv14[6841] + -1 * sv14[6850];
        sv14[6860] = sv14[6842] + -1 * sv14[6851];
        sv14[6861] = sv14[6843] + -1 * sv14[6852];
        sv14[6862] = sv14[6844] + -1 * sv14[6853];
        sv14[6863] = sv14[6845] + -1 * sv14[6854];
        sv14[6864] = sv14[6846] + -1 * sv14[6855];
        sv14[6865] = sv14[6847] + -1 * sv14[6856];
        sv14[6866] = sv14[6848] + -1 * sv14[6857];
        sv14[6867] = sv14[6849] + -1 * sv14[6858];
        sv14[6868] = sv14[6859] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6869] = sv14[6860] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6870] = sv14[6861] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6871] = sv14[6862] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6872] = sv14[6863] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6873] = sv14[6864] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6874] = sv14[6865] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6875] = sv14[6866] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6876] = sv14[6867] / std::pow(sv14[502], 0.3333333333333333);
        sv14[6877] = (-1 + sv14[6669]) * (2 * sv14[6868]);
        sv14[6878] = (-1 + sv14[6669]) * (2 * sv14[6869]);
        sv14[6879] = (-1 + sv14[6669]) * (2 * sv14[6870]);
        sv14[6880] = (-1 + sv14[6669]) * (2 * sv14[6871]);
        sv14[6881] = (-1 + sv14[6669]) * (2 * sv14[6872]);
        sv14[6882] = (-1 + sv14[6669]) * (2 * sv14[6873]);
        sv14[6883] = (-1 + sv14[6669]) * (2 * sv14[6874]);
        sv14[6884] = (-1 + sv14[6669]) * (2 * sv14[6875]);
        sv14[6885] = (-1 + sv14[6669]) * (2 * sv14[6876]);
        sv14[6886] = sv14[6877] * w[8][0];
        sv14[6887] = sv14[6878] * w[8][0];
        sv14[6888] = sv14[6879] * w[8][0];
        sv14[6889] = sv14[6880] * w[8][0];
        sv14[6890] = sv14[6881] * w[8][0];
        sv14[6891] = sv14[6882] * w[8][0];
        sv14[6892] = sv14[6883] * w[8][0];
        sv14[6893] = sv14[6884] * w[8][0];
        sv14[6894] = sv14[6885] * w[8][0];
        sv14[6895] = std::pow(-1 + sv14[6669], 2) * w[8][0];
        sv14[6896] = std::exp(sv14[6895]);
        sv14[6897] = sv14[6886] * sv14[6896];
        sv14[6898] = sv14[6887] * sv14[6896];
        sv14[6899] = sv14[6888] * sv14[6896];
        sv14[6900] = sv14[6889] * sv14[6896];
        sv14[6901] = sv14[6890] * sv14[6896];
        sv14[6902] = sv14[6891] * sv14[6896];
        sv14[6903] = sv14[6892] * sv14[6896];
        sv14[6904] = sv14[6893] * sv14[6896];
        sv14[6905] = sv14[6894] * sv14[6896];
        sv14[6906] = sv14[6897] * sv14[6886];
        sv14[6907] = sv14[6897] * sv14[6887];
        sv14[6908] = sv14[6897] * sv14[6888];
        sv14[6909] = sv14[6897] * sv14[6889];
        sv14[6910] = sv14[6897] * sv14[6890];
        sv14[6911] = sv14[6897] * sv14[6891];
        sv14[6912] = sv14[6897] * sv14[6892];
        sv14[6913] = sv14[6897] * sv14[6893];
        sv14[6914] = sv14[6897] * sv14[6894];
        sv14[6915] = sv14[6898] * sv14[6886];
        sv14[6916] = sv14[6898] * sv14[6887];
        sv14[6917] = sv14[6898] * sv14[6888];
        sv14[6918] = sv14[6898] * sv14[6889];
        sv14[6919] = sv14[6898] * sv14[6890];
        sv14[6920] = sv14[6898] * sv14[6891];
        sv14[6921] = sv14[6898] * sv14[6892];
        sv14[6922] = sv14[6898] * sv14[6893];
        sv14[6923] = sv14[6898] * sv14[6894];
        sv14[6924] = sv14[6899] * sv14[6886];
        sv14[6925] = sv14[6899] * sv14[6887];
        sv14[6926] = sv14[6899] * sv14[6888];
        sv14[6927] = sv14[6899] * sv14[6889];
        sv14[6928] = sv14[6899] * sv14[6890];
        sv14[6929] = sv14[6899] * sv14[6891];
        sv14[6930] = sv14[6899] * sv14[6892];
        sv14[6931] = sv14[6899] * sv14[6893];
        sv14[6932] = sv14[6899] * sv14[6894];
        sv14[6933] = sv14[6900] * sv14[6886];
        sv14[6934] = sv14[6900] * sv14[6887];
        sv14[6935] = sv14[6900] * sv14[6888];
        sv14[6936] = sv14[6900] * sv14[6889];
        sv14[6937] = sv14[6900] * sv14[6890];
        sv14[6938] = sv14[6900] * sv14[6891];
        sv14[6939] = sv14[6900] * sv14[6892];
        sv14[6940] = sv14[6900] * sv14[6893];
        sv14[6941] = sv14[6900] * sv14[6894];
        sv14[6942] = sv14[6901] * sv14[6886];
        sv14[6943] = sv14[6901] * sv14[6887];
        sv14[6944] = sv14[6901] * sv14[6888];
        sv14[6945] = sv14[6901] * sv14[6889];
        sv14[6946] = sv14[6901] * sv14[6890];
        sv14[6947] = sv14[6901] * sv14[6891];
        sv14[6948] = sv14[6901] * sv14[6892];
        sv14[6949] = sv14[6901] * sv14[6893];
        sv14[6950] = sv14[6901] * sv14[6894];
        sv14[6951] = sv14[6902] * sv14[6886];
        sv14[6952] = sv14[6902] * sv14[6887];
        sv14[6953] = sv14[6902] * sv14[6888];
        sv14[6954] = sv14[6902] * sv14[6889];
        sv14[6955] = sv14[6902] * sv14[6890];
        sv14[6956] = sv14[6902] * sv14[6891];
        sv14[6957] = sv14[6902] * sv14[6892];
        sv14[6958] = sv14[6902] * sv14[6893];
        sv14[6959] = sv14[6902] * sv14[6894];
        sv14[6960] = sv14[6903] * sv14[6886];
        sv14[6961] = sv14[6903] * sv14[6887];
        sv14[6962] = sv14[6903] * sv14[6888];
        sv14[6963] = sv14[6903] * sv14[6889];
        sv14[6964] = sv14[6903] * sv14[6890];
        sv14[6965] = sv14[6903] * sv14[6891];
        sv14[6966] = sv14[6903] * sv14[6892];
        sv14[6967] = sv14[6903] * sv14[6893];
        sv14[6968] = sv14[6903] * sv14[6894];
        sv14[6969] = sv14[6904] * sv14[6886];
        sv14[6970] = sv14[6904] * sv14[6887];
        sv14[6971] = sv14[6904] * sv14[6888];
        sv14[6972] = sv14[6904] * sv14[6889];
        sv14[6973] = sv14[6904] * sv14[6890];
        sv14[6974] = sv14[6904] * sv14[6891];
        sv14[6975] = sv14[6904] * sv14[6892];
        sv14[6976] = sv14[6904] * sv14[6893];
        sv14[6977] = sv14[6904] * sv14[6894];
        sv14[6978] = sv14[6905] * sv14[6886];
        sv14[6979] = sv14[6905] * sv14[6887];
        sv14[6980] = sv14[6905] * sv14[6888];
        sv14[6981] = sv14[6905] * sv14[6889];
        sv14[6982] = sv14[6905] * sv14[6890];
        sv14[6983] = sv14[6905] * sv14[6891];
        sv14[6984] = sv14[6905] * sv14[6892];
        sv14[6985] = sv14[6905] * sv14[6893];
        sv14[6986] = sv14[6905] * sv14[6894];
        sv14[6987] = sv14[3107] * sv14[6669];
        sv14[6988] = sv14[3108] * sv14[6669];
        sv14[6989] = sv14[3109] * sv14[6669];
        sv14[6990] = sv14[3110] * sv14[6669];
        sv14[6991] = sv14[3111] * sv14[6669];
        sv14[6992] = sv14[3112] * sv14[6669];
        sv14[6993] = sv14[3113] * sv14[6669];
        sv14[6994] = sv14[3114] * sv14[6669];
        sv14[6995] = sv14[3115] * sv14[6669];
        sv14[6996] = sv14[3116] * sv14[6669];
        sv14[6997] = sv14[3117] * sv14[6669];
        sv14[6998] = sv14[3118] * sv14[6669];
        sv14[6999] = sv14[3119] * sv14[6669];
        sv14[7000] = sv14[3120] * sv14[6669];
        sv14[7001] = sv14[3121] * sv14[6669];
        sv14[7002] = sv14[3122] * sv14[6669];
        sv14[7003] = sv14[3123] * sv14[6669];
        sv14[7004] = sv14[3124] * sv14[6669];
        sv14[7005] = sv14[3125] * sv14[6669];
        sv14[7006] = sv14[3126] * sv14[6669];
        sv14[7007] = sv14[3127] * sv14[6669];
        sv14[7008] = sv14[3128] * sv14[6669];
        sv14[7009] = sv14[3129] * sv14[6669];
        sv14[7010] = sv14[3130] * sv14[6669];
        sv14[7011] = sv14[3131] * sv14[6669];
        sv14[7012] = sv14[3132] * sv14[6669];
        sv14[7013] = sv14[3133] * sv14[6669];
        sv14[7014] = sv14[3134] * sv14[6669];
        sv14[7015] = sv14[3135] * sv14[6669];
        sv14[7016] = sv14[3136] * sv14[6669];
        sv14[7017] = sv14[3137] * sv14[6669];
        sv14[7018] = sv14[3138] * sv14[6669];
        sv14[7019] = sv14[3139] * sv14[6669];
        sv14[7020] = sv14[3140] * sv14[6669];
        sv14[7021] = sv14[3141] * sv14[6669];
        sv14[7022] = sv14[3142] * sv14[6669];
        sv14[7023] = sv14[3143] * sv14[6669];
        sv14[7024] = sv14[3144] * sv14[6669];
        sv14[7025] = sv14[3145] * sv14[6669];
        sv14[7026] = sv14[3146] * sv14[6669];
        sv14[7027] = sv14[3147] * sv14[6669];
        sv14[7028] = sv14[3148] * sv14[6669];
        sv14[7029] = sv14[3149] * sv14[6669];
        sv14[7030] = sv14[3150] * sv14[6669];
        sv14[7031] = sv14[3151] * sv14[6669];
        sv14[7032] = sv14[3152] * sv14[6669];
        sv14[7033] = sv14[3153] * sv14[6669];
        sv14[7034] = sv14[3154] * sv14[6669];
        sv14[7035] = sv14[3155] * sv14[6669];
        sv14[7036] = sv14[3156] * sv14[6669];
        sv14[7037] = sv14[3157] * sv14[6669];
        sv14[7038] = sv14[3158] * sv14[6669];
        sv14[7039] = sv14[3159] * sv14[6669];
        sv14[7040] = sv14[3160] * sv14[6669];
        sv14[7041] = sv14[3161] * sv14[6669];
        sv14[7042] = sv14[3162] * sv14[6669];
        sv14[7043] = sv14[3163] * sv14[6669];
        sv14[7044] = sv14[3164] * sv14[6669];
        sv14[7045] = sv14[3165] * sv14[6669];
        sv14[7046] = sv14[3166] * sv14[6669];
        sv14[7047] = sv14[3167] * sv14[6669];
        sv14[7048] = sv14[3168] * sv14[6669];
        sv14[7049] = sv14[3169] * sv14[6669];
        sv14[7050] = sv14[3170] * sv14[6669];
        sv14[7051] = sv14[3171] * sv14[6669];
        sv14[7052] = sv14[3172] * sv14[6669];
        sv14[7053] = sv14[3173] * sv14[6669];
        sv14[7054] = sv14[3174] * sv14[6669];
        sv14[7055] = sv14[3175] * sv14[6669];
        sv14[7056] = sv14[3176] * sv14[6669];
        sv14[7057] = sv14[3177] * sv14[6669];
        sv14[7058] = sv14[3178] * sv14[6669];
        sv14[7059] = sv14[3179] * sv14[6669];
        sv14[7060] = sv14[3180] * sv14[6669];
        sv14[7061] = sv14[3181] * sv14[6669];
        sv14[7062] = sv14[3182] * sv14[6669];
        sv14[7063] = sv14[3183] * sv14[6669];
        sv14[7064] = sv14[3184] * sv14[6669];
        sv14[7065] = sv14[3185] * sv14[6669];
        sv14[7066] = sv14[3186] * sv14[6669];
        sv14[7067] = sv14[3187] * sv14[6669];
        sv14[7068] = sv14[3272] * sv14[6868];
        sv14[7069] = sv14[3272] * sv14[6869];
        sv14[7070] = sv14[3272] * sv14[6870];
        sv14[7071] = sv14[3272] * sv14[6871];
        sv14[7072] = sv14[3272] * sv14[6872];
        sv14[7073] = sv14[3272] * sv14[6873];
        sv14[7074] = sv14[3272] * sv14[6874];
        sv14[7075] = sv14[3272] * sv14[6875];
        sv14[7076] = sv14[3272] * sv14[6876];
        sv14[7077] = sv14[3273] * sv14[6868];
        sv14[7078] = sv14[3273] * sv14[6869];
        sv14[7079] = sv14[3273] * sv14[6870];
        sv14[7080] = sv14[3273] * sv14[6871];
        sv14[7081] = sv14[3273] * sv14[6872];
        sv14[7082] = sv14[3273] * sv14[6873];
        sv14[7083] = sv14[3273] * sv14[6874];
        sv14[7084] = sv14[3273] * sv14[6875];
        sv14[7085] = sv14[3273] * sv14[6876];
        sv14[7086] = sv14[3274] * sv14[6868];
        sv14[7087] = sv14[3274] * sv14[6869];
        sv14[7088] = sv14[3274] * sv14[6870];
        sv14[7089] = sv14[3274] * sv14[6871];
        sv14[7090] = sv14[3274] * sv14[6872];
        sv14[7091] = sv14[3274] * sv14[6873];
        sv14[7092] = sv14[3274] * sv14[6874];
        sv14[7093] = sv14[3274] * sv14[6875];
        sv14[7094] = sv14[3274] * sv14[6876];
        sv14[7095] = sv14[3275] * sv14[6868];
        sv14[7096] = sv14[3275] * sv14[6869];
        sv14[7097] = sv14[3275] * sv14[6870];
        sv14[7098] = sv14[3275] * sv14[6871];
        sv14[7099] = sv14[3275] * sv14[6872];
        sv14[7100] = sv14[3275] * sv14[6873];
        sv14[7101] = sv14[3275] * sv14[6874];
        sv14[7102] = sv14[3275] * sv14[6875];
        sv14[7103] = sv14[3275] * sv14[6876];
        sv14[7104] = sv14[3276] * sv14[6868];
        sv14[7105] = sv14[3276] * sv14[6869];
        sv14[7106] = sv14[3276] * sv14[6870];
        sv14[7107] = sv14[3276] * sv14[6871];
        sv14[7108] = sv14[3276] * sv14[6872];
        sv14[7109] = sv14[3276] * sv14[6873];
        sv14[7110] = sv14[3276] * sv14[6874];
        sv14[7111] = sv14[3276] * sv14[6875];
        sv14[7112] = sv14[3276] * sv14[6876];
        sv14[7113] = sv14[3277] * sv14[6868];
        sv14[7114] = sv14[3277] * sv14[6869];
        sv14[7115] = sv14[3277] * sv14[6870];
        sv14[7116] = sv14[3277] * sv14[6871];
        sv14[7117] = sv14[3277] * sv14[6872];
        sv14[7118] = sv14[3277] * sv14[6873];
        sv14[7119] = sv14[3277] * sv14[6874];
        sv14[7120] = sv14[3277] * sv14[6875];
        sv14[7121] = sv14[3277] * sv14[6876];
        sv14[7122] = sv14[3278] * sv14[6868];
        sv14[7123] = sv14[3278] * sv14[6869];
        sv14[7124] = sv14[3278] * sv14[6870];
        sv14[7125] = sv14[3278] * sv14[6871];
        sv14[7126] = sv14[3278] * sv14[6872];
        sv14[7127] = sv14[3278] * sv14[6873];
        sv14[7128] = sv14[3278] * sv14[6874];
        sv14[7129] = sv14[3278] * sv14[6875];
        sv14[7130] = sv14[3278] * sv14[6876];
        sv14[7131] = sv14[3279] * sv14[6868];
        sv14[7132] = sv14[3279] * sv14[6869];
        sv14[7133] = sv14[3279] * sv14[6870];
        sv14[7134] = sv14[3279] * sv14[6871];
        sv14[7135] = sv14[3279] * sv14[6872];
        sv14[7136] = sv14[3279] * sv14[6873];
        sv14[7137] = sv14[3279] * sv14[6874];
        sv14[7138] = sv14[3279] * sv14[6875];
        sv14[7139] = sv14[3279] * sv14[6876];
        sv14[7140] = sv14[3280] * sv14[6868];
        sv14[7141] = sv14[3280] * sv14[6869];
        sv14[7142] = sv14[3280] * sv14[6870];
        sv14[7143] = sv14[3280] * sv14[6871];
        sv14[7144] = sv14[3280] * sv14[6872];
        sv14[7145] = sv14[3280] * sv14[6873];
        sv14[7146] = sv14[3280] * sv14[6874];
        sv14[7147] = sv14[3280] * sv14[6875];
        sv14[7148] = sv14[3280] * sv14[6876];
        sv14[7149] = sv14[6987] + sv14[7068];
        sv14[7150] = sv14[6988] + sv14[7069];
        sv14[7151] = sv14[6989] + sv14[7070];
        sv14[7152] = sv14[6990] + sv14[7071];
        sv14[7153] = sv14[6991] + sv14[7072];
        sv14[7154] = sv14[6992] + sv14[7073];
        sv14[7155] = sv14[6993] + sv14[7074];
        sv14[7156] = sv14[6994] + sv14[7075];
        sv14[7157] = sv14[6995] + sv14[7076];
        sv14[7158] = sv14[6996] + sv14[7077];
        sv14[7159] = sv14[6997] + sv14[7078];
        sv14[7160] = sv14[6998] + sv14[7079];
        sv14[7161] = sv14[6999] + sv14[7080];
        sv14[7162] = sv14[7000] + sv14[7081];
        sv14[7163] = sv14[7001] + sv14[7082];
        sv14[7164] = sv14[7002] + sv14[7083];
        sv14[7165] = sv14[7003] + sv14[7084];
        sv14[7166] = sv14[7004] + sv14[7085];
        sv14[7167] = sv14[7005] + sv14[7086];
        sv14[7168] = sv14[7006] + sv14[7087];
        sv14[7169] = sv14[7007] + sv14[7088];
        sv14[7170] = sv14[7008] + sv14[7089];
        sv14[7171] = sv14[7009] + sv14[7090];
        sv14[7172] = sv14[7010] + sv14[7091];
        sv14[7173] = sv14[7011] + sv14[7092];
        sv14[7174] = sv14[7012] + sv14[7093];
        sv14[7175] = sv14[7013] + sv14[7094];
        sv14[7176] = sv14[7014] + sv14[7095];
        sv14[7177] = sv14[7015] + sv14[7104];
        sv14[7178] = sv14[7016] + sv14[7113];
        sv14[7179] = sv14[7017] + sv14[7122];
        sv14[7180] = sv14[7018] + sv14[7131];
        sv14[7181] = sv14[7019] + sv14[7140];
        sv14[7182] = sv14[7020] + sv14[7096];
        sv14[7183] = sv14[7021] + sv14[7105];
        sv14[7184] = sv14[7022] + sv14[7114];
        sv14[7185] = sv14[7023] + sv14[7123];
        sv14[7186] = sv14[7024] + sv14[7132];
        sv14[7187] = sv14[7025] + sv14[7141];
        sv14[7188] = sv14[7026] + sv14[7097];
        sv14[7189] = sv14[7027] + sv14[7106];
        sv14[7190] = sv14[7028] + sv14[7115];
        sv14[7191] = sv14[7029] + sv14[7124];
        sv14[7192] = sv14[7030] + sv14[7133];
        sv14[7193] = sv14[7031] + sv14[7142];
        sv14[7194] = sv14[7032] + sv14[7098];
        sv14[7195] = sv14[7033] + sv14[7099];
        sv14[7196] = sv14[7034] + sv14[7100];
        sv14[7197] = sv14[7035] + sv14[7101];
        sv14[7198] = sv14[7036] + sv14[7102];
        sv14[7199] = sv14[7037] + sv14[7103];
        sv14[7200] = sv14[7038] + sv14[7107];
        sv14[7201] = sv14[7039] + sv14[7108];
        sv14[7202] = sv14[7040] + sv14[7109];
        sv14[7203] = sv14[7041] + sv14[7110];
        sv14[7204] = sv14[7042] + sv14[7111];
        sv14[7205] = sv14[7043] + sv14[7112];
        sv14[7206] = sv14[7044] + sv14[7116];
        sv14[7207] = sv14[7045] + sv14[7117];
        sv14[7208] = sv14[7046] + sv14[7118];
        sv14[7209] = sv14[7047] + sv14[7119];
        sv14[7210] = sv14[7048] + sv14[7120];
        sv14[7211] = sv14[7049] + sv14[7121];
        sv14[7212] = sv14[7050] + sv14[7125];
        sv14[7213] = sv14[7051] + sv14[7134];
        sv14[7214] = sv14[7052] + sv14[7143];
        sv14[7215] = sv14[7053] + sv14[7126];
        sv14[7216] = sv14[7054] + sv14[7135];
        sv14[7217] = sv14[7055] + sv14[7144];
        sv14[7218] = sv14[7056] + sv14[7127];
        sv14[7219] = sv14[7057] + sv14[7136];
        sv14[7220] = sv14[7058] + sv14[7145];
        sv14[7221] = sv14[7059] + sv14[7128];
        sv14[7222] = sv14[7060] + sv14[7129];
        sv14[7223] = sv14[7061] + sv14[7130];
        sv14[7224] = sv14[7062] + sv14[7137];
        sv14[7225] = sv14[7063] + sv14[7138];
        sv14[7226] = sv14[7064] + sv14[7139];
        sv14[7227] = sv14[7065] + sv14[7146];
        sv14[7228] = sv14[7066] + sv14[7147];
        sv14[7229] = sv14[7067] + sv14[7148];
        sv14[7230] = sp[371] + -1 * sv14[7149];
        sv14[7231] = sp[372] + -1 * sv14[7150];
        sv14[7232] = sp[373] + -1 * sv14[7151];
        sv14[7233] = sp[372] + -1 * sv14[7158];
        sv14[7234] = sp[374] + -1 * sv14[7159];
        sv14[7235] = sp[375] + -1 * sv14[7160];
        sv14[7236] = sp[373] + -1 * sv14[7167];
        sv14[7237] = sp[375] + -1 * sv14[7168];
        sv14[7238] = sp[376] + -1 * sv14[7169];
        sv14[7239] = sp[371] + -1 * sv14[7194];
        sv14[7240] = sp[372] + -1 * sv14[7195];
        sv14[7241] = sp[373] + -1 * sv14[7196];
        sv14[7242] = sp[372] + -1 * sv14[7200];
        sv14[7243] = sp[374] + -1 * sv14[7201];
        sv14[7244] = sp[375] + -1 * sv14[7202];
        sv14[7245] = sp[373] + -1 * sv14[7206];
        sv14[7246] = sp[375] + -1 * sv14[7207];
        sv14[7247] = sp[376] + -1 * sv14[7208];
        sv14[7248] = sp[371] + -1 * sv14[7221];
        sv14[7249] = sp[372] + -1 * sv14[7222];
        sv14[7250] = sp[373] + -1 * sv14[7223];
        sv14[7251] = sp[372] + -1 * sv14[7224];
        sv14[7252] = sp[374] + -1 * sv14[7225];
        sv14[7253] = sp[375] + -1 * sv14[7226];
        sv14[7254] = sp[373] + -1 * sv14[7227];
        sv14[7255] = sp[375] + -1 * sv14[7228];
        sv14[7256] = sp[376] + -1 * sv14[7229];
        sv14[7257] = sv14[7230] + -1 * sv14[7068];
        sv14[7258] = sv14[7231] + -1 * sv14[7077];
        sv14[7259] = sv14[7232] + -1 * sv14[7086];
        sv14[7260] = -1 * sv14[7152] + -1 * sv14[7095];
        sv14[7261] = -1 * sv14[7153] + -1 * sv14[7104];
        sv14[7262] = -1 * sv14[7154] + -1 * sv14[7113];
        sv14[7263] = -1 * sv14[7155] + -1 * sv14[7122];
        sv14[7264] = -1 * sv14[7156] + -1 * sv14[7131];
        sv14[7265] = -1 * sv14[7157] + -1 * sv14[7140];
        sv14[7266] = sv14[7233] + -1 * sv14[7069];
        sv14[7267] = sv14[7234] + -1 * sv14[7078];
        sv14[7268] = sv14[7235] + -1 * sv14[7087];
        sv14[7269] = -1 * sv14[7161] + -1 * sv14[7096];
        sv14[7270] = -1 * sv14[7162] + -1 * sv14[7105];
        sv14[7271] = -1 * sv14[7163] + -1 * sv14[7114];
        sv14[7272] = -1 * sv14[7164] + -1 * sv14[7123];
        sv14[7273] = -1 * sv14[7165] + -1 * sv14[7132];
        sv14[7274] = -1 * sv14[7166] + -1 * sv14[7141];
        sv14[7275] = sv14[7236] + -1 * sv14[7070];
        sv14[7276] = sv14[7237] + -1 * sv14[7079];
        sv14[7277] = sv14[7238] + -1 * sv14[7088];
        sv14[7278] = -1 * sv14[7170] + -1 * sv14[7097];
        sv14[7279] = -1 * sv14[7171] + -1 * sv14[7106];
        sv14[7280] = -1 * sv14[7172] + -1 * sv14[7115];
        sv14[7281] = -1 * sv14[7173] + -1 * sv14[7124];
        sv14[7282] = -1 * sv14[7174] + -1 * sv14[7133];
        sv14[7283] = -1 * sv14[7175] + -1 * sv14[7142];
        sv14[7284] = -1 * sv14[7176] + -1 * sv14[7071];
        sv14[7285] = -1 * sv14[7177] + -1 * sv14[7072];
        sv14[7286] = -1 * sv14[7178] + -1 * sv14[7073];
        sv14[7287] = -1 * sv14[7179] + -1 * sv14[7074];
        sv14[7288] = -1 * sv14[7180] + -1 * sv14[7075];
        sv14[7289] = -1 * sv14[7181] + -1 * sv14[7076];
        sv14[7290] = -1 * sv14[7182] + -1 * sv14[7080];
        sv14[7291] = -1 * sv14[7183] + -1 * sv14[7081];
        sv14[7292] = -1 * sv14[7184] + -1 * sv14[7082];
        sv14[7293] = -1 * sv14[7185] + -1 * sv14[7083];
        sv14[7294] = -1 * sv14[7186] + -1 * sv14[7084];
        sv14[7295] = -1 * sv14[7187] + -1 * sv14[7085];
        sv14[7296] = -1 * sv14[7188] + -1 * sv14[7089];
        sv14[7297] = -1 * sv14[7189] + -1 * sv14[7090];
        sv14[7298] = -1 * sv14[7190] + -1 * sv14[7091];
        sv14[7299] = -1 * sv14[7191] + -1 * sv14[7092];
        sv14[7300] = -1 * sv14[7192] + -1 * sv14[7093];
        sv14[7301] = -1 * sv14[7193] + -1 * sv14[7094];
        sv14[7302] = sv14[7239] + -1 * sv14[7098];
        sv14[7303] = sv14[7240] + -1 * sv14[7107];
        sv14[7304] = sv14[7241] + -1 * sv14[7116];
        sv14[7305] = -1 * sv14[7197] + -1 * sv14[7125];
        sv14[7306] = -1 * sv14[7198] + -1 * sv14[7134];
        sv14[7307] = -1 * sv14[7199] + -1 * sv14[7143];
        sv14[7308] = sv14[7242] + -1 * sv14[7099];
        sv14[7309] = sv14[7243] + -1 * sv14[7108];
        sv14[7310] = sv14[7244] + -1 * sv14[7117];
        sv14[7311] = -1 * sv14[7203] + -1 * sv14[7126];
        sv14[7312] = -1 * sv14[7204] + -1 * sv14[7135];
        sv14[7313] = -1 * sv14[7205] + -1 * sv14[7144];
        sv14[7314] = sv14[7245] + -1 * sv14[7100];
        sv14[7315] = sv14[7246] + -1 * sv14[7109];
        sv14[7316] = sv14[7247] + -1 * sv14[7118];
        sv14[7317] = -1 * sv14[7209] + -1 * sv14[7127];
        sv14[7318] = -1 * sv14[7210] + -1 * sv14[7136];
        sv14[7319] = -1 * sv14[7211] + -1 * sv14[7145];
        sv14[7320] = -1 * sv14[7212] + -1 * sv14[7101];
        sv14[7321] = -1 * sv14[7213] + -1 * sv14[7102];
        sv14[7322] = -1 * sv14[7214] + -1 * sv14[7103];
        sv14[7323] = -1 * sv14[7215] + -1 * sv14[7110];
        sv14[7324] = -1 * sv14[7216] + -1 * sv14[7111];
        sv14[7325] = -1 * sv14[7217] + -1 * sv14[7112];
        sv14[7326] = -1 * sv14[7218] + -1 * sv14[7119];
        sv14[7327] = -1 * sv14[7219] + -1 * sv14[7120];
        sv14[7328] = -1 * sv14[7220] + -1 * sv14[7121];
        sv14[7329] = sv14[7248] + -1 * sv14[7128];
        sv14[7330] = sv14[7249] + -1 * sv14[7137];
        sv14[7331] = sv14[7250] + -1 * sv14[7146];
        sv14[7332] = sv14[7251] + -1 * sv14[7129];
        sv14[7333] = sv14[7252] + -1 * sv14[7138];
        sv14[7334] = sv14[7253] + -1 * sv14[7147];
        sv14[7335] = sv14[7254] + -1 * sv14[7130];
        sv14[7336] = sv14[7255] + -1 * sv14[7139];
        sv14[7337] = sv14[7256] + -1 * sv14[7148];
        sv14[7338] = sv14[7257] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7339] = sv14[7258] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7340] = sv14[7259] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7341] = sv14[7260] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7342] = sv14[7261] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7343] = sv14[7262] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7344] = sv14[7263] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7345] = sv14[7264] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7346] = sv14[7265] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7347] = sv14[7266] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7348] = sv14[7267] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7349] = sv14[7268] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7350] = sv14[7269] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7351] = sv14[7270] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7352] = sv14[7271] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7353] = sv14[7272] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7354] = sv14[7273] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7355] = sv14[7274] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7356] = sv14[7275] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7357] = sv14[7276] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7358] = sv14[7277] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7359] = sv14[7278] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7360] = sv14[7279] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7361] = sv14[7280] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7362] = sv14[7281] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7363] = sv14[7282] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7364] = sv14[7283] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7365] = sv14[7284] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7366] = sv14[7285] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7367] = sv14[7286] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7368] = sv14[7287] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7369] = sv14[7288] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7370] = sv14[7289] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7371] = sv14[7290] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7372] = sv14[7291] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7373] = sv14[7292] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7374] = sv14[7293] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7375] = sv14[7294] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7376] = sv14[7295] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7377] = sv14[7296] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7378] = sv14[7297] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7379] = sv14[7298] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7380] = sv14[7299] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7381] = sv14[7300] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7382] = sv14[7301] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7383] = sv14[7302] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7384] = sv14[7303] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7385] = sv14[7304] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7386] = sv14[7305] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7387] = sv14[7306] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7388] = sv14[7307] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7389] = sv14[7308] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7390] = sv14[7309] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7391] = sv14[7310] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7392] = sv14[7311] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7393] = sv14[7312] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7394] = sv14[7313] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7395] = sv14[7314] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7396] = sv14[7315] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7397] = sv14[7316] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7398] = sv14[7317] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7399] = sv14[7318] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7400] = sv14[7319] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7401] = sv14[7320] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7402] = sv14[7321] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7403] = sv14[7322] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7404] = sv14[7323] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7405] = sv14[7324] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7406] = sv14[7325] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7407] = sv14[7326] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7408] = sv14[7327] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7409] = sv14[7328] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7410] = sv14[7329] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7411] = sv14[7330] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7412] = sv14[7331] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7413] = sv14[7332] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7414] = sv14[7333] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7415] = sv14[7334] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7416] = sv14[7335] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7417] = sv14[7336] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7418] = sv14[7337] / std::pow(sv14[502], 0.3333333333333333);
        sv14[7419] = (-1 + sv14[6669]) * (2 * sv14[7338]);
        sv14[7420] = (-1 + sv14[6669]) * (2 * sv14[7339]);
        sv14[7421] = (-1 + sv14[6669]) * (2 * sv14[7340]);
        sv14[7422] = (-1 + sv14[6669]) * (2 * sv14[7341]);
        sv14[7423] = (-1 + sv14[6669]) * (2 * sv14[7342]);
        sv14[7424] = (-1 + sv14[6669]) * (2 * sv14[7343]);
        sv14[7425] = (-1 + sv14[6669]) * (2 * sv14[7344]);
        sv14[7426] = (-1 + sv14[6669]) * (2 * sv14[7345]);
        sv14[7427] = (-1 + sv14[6669]) * (2 * sv14[7346]);
        sv14[7428] = (-1 + sv14[6669]) * (2 * sv14[7347]);
        sv14[7429] = (-1 + sv14[6669]) * (2 * sv14[7348]);
        sv14[7430] = (-1 + sv14[6669]) * (2 * sv14[7349]);
        sv14[7431] = (-1 + sv14[6669]) * (2 * sv14[7350]);
        sv14[7432] = (-1 + sv14[6669]) * (2 * sv14[7351]);
        sv14[7433] = (-1 + sv14[6669]) * (2 * sv14[7352]);
        sv14[7434] = (-1 + sv14[6669]) * (2 * sv14[7353]);
        sv14[7435] = (-1 + sv14[6669]) * (2 * sv14[7354]);
        sv14[7436] = (-1 + sv14[6669]) * (2 * sv14[7355]);
        sv14[7437] = (-1 + sv14[6669]) * (2 * sv14[7356]);
        sv14[7438] = (-1 + sv14[6669]) * (2 * sv14[7357]);
        sv14[7439] = (-1 + sv14[6669]) * (2 * sv14[7358]);
        sv14[7440] = (-1 + sv14[6669]) * (2 * sv14[7359]);
        sv14[7441] = (-1 + sv14[6669]) * (2 * sv14[7360]);
        sv14[7442] = (-1 + sv14[6669]) * (2 * sv14[7361]);
        sv14[7443] = (-1 + sv14[6669]) * (2 * sv14[7362]);
        sv14[7444] = (-1 + sv14[6669]) * (2 * sv14[7363]);
        sv14[7445] = (-1 + sv14[6669]) * (2 * sv14[7364]);
        sv14[7446] = (-1 + sv14[6669]) * (2 * sv14[7365]);
        sv14[7447] = (-1 + sv14[6669]) * (2 * sv14[7366]);
        sv14[7448] = (-1 + sv14[6669]) * (2 * sv14[7367]);
        sv14[7449] = (-1 + sv14[6669]) * (2 * sv14[7368]);
        sv14[7450] = (-1 + sv14[6669]) * (2 * sv14[7369]);
        sv14[7451] = (-1 + sv14[6669]) * (2 * sv14[7370]);
        sv14[7452] = (-1 + sv14[6669]) * (2 * sv14[7371]);
        sv14[7453] = (-1 + sv14[6669]) * (2 * sv14[7372]);
        sv14[7454] = (-1 + sv14[6669]) * (2 * sv14[7373]);
        sv14[7455] = (-1 + sv14[6669]) * (2 * sv14[7374]);
        sv14[7456] = (-1 + sv14[6669]) * (2 * sv14[7375]);
        sv14[7457] = (-1 + sv14[6669]) * (2 * sv14[7376]);
        sv14[7458] = (-1 + sv14[6669]) * (2 * sv14[7377]);
        sv14[7459] = (-1 + sv14[6669]) * (2 * sv14[7378]);
        sv14[7460] = (-1 + sv14[6669]) * (2 * sv14[7379]);
        sv14[7461] = (-1 + sv14[6669]) * (2 * sv14[7380]);
        sv14[7462] = (-1 + sv14[6669]) * (2 * sv14[7381]);
        sv14[7463] = (-1 + sv14[6669]) * (2 * sv14[7382]);
        sv14[7464] = (-1 + sv14[6669]) * (2 * sv14[7383]);
        sv14[7465] = (-1 + sv14[6669]) * (2 * sv14[7384]);
        sv14[7466] = (-1 + sv14[6669]) * (2 * sv14[7385]);
        sv14[7467] = (-1 + sv14[6669]) * (2 * sv14[7386]);
        sv14[7468] = (-1 + sv14[6669]) * (2 * sv14[7387]);
        sv14[7469] = (-1 + sv14[6669]) * (2 * sv14[7388]);
        sv14[7470] = (-1 + sv14[6669]) * (2 * sv14[7389]);
        sv14[7471] = (-1 + sv14[6669]) * (2 * sv14[7390]);
        sv14[7472] = (-1 + sv14[6669]) * (2 * sv14[7391]);
        sv14[7473] = (-1 + sv14[6669]) * (2 * sv14[7392]);
        sv14[7474] = (-1 + sv14[6669]) * (2 * sv14[7393]);
        sv14[7475] = (-1 + sv14[6669]) * (2 * sv14[7394]);
        sv14[7476] = (-1 + sv14[6669]) * (2 * sv14[7395]);
        sv14[7477] = (-1 + sv14[6669]) * (2 * sv14[7396]);
        sv14[7478] = (-1 + sv14[6669]) * (2 * sv14[7397]);
        sv14[7479] = (-1 + sv14[6669]) * (2 * sv14[7398]);
        sv14[7480] = (-1 + sv14[6669]) * (2 * sv14[7399]);
        sv14[7481] = (-1 + sv14[6669]) * (2 * sv14[7400]);
        sv14[7482] = (-1 + sv14[6669]) * (2 * sv14[7401]);
        sv14[7483] = (-1 + sv14[6669]) * (2 * sv14[7402]);
        sv14[7484] = (-1 + sv14[6669]) * (2 * sv14[7403]);
        sv14[7485] = (-1 + sv14[6669]) * (2 * sv14[7404]);
        sv14[7486] = (-1 + sv14[6669]) * (2 * sv14[7405]);
        sv14[7487] = (-1 + sv14[6669]) * (2 * sv14[7406]);
        sv14[7488] = (-1 + sv14[6669]) * (2 * sv14[7407]);
        sv14[7489] = (-1 + sv14[6669]) * (2 * sv14[7408]);
        sv14[7490] = (-1 + sv14[6669]) * (2 * sv14[7409]);
        sv14[7491] = (-1 + sv14[6669]) * (2 * sv14[7410]);
        sv14[7492] = (-1 + sv14[6669]) * (2 * sv14[7411]);
        sv14[7493] = (-1 + sv14[6669]) * (2 * sv14[7412]);
        sv14[7494] = (-1 + sv14[6669]) * (2 * sv14[7413]);
        sv14[7495] = (-1 + sv14[6669]) * (2 * sv14[7414]);
        sv14[7496] = (-1 + sv14[6669]) * (2 * sv14[7415]);
        sv14[7497] = (-1 + sv14[6669]) * (2 * sv14[7416]);
        sv14[7498] = (-1 + sv14[6669]) * (2 * sv14[7417]);
        sv14[7499] = (-1 + sv14[6669]) * (2 * sv14[7418]);
        sv14[7500] = 2 * sv14[6868] * sv14[6868];
        sv14[7501] = 2 * sv14[6868] * sv14[6869];
        sv14[7502] = 2 * sv14[6868] * sv14[6870];
        sv14[7503] = 2 * sv14[6868] * sv14[6871];
        sv14[7504] = 2 * sv14[6868] * sv14[6872];
        sv14[7505] = 2 * sv14[6868] * sv14[6873];
        sv14[7506] = 2 * sv14[6868] * sv14[6874];
        sv14[7507] = 2 * sv14[6868] * sv14[6875];
        sv14[7508] = 2 * sv14[6868] * sv14[6876];
        sv14[7509] = 2 * sv14[6869] * sv14[6868];
        sv14[7510] = 2 * sv14[6869] * sv14[6869];
        sv14[7511] = 2 * sv14[6869] * sv14[6870];
        sv14[7512] = 2 * sv14[6869] * sv14[6871];
        sv14[7513] = 2 * sv14[6869] * sv14[6872];
        sv14[7514] = 2 * sv14[6869] * sv14[6873];
        sv14[7515] = 2 * sv14[6869] * sv14[6874];
        sv14[7516] = 2 * sv14[6869] * sv14[6875];
        sv14[7517] = 2 * sv14[6869] * sv14[6876];
        sv14[7518] = 2 * sv14[6870] * sv14[6868];
        sv14[7519] = 2 * sv14[6870] * sv14[6869];
        sv14[7520] = 2 * sv14[6870] * sv14[6870];
        sv14[7521] = 2 * sv14[6870] * sv14[6871];
        sv14[7522] = 2 * sv14[6870] * sv14[6872];
        sv14[7523] = 2 * sv14[6870] * sv14[6873];
        sv14[7524] = 2 * sv14[6870] * sv14[6874];
        sv14[7525] = 2 * sv14[6870] * sv14[6875];
        sv14[7526] = 2 * sv14[6870] * sv14[6876];
        sv14[7527] = 2 * sv14[6871] * sv14[6868];
        sv14[7528] = 2 * sv14[6871] * sv14[6869];
        sv14[7529] = 2 * sv14[6871] * sv14[6870];
        sv14[7530] = 2 * sv14[6871] * sv14[6871];
        sv14[7531] = 2 * sv14[6871] * sv14[6872];
        sv14[7532] = 2 * sv14[6871] * sv14[6873];
        sv14[7533] = 2 * sv14[6871] * sv14[6874];
        sv14[7534] = 2 * sv14[6871] * sv14[6875];
        sv14[7535] = 2 * sv14[6871] * sv14[6876];
        sv14[7536] = 2 * sv14[6872] * sv14[6868];
        sv14[7537] = 2 * sv14[6872] * sv14[6869];
        sv14[7538] = 2 * sv14[6872] * sv14[6870];
        sv14[7539] = 2 * sv14[6872] * sv14[6871];
        sv14[7540] = 2 * sv14[6872] * sv14[6872];
        sv14[7541] = 2 * sv14[6872] * sv14[6873];
        sv14[7542] = 2 * sv14[6872] * sv14[6874];
        sv14[7543] = 2 * sv14[6872] * sv14[6875];
        sv14[7544] = 2 * sv14[6872] * sv14[6876];
        sv14[7545] = 2 * sv14[6873] * sv14[6868];
        sv14[7546] = 2 * sv14[6873] * sv14[6869];
        sv14[7547] = 2 * sv14[6873] * sv14[6870];
        sv14[7548] = 2 * sv14[6873] * sv14[6871];
        sv14[7549] = 2 * sv14[6873] * sv14[6872];
        sv14[7550] = 2 * sv14[6873] * sv14[6873];
        sv14[7551] = 2 * sv14[6873] * sv14[6874];
        sv14[7552] = 2 * sv14[6873] * sv14[6875];
        sv14[7553] = 2 * sv14[6873] * sv14[6876];
        sv14[7554] = 2 * sv14[6874] * sv14[6868];
        sv14[7555] = 2 * sv14[6874] * sv14[6869];
        sv14[7556] = 2 * sv14[6874] * sv14[6870];
        sv14[7557] = 2 * sv14[6874] * sv14[6871];
        sv14[7558] = 2 * sv14[6874] * sv14[6872];
        sv14[7559] = 2 * sv14[6874] * sv14[6873];
        sv14[7560] = 2 * sv14[6874] * sv14[6874];
        sv14[7561] = 2 * sv14[6874] * sv14[6875];
        sv14[7562] = 2 * sv14[6874] * sv14[6876];
        sv14[7563] = 2 * sv14[6875] * sv14[6868];
        sv14[7564] = 2 * sv14[6875] * sv14[6869];
        sv14[7565] = 2 * sv14[6875] * sv14[6870];
        sv14[7566] = 2 * sv14[6875] * sv14[6871];
        sv14[7567] = 2 * sv14[6875] * sv14[6872];
        sv14[7568] = 2 * sv14[6875] * sv14[6873];
        sv14[7569] = 2 * sv14[6875] * sv14[6874];
        sv14[7570] = 2 * sv14[6875] * sv14[6875];
        sv14[7571] = 2 * sv14[6875] * sv14[6876];
        sv14[7572] = 2 * sv14[6876] * sv14[6868];
        sv14[7573] = 2 * sv14[6876] * sv14[6869];
        sv14[7574] = 2 * sv14[6876] * sv14[6870];
        sv14[7575] = 2 * sv14[6876] * sv14[6871];
        sv14[7576] = 2 * sv14[6876] * sv14[6872];
        sv14[7577] = 2 * sv14[6876] * sv14[6873];
        sv14[7578] = 2 * sv14[6876] * sv14[6874];
        sv14[7579] = 2 * sv14[6876] * sv14[6875];
        sv14[7580] = 2 * sv14[6876] * sv14[6876];
        sv14[7581] = sv14[7419] + sv14[7500];
        sv14[7582] = sv14[7420] + sv14[7501];
        sv14[7583] = sv14[7421] + sv14[7502];
        sv14[7584] = sv14[7422] + sv14[7503];
        sv14[7585] = sv14[7423] + sv14[7504];
        sv14[7586] = sv14[7424] + sv14[7505];
        sv14[7587] = sv14[7425] + sv14[7506];
        sv14[7588] = sv14[7426] + sv14[7507];
        sv14[7589] = sv14[7427] + sv14[7508];
        sv14[7590] = sv14[7428] + sv14[7509];
        sv14[7591] = sv14[7429] + sv14[7510];
        sv14[7592] = sv14[7430] + sv14[7511];
        sv14[7593] = sv14[7431] + sv14[7512];
        sv14[7594] = sv14[7432] + sv14[7513];
        sv14[7595] = sv14[7433] + sv14[7514];
        sv14[7596] = sv14[7434] + sv14[7515];
        sv14[7597] = sv14[7435] + sv14[7516];
        sv14[7598] = sv14[7436] + sv14[7517];
        sv14[7599] = sv14[7437] + sv14[7518];
        sv14[7600] = sv14[7438] + sv14[7519];
        sv14[7601] = sv14[7439] + sv14[7520];
        sv14[7602] = sv14[7440] + sv14[7521];
        sv14[7603] = sv14[7441] + sv14[7522];
        sv14[7604] = sv14[7442] + sv14[7523];
        sv14[7605] = sv14[7443] + sv14[7524];
        sv14[7606] = sv14[7444] + sv14[7525];
        sv14[7607] = sv14[7445] + sv14[7526];
        sv14[7608] = sv14[7446] + sv14[7527];
        sv14[7609] = sv14[7447] + sv14[7536];
        sv14[7610] = sv14[7448] + sv14[7545];
        sv14[7611] = sv14[7449] + sv14[7554];
        sv14[7612] = sv14[7450] + sv14[7563];
        sv14[7613] = sv14[7451] + sv14[7572];
        sv14[7614] = sv14[7452] + sv14[7528];
        sv14[7615] = sv14[7453] + sv14[7537];
        sv14[7616] = sv14[7454] + sv14[7546];
        sv14[7617] = sv14[7455] + sv14[7555];
        sv14[7618] = sv14[7456] + sv14[7564];
        sv14[7619] = sv14[7457] + sv14[7573];
        sv14[7620] = sv14[7458] + sv14[7529];
        sv14[7621] = sv14[7459] + sv14[7538];
        sv14[7622] = sv14[7460] + sv14[7547];
        sv14[7623] = sv14[7461] + sv14[7556];
        sv14[7624] = sv14[7462] + sv14[7565];
        sv14[7625] = sv14[7463] + sv14[7574];
        sv14[7626] = sv14[7464] + sv14[7530];
        sv14[7627] = sv14[7465] + sv14[7531];
        sv14[7628] = sv14[7466] + sv14[7532];
        sv14[7629] = sv14[7467] + sv14[7533];
        sv14[7630] = sv14[7468] + sv14[7534];
        sv14[7631] = sv14[7469] + sv14[7535];
        sv14[7632] = sv14[7470] + sv14[7539];
        sv14[7633] = sv14[7471] + sv14[7540];
        sv14[7634] = sv14[7472] + sv14[7541];
        sv14[7635] = sv14[7473] + sv14[7542];
        sv14[7636] = sv14[7474] + sv14[7543];
        sv14[7637] = sv14[7475] + sv14[7544];
        sv14[7638] = sv14[7476] + sv14[7548];
        sv14[7639] = sv14[7477] + sv14[7549];
        sv14[7640] = sv14[7478] + sv14[7550];
        sv14[7641] = sv14[7479] + sv14[7551];
        sv14[7642] = sv14[7480] + sv14[7552];
        sv14[7643] = sv14[7481] + sv14[7553];
        sv14[7644] = sv14[7482] + sv14[7557];
        sv14[7645] = sv14[7483] + sv14[7566];
        sv14[7646] = sv14[7484] + sv14[7575];
        sv14[7647] = sv14[7485] + sv14[7558];
        sv14[7648] = sv14[7486] + sv14[7567];
        sv14[7649] = sv14[7487] + sv14[7576];
        sv14[7650] = sv14[7488] + sv14[7559];
        sv14[7651] = sv14[7489] + sv14[7568];
        sv14[7652] = sv14[7490] + sv14[7577];
        sv14[7653] = sv14[7491] + sv14[7560];
        sv14[7654] = sv14[7492] + sv14[7561];
        sv14[7655] = sv14[7493] + sv14[7562];
        sv14[7656] = sv14[7494] + sv14[7569];
        sv14[7657] = sv14[7495] + sv14[7570];
        sv14[7658] = sv14[7496] + sv14[7571];
        sv14[7659] = sv14[7497] + sv14[7578];
        sv14[7660] = sv14[7498] + sv14[7579];
        sv14[7661] = sv14[7499] + sv14[7580];
        sv14[7662] = sv14[7581] * w[8][0];
        sv14[7663] = sv14[7582] * w[8][0];
        sv14[7664] = sv14[7583] * w[8][0];
        sv14[7665] = sv14[7584] * w[8][0];
        sv14[7666] = sv14[7585] * w[8][0];
        sv14[7667] = sv14[7586] * w[8][0];
        sv14[7668] = sv14[7587] * w[8][0];
        sv14[7669] = sv14[7588] * w[8][0];
        sv14[7670] = sv14[7589] * w[8][0];
        sv14[7671] = sv14[7590] * w[8][0];
        sv14[7672] = sv14[7591] * w[8][0];
        sv14[7673] = sv14[7592] * w[8][0];
        sv14[7674] = sv14[7593] * w[8][0];
        sv14[7675] = sv14[7594] * w[8][0];
        sv14[7676] = sv14[7595] * w[8][0];
        sv14[7677] = sv14[7596] * w[8][0];
        sv14[7678] = sv14[7597] * w[8][0];
        sv14[7679] = sv14[7598] * w[8][0];
        sv14[7680] = sv14[7599] * w[8][0];
        sv14[7681] = sv14[7600] * w[8][0];
        sv14[7682] = sv14[7601] * w[8][0];
        sv14[7683] = sv14[7602] * w[8][0];
        sv14[7684] = sv14[7603] * w[8][0];
        sv14[7685] = sv14[7604] * w[8][0];
        sv14[7686] = sv14[7605] * w[8][0];
        sv14[7687] = sv14[7606] * w[8][0];
        sv14[7688] = sv14[7607] * w[8][0];
        sv14[7689] = sv14[7608] * w[8][0];
        sv14[7690] = sv14[7609] * w[8][0];
        sv14[7691] = sv14[7610] * w[8][0];
        sv14[7692] = sv14[7611] * w[8][0];
        sv14[7693] = sv14[7612] * w[8][0];
        sv14[7694] = sv14[7613] * w[8][0];
        sv14[7695] = sv14[7614] * w[8][0];
        sv14[7696] = sv14[7615] * w[8][0];
        sv14[7697] = sv14[7616] * w[8][0];
        sv14[7698] = sv14[7617] * w[8][0];
        sv14[7699] = sv14[7618] * w[8][0];
        sv14[7700] = sv14[7619] * w[8][0];
        sv14[7701] = sv14[7620] * w[8][0];
        sv14[7702] = sv14[7621] * w[8][0];
        sv14[7703] = sv14[7622] * w[8][0];
        sv14[7704] = sv14[7623] * w[8][0];
        sv14[7705] = sv14[7624] * w[8][0];
        sv14[7706] = sv14[7625] * w[8][0];
        sv14[7707] = sv14[7626] * w[8][0];
        sv14[7708] = sv14[7627] * w[8][0];
        sv14[7709] = sv14[7628] * w[8][0];
        sv14[7710] = sv14[7629] * w[8][0];
        sv14[7711] = sv14[7630] * w[8][0];
        sv14[7712] = sv14[7631] * w[8][0];
        sv14[7713] = sv14[7632] * w[8][0];
        sv14[7714] = sv14[7633] * w[8][0];
        sv14[7715] = sv14[7634] * w[8][0];
        sv14[7716] = sv14[7635] * w[8][0];
        sv14[7717] = sv14[7636] * w[8][0];
        sv14[7718] = sv14[7637] * w[8][0];
        sv14[7719] = sv14[7638] * w[8][0];
        sv14[7720] = sv14[7639] * w[8][0];
        sv14[7721] = sv14[7640] * w[8][0];
        sv14[7722] = sv14[7641] * w[8][0];
        sv14[7723] = sv14[7642] * w[8][0];
        sv14[7724] = sv14[7643] * w[8][0];
        sv14[7725] = sv14[7644] * w[8][0];
        sv14[7726] = sv14[7645] * w[8][0];
        sv14[7727] = sv14[7646] * w[8][0];
        sv14[7728] = sv14[7647] * w[8][0];
        sv14[7729] = sv14[7648] * w[8][0];
        sv14[7730] = sv14[7649] * w[8][0];
        sv14[7731] = sv14[7650] * w[8][0];
        sv14[7732] = sv14[7651] * w[8][0];
        sv14[7733] = sv14[7652] * w[8][0];
        sv14[7734] = sv14[7653] * w[8][0];
        sv14[7735] = sv14[7654] * w[8][0];
        sv14[7736] = sv14[7655] * w[8][0];
        sv14[7737] = sv14[7656] * w[8][0];
        sv14[7738] = sv14[7657] * w[8][0];
        sv14[7739] = sv14[7658] * w[8][0];
        sv14[7740] = sv14[7659] * w[8][0];
        sv14[7741] = sv14[7660] * w[8][0];
        sv14[7742] = sv14[7661] * w[8][0];
        sv14[7743] = sv14[7662] * sv14[6896];
        sv14[7744] = sv14[7663] * sv14[6896];
        sv14[7745] = sv14[7664] * sv14[6896];
        sv14[7746] = sv14[7665] * sv14[6896];
        sv14[7747] = sv14[7666] * sv14[6896];
        sv14[7748] = sv14[7667] * sv14[6896];
        sv14[7749] = sv14[7668] * sv14[6896];
        sv14[7750] = sv14[7669] * sv14[6896];
        sv14[7751] = sv14[7670] * sv14[6896];
        sv14[7752] = sv14[7671] * sv14[6896];
        sv14[7753] = sv14[7672] * sv14[6896];
        sv14[7754] = sv14[7673] * sv14[6896];
        sv14[7755] = sv14[7674] * sv14[6896];
        sv14[7756] = sv14[7675] * sv14[6896];
        sv14[7757] = sv14[7676] * sv14[6896];
        sv14[7758] = sv14[7677] * sv14[6896];
        sv14[7759] = sv14[7678] * sv14[6896];
        sv14[7760] = sv14[7679] * sv14[6896];
        sv14[7761] = sv14[7680] * sv14[6896];
        sv14[7762] = sv14[7681] * sv14[6896];
        sv14[7763] = sv14[7682] * sv14[6896];
        sv14[7764] = sv14[7683] * sv14[6896];
        sv14[7765] = sv14[7684] * sv14[6896];
        sv14[7766] = sv14[7685] * sv14[6896];
        sv14[7767] = sv14[7686] * sv14[6896];
        sv14[7768] = sv14[7687] * sv14[6896];
        sv14[7769] = sv14[7688] * sv14[6896];
        sv14[7770] = sv14[7689] * sv14[6896];
        sv14[7771] = sv14[7690] * sv14[6896];
        sv14[7772] = sv14[7691] * sv14[6896];
        sv14[7773] = sv14[7692] * sv14[6896];
        sv14[7774] = sv14[7693] * sv14[6896];
        sv14[7775] = sv14[7694] * sv14[6896];
        sv14[7776] = sv14[7695] * sv14[6896];
        sv14[7777] = sv14[7696] * sv14[6896];
        sv14[7778] = sv14[7697] * sv14[6896];
        sv14[7779] = sv14[7698] * sv14[6896];
        sv14[7780] = sv14[7699] * sv14[6896];
        sv14[7781] = sv14[7700] * sv14[6896];
        sv14[7782] = sv14[7701] * sv14[6896];
        sv14[7783] = sv14[7702] * sv14[6896];
        sv14[7784] = sv14[7703] * sv14[6896];
        sv14[7785] = sv14[7704] * sv14[6896];
        sv14[7786] = sv14[7705] * sv14[6896];
        sv14[7787] = sv14[7706] * sv14[6896];
        sv14[7788] = sv14[7707] * sv14[6896];
        sv14[7789] = sv14[7708] * sv14[6896];
        sv14[7790] = sv14[7709] * sv14[6896];
        sv14[7791] = sv14[7710] * sv14[6896];
        sv14[7792] = sv14[7711] * sv14[6896];
        sv14[7793] = sv14[7712] * sv14[6896];
        sv14[7794] = sv14[7713] * sv14[6896];
        sv14[7795] = sv14[7714] * sv14[6896];
        sv14[7796] = sv14[7715] * sv14[6896];
        sv14[7797] = sv14[7716] * sv14[6896];
        sv14[7798] = sv14[7717] * sv14[6896];
        sv14[7799] = sv14[7718] * sv14[6896];
        sv14[7800] = sv14[7719] * sv14[6896];
        sv14[7801] = sv14[7720] * sv14[6896];
        sv14[7802] = sv14[7721] * sv14[6896];
        sv14[7803] = sv14[7722] * sv14[6896];
        sv14[7804] = sv14[7723] * sv14[6896];
        sv14[7805] = sv14[7724] * sv14[6896];
        sv14[7806] = sv14[7725] * sv14[6896];
        sv14[7807] = sv14[7726] * sv14[6896];
        sv14[7808] = sv14[7727] * sv14[6896];
        sv14[7809] = sv14[7728] * sv14[6896];
        sv14[7810] = sv14[7729] * sv14[6896];
        sv14[7811] = sv14[7730] * sv14[6896];
        sv14[7812] = sv14[7731] * sv14[6896];
        sv14[7813] = sv14[7732] * sv14[6896];
        sv14[7814] = sv14[7733] * sv14[6896];
        sv14[7815] = sv14[7734] * sv14[6896];
        sv14[7816] = sv14[7735] * sv14[6896];
        sv14[7817] = sv14[7736] * sv14[6896];
        sv14[7818] = sv14[7737] * sv14[6896];
        sv14[7819] = sv14[7738] * sv14[6896];
        sv14[7820] = sv14[7739] * sv14[6896];
        sv14[7821] = sv14[7740] * sv14[6896];
        sv14[7822] = sv14[7741] * sv14[6896];
        sv14[7823] = sv14[7742] * sv14[6896];
        sv14[7824] = sv14[6906] + sv14[7743];
        sv14[7825] = sv14[6915] + sv14[7744];
        sv14[7826] = sv14[6924] + sv14[7745];
        sv14[7827] = sv14[6933] + sv14[7746];
        sv14[7828] = sv14[6942] + sv14[7747];
        sv14[7829] = sv14[6951] + sv14[7748];
        sv14[7830] = sv14[6960] + sv14[7749];
        sv14[7831] = sv14[6969] + sv14[7750];
        sv14[7832] = sv14[6978] + sv14[7751];
        sv14[7833] = sv14[6907] + sv14[7752];
        sv14[7834] = sv14[6916] + sv14[7753];
        sv14[7835] = sv14[6925] + sv14[7754];
        sv14[7836] = sv14[6934] + sv14[7755];
        sv14[7837] = sv14[6943] + sv14[7756];
        sv14[7838] = sv14[6952] + sv14[7757];
        sv14[7839] = sv14[6961] + sv14[7758];
        sv14[7840] = sv14[6970] + sv14[7759];
        sv14[7841] = sv14[6979] + sv14[7760];
        sv14[7842] = sv14[6908] + sv14[7761];
        sv14[7843] = sv14[6917] + sv14[7762];
        sv14[7844] = sv14[6926] + sv14[7763];
        sv14[7845] = sv14[6935] + sv14[7764];
        sv14[7846] = sv14[6944] + sv14[7765];
        sv14[7847] = sv14[6953] + sv14[7766];
        sv14[7848] = sv14[6962] + sv14[7767];
        sv14[7849] = sv14[6971] + sv14[7768];
        sv14[7850] = sv14[6980] + sv14[7769];
        sv14[7851] = sv14[6909] + sv14[7770];
        sv14[7852] = sv14[6910] + sv14[7771];
        sv14[7853] = sv14[6911] + sv14[7772];
        sv14[7854] = sv14[6912] + sv14[7773];
        sv14[7855] = sv14[6913] + sv14[7774];
        sv14[7856] = sv14[6914] + sv14[7775];
        sv14[7857] = sv14[6918] + sv14[7776];
        sv14[7858] = sv14[6919] + sv14[7777];
        sv14[7859] = sv14[6920] + sv14[7778];
        sv14[7860] = sv14[6921] + sv14[7779];
        sv14[7861] = sv14[6922] + sv14[7780];
        sv14[7862] = sv14[6923] + sv14[7781];
        sv14[7863] = sv14[6927] + sv14[7782];
        sv14[7864] = sv14[6928] + sv14[7783];
        sv14[7865] = sv14[6929] + sv14[7784];
        sv14[7866] = sv14[6930] + sv14[7785];
        sv14[7867] = sv14[6931] + sv14[7786];
        sv14[7868] = sv14[6932] + sv14[7787];
        sv14[7869] = sv14[6936] + sv14[7788];
        sv14[7870] = sv14[6945] + sv14[7789];
        sv14[7871] = sv14[6954] + sv14[7790];
        sv14[7872] = sv14[6963] + sv14[7791];
        sv14[7873] = sv14[6972] + sv14[7792];
        sv14[7874] = sv14[6981] + sv14[7793];
        sv14[7875] = sv14[6937] + sv14[7794];
        sv14[7876] = sv14[6946] + sv14[7795];
        sv14[7877] = sv14[6955] + sv14[7796];
        sv14[7878] = sv14[6964] + sv14[7797];
        sv14[7879] = sv14[6973] + sv14[7798];
        sv14[7880] = sv14[6982] + sv14[7799];
        sv14[7881] = sv14[6938] + sv14[7800];
        sv14[7882] = sv14[6947] + sv14[7801];
        sv14[7883] = sv14[6956] + sv14[7802];
        sv14[7884] = sv14[6965] + sv14[7803];
        sv14[7885] = sv14[6974] + sv14[7804];
        sv14[7886] = sv14[6983] + sv14[7805];
        sv14[7887] = sv14[6939] + sv14[7806];
        sv14[7888] = sv14[6940] + sv14[7807];
        sv14[7889] = sv14[6941] + sv14[7808];
        sv14[7890] = sv14[6948] + sv14[7809];
        sv14[7891] = sv14[6949] + sv14[7810];
        sv14[7892] = sv14[6950] + sv14[7811];
        sv14[7893] = sv14[6957] + sv14[7812];
        sv14[7894] = sv14[6958] + sv14[7813];
        sv14[7895] = sv14[6959] + sv14[7814];
        sv14[7896] = sv14[6966] + sv14[7815];
        sv14[7897] = sv14[6975] + sv14[7816];
        sv14[7898] = sv14[6984] + sv14[7817];
        sv14[7899] = sv14[6967] + sv14[7818];
        sv14[7900] = sv14[6976] + sv14[7819];
        sv14[7901] = sv14[6985] + sv14[7820];
        sv14[7902] = sv14[6968] + sv14[7821];
        sv14[7903] = sv14[6977] + sv14[7822];
        sv14[7904] = sv14[6986] + sv14[7823];
        sv14[7905] = sv14[7824] * (sp[256] / 2.0);
        sv14[7906] = sv14[7825] * (sp[256] / 2.0);
        sv14[7907] = sv14[7826] * (sp[256] / 2.0);
        sv14[7908] = sv14[7827] * (sp[256] / 2.0);
        sv14[7909] = sv14[7828] * (sp[256] / 2.0);
        sv14[7910] = sv14[7829] * (sp[256] / 2.0);
        sv14[7911] = sv14[7830] * (sp[256] / 2.0);
        sv14[7912] = sv14[7831] * (sp[256] / 2.0);
        sv14[7913] = sv14[7832] * (sp[256] / 2.0);
        sv14[7914] = sv14[7833] * (sp[256] / 2.0);
        sv14[7915] = sv14[7834] * (sp[256] / 2.0);
        sv14[7916] = sv14[7835] * (sp[256] / 2.0);
        sv14[7917] = sv14[7836] * (sp[256] / 2.0);
        sv14[7918] = sv14[7837] * (sp[256] / 2.0);
        sv14[7919] = sv14[7838] * (sp[256] / 2.0);
        sv14[7920] = sv14[7839] * (sp[256] / 2.0);
        sv14[7921] = sv14[7840] * (sp[256] / 2.0);
        sv14[7922] = sv14[7841] * (sp[256] / 2.0);
        sv14[7923] = sv14[7842] * (sp[256] / 2.0);
        sv14[7924] = sv14[7843] * (sp[256] / 2.0);
        sv14[7925] = sv14[7844] * (sp[256] / 2.0);
        sv14[7926] = sv14[7845] * (sp[256] / 2.0);
        sv14[7927] = sv14[7846] * (sp[256] / 2.0);
        sv14[7928] = sv14[7847] * (sp[256] / 2.0);
        sv14[7929] = sv14[7848] * (sp[256] / 2.0);
        sv14[7930] = sv14[7849] * (sp[256] / 2.0);
        sv14[7931] = sv14[7850] * (sp[256] / 2.0);
        sv14[7932] = sv14[7851] * (sp[256] / 2.0);
        sv14[7933] = sv14[7852] * (sp[256] / 2.0);
        sv14[7934] = sv14[7853] * (sp[256] / 2.0);
        sv14[7935] = sv14[7854] * (sp[256] / 2.0);
        sv14[7936] = sv14[7855] * (sp[256] / 2.0);
        sv14[7937] = sv14[7856] * (sp[256] / 2.0);
        sv14[7938] = sv14[7857] * (sp[256] / 2.0);
        sv14[7939] = sv14[7858] * (sp[256] / 2.0);
        sv14[7940] = sv14[7859] * (sp[256] / 2.0);
        sv14[7941] = sv14[7860] * (sp[256] / 2.0);
        sv14[7942] = sv14[7861] * (sp[256] / 2.0);
        sv14[7943] = sv14[7862] * (sp[256] / 2.0);
        sv14[7944] = sv14[7863] * (sp[256] / 2.0);
        sv14[7945] = sv14[7864] * (sp[256] / 2.0);
        sv14[7946] = sv14[7865] * (sp[256] / 2.0);
        sv14[7947] = sv14[7866] * (sp[256] / 2.0);
        sv14[7948] = sv14[7867] * (sp[256] / 2.0);
        sv14[7949] = sv14[7868] * (sp[256] / 2.0);
        sv14[7950] = sv14[7869] * (sp[256] / 2.0);
        sv14[7951] = sv14[7870] * (sp[256] / 2.0);
        sv14[7952] = sv14[7871] * (sp[256] / 2.0);
        sv14[7953] = sv14[7872] * (sp[256] / 2.0);
        sv14[7954] = sv14[7873] * (sp[256] / 2.0);
        sv14[7955] = sv14[7874] * (sp[256] / 2.0);
        sv14[7956] = sv14[7875] * (sp[256] / 2.0);
        sv14[7957] = sv14[7876] * (sp[256] / 2.0);
        sv14[7958] = sv14[7877] * (sp[256] / 2.0);
        sv14[7959] = sv14[7878] * (sp[256] / 2.0);
        sv14[7960] = sv14[7879] * (sp[256] / 2.0);
        sv14[7961] = sv14[7880] * (sp[256] / 2.0);
        sv14[7962] = sv14[7881] * (sp[256] / 2.0);
        sv14[7963] = sv14[7882] * (sp[256] / 2.0);
        sv14[7964] = sv14[7883] * (sp[256] / 2.0);
        sv14[7965] = sv14[7884] * (sp[256] / 2.0);
        sv14[7966] = sv14[7885] * (sp[256] / 2.0);
        sv14[7967] = sv14[7886] * (sp[256] / 2.0);
        sv14[7968] = sv14[7887] * (sp[256] / 2.0);
        sv14[7969] = sv14[7888] * (sp[256] / 2.0);
        sv14[7970] = sv14[7889] * (sp[256] / 2.0);
        sv14[7971] = sv14[7890] * (sp[256] / 2.0);
        sv14[7972] = sv14[7891] * (sp[256] / 2.0);
        sv14[7973] = sv14[7892] * (sp[256] / 2.0);
        sv14[7974] = sv14[7893] * (sp[256] / 2.0);
        sv14[7975] = sv14[7894] * (sp[256] / 2.0);
        sv14[7976] = sv14[7895] * (sp[256] / 2.0);
        sv14[7977] = sv14[7896] * (sp[256] / 2.0);
        sv14[7978] = sv14[7897] * (sp[256] / 2.0);
        sv14[7979] = sv14[7898] * (sp[256] / 2.0);
        sv14[7980] = sv14[7899] * (sp[256] / 2.0);
        sv14[7981] = sv14[7900] * (sp[256] / 2.0);
        sv14[7982] = sv14[7901] * (sp[256] / 2.0);
        sv14[7983] = sv14[7902] * (sp[256] / 2.0);
        sv14[7984] = sv14[7903] * (sp[256] / 2.0);
        sv14[7985] = sv14[7904] * (sp[256] / 2.0);
        sv14[7986] = sv14[7905] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7987] = sv14[7906] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7988] = sv14[7907] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7989] = sv14[7908] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7990] = sv14[7909] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7991] = sv14[7910] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7992] = sv14[7911] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7993] = sv14[7912] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7994] = sv14[7913] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7995] = sv14[7914] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7996] = sv14[7915] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7997] = sv14[7916] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7998] = sv14[7917] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[7999] = sv14[7918] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8000] = sv14[7919] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8001] = sv14[7920] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8002] = sv14[7921] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8003] = sv14[7922] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8004] = sv14[7923] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8005] = sv14[7924] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8006] = sv14[7925] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8007] = sv14[7926] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8008] = sv14[7927] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8009] = sv14[7928] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8010] = sv14[7929] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8011] = sv14[7930] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8012] = sv14[7931] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8013] = sv14[7932] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8014] = sv14[7933] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8015] = sv14[7934] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8016] = sv14[7935] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8017] = sv14[7936] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8018] = sv14[7937] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8019] = sv14[7938] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8020] = sv14[7939] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8021] = sv14[7940] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8022] = sv14[7941] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8023] = sv14[7942] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8024] = sv14[7943] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8025] = sv14[7944] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8026] = sv14[7945] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8027] = sv14[7946] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8028] = sv14[7947] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8029] = sv14[7948] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8030] = sv14[7949] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8031] = sv14[7950] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8032] = sv14[7951] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8033] = sv14[7952] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8034] = sv14[7953] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8035] = sv14[7954] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8036] = sv14[7955] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8037] = sv14[7956] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8038] = sv14[7957] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8039] = sv14[7958] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8040] = sv14[7959] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8041] = sv14[7960] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8042] = sv14[7961] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8043] = sv14[7962] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8044] = sv14[7963] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8045] = sv14[7964] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8046] = sv14[7965] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8047] = sv14[7966] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8048] = sv14[7967] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8049] = sv14[7968] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8050] = sv14[7969] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8051] = sv14[7970] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8052] = sv14[7971] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8053] = sv14[7972] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8054] = sv14[7973] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8055] = sv14[7974] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8056] = sv14[7975] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8057] = sv14[7976] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8058] = sv14[7977] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8059] = sv14[7978] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8060] = sv14[7979] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8061] = sv14[7980] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8062] = sv14[7981] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8063] = sv14[7982] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8064] = sv14[7983] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8065] = sv14[7984] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8066] = sv14[7985] * (-1 + sv14[6669] <= 1e-10 ? 0.0 : 1);
        sv14[8067] = sv14[6568] + sv14[7986];
        sv14[8068] = sv14[6569] + sv14[7987];
        sv14[8069] = sv14[6570] + sv14[7988];
        sv14[8070] = sv14[6571] + sv14[7989];
        sv14[8071] = sv14[6572] + sv14[7990];
        sv14[8072] = sv14[6573] + sv14[7991];
        sv14[8073] = sv14[6574] + sv14[7992];
        sv14[8074] = sv14[6575] + sv14[7993];
        sv14[8075] = sv14[6576] + sv14[7994];
        sv14[8076] = sv14[6577] + sv14[7995];
        sv14[8077] = sv14[6578] + sv14[7996];
        sv14[8078] = sv14[6579] + sv14[7997];
        sv14[8079] = sv14[6580] + sv14[7998];
        sv14[8080] = sv14[6581] + sv14[7999];
        sv14[8081] = sv14[6582] + sv14[8000];
        sv14[8082] = sv14[6583] + sv14[8001];
        sv14[8083] = sv14[6584] + sv14[8002];
        sv14[8084] = sv14[6585] + sv14[8003];
        sv14[8085] = sv14[6586] + sv14[8004];
        sv14[8086] = sv14[6587] + sv14[8005];
        sv14[8087] = sv14[6588] + sv14[8006];
        sv14[8088] = sv14[6589] + sv14[8007];
        sv14[8089] = sv14[6590] + sv14[8008];
        sv14[8090] = sv14[6591] + sv14[8009];
        sv14[8091] = sv14[6592] + sv14[8010];
        sv14[8092] = sv14[6593] + sv14[8011];
        sv14[8093] = sv14[6594] + sv14[8012];
        sv14[8094] = sv14[6595] + sv14[8013];
        sv14[8095] = sv14[6596] + sv14[8014];
        sv14[8096] = sv14[6597] + sv14[8015];
        sv14[8097] = sv14[6598] + sv14[8016];
        sv14[8098] = sv14[6599] + sv14[8017];
        sv14[8099] = sv14[6600] + sv14[8018];
        sv14[8100] = sv14[6601] + sv14[8019];
        sv14[8101] = sv14[6602] + sv14[8020];
        sv14[8102] = sv14[6603] + sv14[8021];
        sv14[8103] = sv14[6604] + sv14[8022];
        sv14[8104] = sv14[6605] + sv14[8023];
        sv14[8105] = sv14[6606] + sv14[8024];
        sv14[8106] = sv14[6607] + sv14[8025];
        sv14[8107] = sv14[6608] + sv14[8026];
        sv14[8108] = sv14[6609] + sv14[8027];
        sv14[8109] = sv14[6610] + sv14[8028];
        sv14[8110] = sv14[6611] + sv14[8029];
        sv14[8111] = sv14[6612] + sv14[8030];
        sv14[8112] = sv14[6613] + sv14[8031];
        sv14[8113] = sv14[6614] + sv14[8032];
        sv14[8114] = sv14[6615] + sv14[8033];
        sv14[8115] = sv14[6616] + sv14[8034];
        sv14[8116] = sv14[6617] + sv14[8035];
        sv14[8117] = sv14[6618] + sv14[8036];
        sv14[8118] = sv14[6619] + sv14[8037];
        sv14[8119] = sv14[6620] + sv14[8038];
        sv14[8120] = sv14[6621] + sv14[8039];
        sv14[8121] = sv14[6622] + sv14[8040];
        sv14[8122] = sv14[6623] + sv14[8041];
        sv14[8123] = sv14[6624] + sv14[8042];
        sv14[8124] = sv14[6625] + sv14[8043];
        sv14[8125] = sv14[6626] + sv14[8044];
        sv14[8126] = sv14[6627] + sv14[8045];
        sv14[8127] = sv14[6628] + sv14[8046];
        sv14[8128] = sv14[6629] + sv14[8047];
        sv14[8129] = sv14[6630] + sv14[8048];
        sv14[8130] = sv14[6631] + sv14[8049];
        sv14[8131] = sv14[6632] + sv14[8050];
        sv14[8132] = sv14[6633] + sv14[8051];
        sv14[8133] = sv14[6634] + sv14[8052];
        sv14[8134] = sv14[6635] + sv14[8053];
        sv14[8135] = sv14[6636] + sv14[8054];
        sv14[8136] = sv14[6637] + sv14[8055];
        sv14[8137] = sv14[6638] + sv14[8056];
        sv14[8138] = sv14[6639] + sv14[8057];
        sv14[8139] = sv14[6640] + sv14[8058];
        sv14[8140] = sv14[6641] + sv14[8059];
        sv14[8141] = sv14[6642] + sv14[8060];
        sv14[8142] = sv14[6643] + sv14[8061];
        sv14[8143] = sv14[6644] + sv14[8062];
        sv14[8144] = sv14[6645] + sv14[8063];
        sv14[8145] = sv14[6646] + sv14[8064];
        sv14[8146] = sv14[6647] + sv14[8065];
        sv14[8147] = sv14[6648] + sv14[8066];
        sv14[8148] = sv14[8067] * sp[377];
        sv14[8149] = sv14[8068] * sp[377];
        sv14[8150] = sv14[8069] * sp[377];
        sv14[8151] = sv14[8070] * sp[377];
        sv14[8152] = sv14[8071] * sp[377];
        sv14[8153] = sv14[8072] * sp[377];
        sv14[8154] = sv14[8073] * sp[377];
        sv14[8155] = sv14[8074] * sp[377];
        sv14[8156] = sv14[8075] * sp[377];
        sv14[8157] = sv14[8076] * sp[377];
        sv14[8158] = sv14[8077] * sp[377];
        sv14[8159] = sv14[8078] * sp[377];
        sv14[8160] = sv14[8079] * sp[377];
        sv14[8161] = sv14[8080] * sp[377];
        sv14[8162] = sv14[8081] * sp[377];
        sv14[8163] = sv14[8082] * sp[377];
        sv14[8164] = sv14[8083] * sp[377];
        sv14[8165] = sv14[8084] * sp[377];
        sv14[8166] = sv14[8085] * sp[377];
        sv14[8167] = sv14[8086] * sp[377];
        sv14[8168] = sv14[8087] * sp[377];
        sv14[8169] = sv14[8088] * sp[377];
        sv14[8170] = sv14[8089] * sp[377];
        sv14[8171] = sv14[8090] * sp[377];
        sv14[8172] = sv14[8091] * sp[377];
        sv14[8173] = sv14[8092] * sp[377];
        sv14[8174] = sv14[8093] * sp[377];
        sv14[8175] = sv14[8094] * sp[377];
        sv14[8176] = sv14[8095] * sp[377];
        sv14[8177] = sv14[8096] * sp[377];
        sv14[8178] = sv14[8097] * sp[377];
        sv14[8179] = sv14[8098] * sp[377];
        sv14[8180] = sv14[8099] * sp[377];
        sv14[8181] = sv14[8100] * sp[377];
        sv14[8182] = sv14[8101] * sp[377];
        sv14[8183] = sv14[8102] * sp[377];
        sv14[8184] = sv14[8103] * sp[377];
        sv14[8185] = sv14[8104] * sp[377];
        sv14[8186] = sv14[8105] * sp[377];
        sv14[8187] = sv14[8106] * sp[377];
        sv14[8188] = sv14[8107] * sp[377];
        sv14[8189] = sv14[8108] * sp[377];
        sv14[8190] = sv14[8109] * sp[377];
        sv14[8191] = sv14[8110] * sp[377];
        sv14[8192] = sv14[8111] * sp[377];
        sv14[8193] = sv14[8112] * sp[377];
        sv14[8194] = sv14[8113] * sp[377];
        sv14[8195] = sv14[8114] * sp[377];
        sv14[8196] = sv14[8115] * sp[377];
        sv14[8197] = sv14[8116] * sp[377];
        sv14[8198] = sv14[8117] * sp[377];
        sv14[8199] = sv14[8118] * sp[377];
        sv14[8200] = sv14[8119] * sp[377];
        sv14[8201] = sv14[8120] * sp[377];
        sv14[8202] = sv14[8121] * sp[377];
        sv14[8203] = sv14[8122] * sp[377];
        sv14[8204] = sv14[8123] * sp[377];
        sv14[8205] = sv14[8124] * sp[377];
        sv14[8206] = sv14[8125] * sp[377];
        sv14[8207] = sv14[8126] * sp[377];
        sv14[8208] = sv14[8127] * sp[377];
        sv14[8209] = sv14[8128] * sp[377];
        sv14[8210] = sv14[8129] * sp[377];
        sv14[8211] = sv14[8130] * sp[377];
        sv14[8212] = sv14[8131] * sp[377];
        sv14[8213] = sv14[8132] * sp[377];
        sv14[8214] = sv14[8133] * sp[377];
        sv14[8215] = sv14[8134] * sp[377];
        sv14[8216] = sv14[8135] * sp[377];
        sv14[8217] = sv14[8136] * sp[377];
        sv14[8218] = sv14[8137] * sp[377];
        sv14[8219] = sv14[8138] * sp[377];
        sv14[8220] = sv14[8139] * sp[377];
        sv14[8221] = sv14[8140] * sp[377];
        sv14[8222] = sv14[8141] * sp[377];
        sv14[8223] = sv14[8142] * sp[377];
        sv14[8224] = sv14[8143] * sp[377];
        sv14[8225] = sv14[8144] * sp[377];
        sv14[8226] = sv14[8145] * sp[377];
        sv14[8227] = sv14[8146] * sp[377];
        sv14[8228] = sv14[8147] * sp[377];
        const double fw0 = sv14[8148] * weights14[iq];
        alignas(32) double TF0[7];
        for (int i = 0; i < 7; ++i)
            TF0[i] = fw0 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF0[i][j] += TF0[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw1 = sv14[8149] * weights14[iq];
        alignas(32) double TF1[7];
        for (int i = 0; i < 7; ++i)
            TF1[i] = fw1 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF1[i][j] += TF1[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw2 = sv14[8150] * weights14[iq];
        alignas(32) double TF2[7];
        for (int i = 0; i < 7; ++i)
            TF2[i] = fw2 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF2[i][j] += TF2[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw3 = sv14[8151] * weights14[iq];
        alignas(32) double TF3[7];
        for (int i = 0; i < 7; ++i)
            TF3[i] = fw3 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF3[i][j] += TF3[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw4 = sv14[8152] * weights14[iq];
        alignas(32) double TF4[7];
        for (int i = 0; i < 7; ++i)
            TF4[i] = fw4 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF4[i][j] += TF4[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw5 = sv14[8153] * weights14[iq];
        alignas(32) double TF5[7];
        for (int i = 0; i < 7; ++i)
            TF5[i] = fw5 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF5[i][j] += TF5[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw6 = sv14[8154] * weights14[iq];
        alignas(32) double TF6[7];
        for (int i = 0; i < 7; ++i)
            TF6[i] = fw6 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF6[i][j] += TF6[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw7 = sv14[8155] * weights14[iq];
        alignas(32) double TF7[7];
        for (int i = 0; i < 7; ++i)
            TF7[i] = fw7 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF7[i][j] += TF7[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw8 = sv14[8156] * weights14[iq];
        alignas(32) double TF8[7];
        for (int i = 0; i < 7; ++i)
            TF8[i] = fw8 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF8[i][j] += TF8[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw9 = sv14[8157] * weights14[iq];
        alignas(32) double TF9[7];
        for (int i = 0; i < 7; ++i)
            TF9[i] = fw9 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF9[i][j] += TF9[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw10 = sv14[8158] * weights14[iq];
        alignas(32) double TF10[7];
        for (int i = 0; i < 7; ++i)
            TF10[i] = fw10 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF10[i][j] += TF10[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw11 = sv14[8159] * weights14[iq];
        alignas(32) double TF11[7];
        for (int i = 0; i < 7; ++i)
            TF11[i] = fw11 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF11[i][j] += TF11[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw12 = sv14[8160] * weights14[iq];
        alignas(32) double TF12[7];
        for (int i = 0; i < 7; ++i)
            TF12[i] = fw12 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF12[i][j] += TF12[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw13 = sv14[8161] * weights14[iq];
        alignas(32) double TF13[7];
        for (int i = 0; i < 7; ++i)
            TF13[i] = fw13 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF13[i][j] += TF13[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw14 = sv14[8162] * weights14[iq];
        alignas(32) double TF14[7];
        for (int i = 0; i < 7; ++i)
            TF14[i] = fw14 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF14[i][j] += TF14[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw15 = sv14[8163] * weights14[iq];
        alignas(32) double TF15[7];
        for (int i = 0; i < 7; ++i)
            TF15[i] = fw15 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF15[i][j] += TF15[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw16 = sv14[8164] * weights14[iq];
        alignas(32) double TF16[7];
        for (int i = 0; i < 7; ++i)
            TF16[i] = fw16 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF16[i][j] += TF16[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw17 = sv14[8165] * weights14[iq];
        alignas(32) double TF17[7];
        for (int i = 0; i < 7; ++i)
            TF17[i] = fw17 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF17[i][j] += TF17[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw18 = sv14[8166] * weights14[iq];
        alignas(32) double TF18[7];
        for (int i = 0; i < 7; ++i)
            TF18[i] = fw18 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF18[i][j] += TF18[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw19 = sv14[8167] * weights14[iq];
        alignas(32) double TF19[7];
        for (int i = 0; i < 7; ++i)
            TF19[i] = fw19 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF19[i][j] += TF19[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw20 = sv14[8168] * weights14[iq];
        alignas(32) double TF20[7];
        for (int i = 0; i < 7; ++i)
            TF20[i] = fw20 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF20[i][j] += TF20[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw21 = sv14[8169] * weights14[iq];
        alignas(32) double TF21[7];
        for (int i = 0; i < 7; ++i)
            TF21[i] = fw21 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF21[i][j] += TF21[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw22 = sv14[8170] * weights14[iq];
        alignas(32) double TF22[7];
        for (int i = 0; i < 7; ++i)
            TF22[i] = fw22 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF22[i][j] += TF22[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw23 = sv14[8171] * weights14[iq];
        alignas(32) double TF23[7];
        for (int i = 0; i < 7; ++i)
            TF23[i] = fw23 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF23[i][j] += TF23[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw24 = sv14[8172] * weights14[iq];
        alignas(32) double TF24[7];
        for (int i = 0; i < 7; ++i)
            TF24[i] = fw24 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF24[i][j] += TF24[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw25 = sv14[8173] * weights14[iq];
        alignas(32) double TF25[7];
        for (int i = 0; i < 7; ++i)
            TF25[i] = fw25 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF25[i][j] += TF25[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw26 = sv14[8174] * weights14[iq];
        alignas(32) double TF26[7];
        for (int i = 0; i < 7; ++i)
            TF26[i] = fw26 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF26[i][j] += TF26[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw27 = sv14[8175] * weights14[iq];
        alignas(32) double TF27[7];
        for (int i = 0; i < 7; ++i)
            TF27[i] = fw27 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF27[i][j] += TF27[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw28 = sv14[8181] * weights14[iq];
        alignas(32) double TF28[7];
        for (int i = 0; i < 7; ++i)
            TF28[i] = fw28 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF28[i][j] += TF28[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw29 = sv14[8187] * weights14[iq];
        alignas(32) double TF29[7];
        for (int i = 0; i < 7; ++i)
            TF29[i] = fw29 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF29[i][j] += TF29[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw30 = sv14[8193] * weights14[iq];
        alignas(32) double TF30[7];
        for (int i = 0; i < 7; ++i)
            TF30[i] = fw30 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF30[i][j] += TF30[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw31 = sv14[8194] * weights14[iq];
        alignas(32) double TF31[7];
        for (int i = 0; i < 7; ++i)
            TF31[i] = fw31 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF31[i][j] += TF31[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw32 = sv14[8195] * weights14[iq];
        alignas(32) double TF32[7];
        for (int i = 0; i < 7; ++i)
            TF32[i] = fw32 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF32[i][j] += TF32[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw33 = sv14[8196] * weights14[iq];
        alignas(32) double TF33[7];
        for (int i = 0; i < 7; ++i)
            TF33[i] = fw33 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF33[i][j] += TF33[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw34 = sv14[8197] * weights14[iq];
        alignas(32) double TF34[7];
        for (int i = 0; i < 7; ++i)
            TF34[i] = fw34 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF34[i][j] += TF34[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw35 = sv14[8198] * weights14[iq];
        alignas(32) double TF35[7];
        for (int i = 0; i < 7; ++i)
            TF35[i] = fw35 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF35[i][j] += TF35[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw36 = sv14[8176] * weights14[iq];
        alignas(32) double TF36[7];
        for (int i = 0; i < 7; ++i)
            TF36[i] = fw36 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF36[i][j] += TF36[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw37 = sv14[8182] * weights14[iq];
        alignas(32) double TF37[7];
        for (int i = 0; i < 7; ++i)
            TF37[i] = fw37 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF37[i][j] += TF37[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw38 = sv14[8188] * weights14[iq];
        alignas(32) double TF38[7];
        for (int i = 0; i < 7; ++i)
            TF38[i] = fw38 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF38[i][j] += TF38[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw39 = sv14[8199] * weights14[iq];
        alignas(32) double TF39[7];
        for (int i = 0; i < 7; ++i)
            TF39[i] = fw39 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF39[i][j] += TF39[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw40 = sv14[8200] * weights14[iq];
        alignas(32) double TF40[7];
        for (int i = 0; i < 7; ++i)
            TF40[i] = fw40 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF40[i][j] += TF40[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw41 = sv14[8201] * weights14[iq];
        alignas(32) double TF41[7];
        for (int i = 0; i < 7; ++i)
            TF41[i] = fw41 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF41[i][j] += TF41[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw42 = sv14[8202] * weights14[iq];
        alignas(32) double TF42[7];
        for (int i = 0; i < 7; ++i)
            TF42[i] = fw42 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF42[i][j] += TF42[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw43 = sv14[8203] * weights14[iq];
        alignas(32) double TF43[7];
        for (int i = 0; i < 7; ++i)
            TF43[i] = fw43 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF43[i][j] += TF43[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw44 = sv14[8204] * weights14[iq];
        alignas(32) double TF44[7];
        for (int i = 0; i < 7; ++i)
            TF44[i] = fw44 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF44[i][j] += TF44[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw45 = sv14[8177] * weights14[iq];
        alignas(32) double TF45[7];
        for (int i = 0; i < 7; ++i)
            TF45[i] = fw45 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF45[i][j] += TF45[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw46 = sv14[8183] * weights14[iq];
        alignas(32) double TF46[7];
        for (int i = 0; i < 7; ++i)
            TF46[i] = fw46 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF46[i][j] += TF46[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw47 = sv14[8189] * weights14[iq];
        alignas(32) double TF47[7];
        for (int i = 0; i < 7; ++i)
            TF47[i] = fw47 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF47[i][j] += TF47[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw48 = sv14[8205] * weights14[iq];
        alignas(32) double TF48[7];
        for (int i = 0; i < 7; ++i)
            TF48[i] = fw48 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF48[i][j] += TF48[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw49 = sv14[8206] * weights14[iq];
        alignas(32) double TF49[7];
        for (int i = 0; i < 7; ++i)
            TF49[i] = fw49 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF49[i][j] += TF49[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw50 = sv14[8207] * weights14[iq];
        alignas(32) double TF50[7];
        for (int i = 0; i < 7; ++i)
            TF50[i] = fw50 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF50[i][j] += TF50[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw51 = sv14[8208] * weights14[iq];
        alignas(32) double TF51[7];
        for (int i = 0; i < 7; ++i)
            TF51[i] = fw51 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF51[i][j] += TF51[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw52 = sv14[8209] * weights14[iq];
        alignas(32) double TF52[7];
        for (int i = 0; i < 7; ++i)
            TF52[i] = fw52 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF52[i][j] += TF52[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw53 = sv14[8210] * weights14[iq];
        alignas(32) double TF53[7];
        for (int i = 0; i < 7; ++i)
            TF53[i] = fw53 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF53[i][j] += TF53[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw54 = sv14[8178] * weights14[iq];
        alignas(32) double TF54[7];
        for (int i = 0; i < 7; ++i)
            TF54[i] = fw54 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF54[i][j] += TF54[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw55 = sv14[8184] * weights14[iq];
        alignas(32) double TF55[7];
        for (int i = 0; i < 7; ++i)
            TF55[i] = fw55 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF55[i][j] += TF55[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw56 = sv14[8190] * weights14[iq];
        alignas(32) double TF56[7];
        for (int i = 0; i < 7; ++i)
            TF56[i] = fw56 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF56[i][j] += TF56[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw57 = sv14[8211] * weights14[iq];
        alignas(32) double TF57[7];
        for (int i = 0; i < 7; ++i)
            TF57[i] = fw57 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF57[i][j] += TF57[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw58 = sv14[8214] * weights14[iq];
        alignas(32) double TF58[7];
        for (int i = 0; i < 7; ++i)
            TF58[i] = fw58 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF58[i][j] += TF58[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw59 = sv14[8217] * weights14[iq];
        alignas(32) double TF59[7];
        for (int i = 0; i < 7; ++i)
            TF59[i] = fw59 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF59[i][j] += TF59[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw60 = sv14[8220] * weights14[iq];
        alignas(32) double TF60[7];
        for (int i = 0; i < 7; ++i)
            TF60[i] = fw60 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF60[i][j] += TF60[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw61 = sv14[8221] * weights14[iq];
        alignas(32) double TF61[7];
        for (int i = 0; i < 7; ++i)
            TF61[i] = fw61 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF61[i][j] += TF61[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw62 = sv14[8222] * weights14[iq];
        alignas(32) double TF62[7];
        for (int i = 0; i < 7; ++i)
            TF62[i] = fw62 * FE33_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF62[i][j] += TF62[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw63 = sv14[8179] * weights14[iq];
        alignas(32) double TF63[7];
        for (int i = 0; i < 7; ++i)
            TF63[i] = fw63 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF63[i][j] += TF63[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw64 = sv14[8185] * weights14[iq];
        alignas(32) double TF64[7];
        for (int i = 0; i < 7; ++i)
            TF64[i] = fw64 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF64[i][j] += TF64[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw65 = sv14[8191] * weights14[iq];
        alignas(32) double TF65[7];
        for (int i = 0; i < 7; ++i)
            TF65[i] = fw65 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF65[i][j] += TF65[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw66 = sv14[8212] * weights14[iq];
        alignas(32) double TF66[7];
        for (int i = 0; i < 7; ++i)
            TF66[i] = fw66 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF66[i][j] += TF66[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw67 = sv14[8215] * weights14[iq];
        alignas(32) double TF67[7];
        for (int i = 0; i < 7; ++i)
            TF67[i] = fw67 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF67[i][j] += TF67[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw68 = sv14[8218] * weights14[iq];
        alignas(32) double TF68[7];
        for (int i = 0; i < 7; ++i)
            TF68[i] = fw68 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF68[i][j] += TF68[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw69 = sv14[8223] * weights14[iq];
        alignas(32) double TF69[7];
        for (int i = 0; i < 7; ++i)
            TF69[i] = fw69 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF69[i][j] += TF69[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw70 = sv14[8224] * weights14[iq];
        alignas(32) double TF70[7];
        for (int i = 0; i < 7; ++i)
            TF70[i] = fw70 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF70[i][j] += TF70[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw71 = sv14[8225] * weights14[iq];
        alignas(32) double TF71[7];
        for (int i = 0; i < 7; ++i)
            TF71[i] = fw71 * FE33_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF71[i][j] += TF71[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw72 = sv14[8180] * weights14[iq];
        alignas(32) double TF72[7];
        for (int i = 0; i < 7; ++i)
            TF72[i] = fw72 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF72[i][j] += TF72[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw73 = sv14[8186] * weights14[iq];
        alignas(32) double TF73[7];
        for (int i = 0; i < 7; ++i)
            TF73[i] = fw73 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF73[i][j] += TF73[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw74 = sv14[8192] * weights14[iq];
        alignas(32) double TF74[7];
        for (int i = 0; i < 7; ++i)
            TF74[i] = fw74 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF74[i][j] += TF74[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw75 = sv14[8213] * weights14[iq];
        alignas(32) double TF75[7];
        for (int i = 0; i < 7; ++i)
            TF75[i] = fw75 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF75[i][j] += TF75[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw76 = sv14[8216] * weights14[iq];
        alignas(32) double TF76[7];
        for (int i = 0; i < 7; ++i)
            TF76[i] = fw76 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF76[i][j] += TF76[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw77 = sv14[8219] * weights14[iq];
        alignas(32) double TF77[7];
        for (int i = 0; i < 7; ++i)
            TF77[i] = fw77 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF77[i][j] += TF77[i] * FE33_C0_D001_Q14[0][iq][j];
        const double fw78 = sv14[8226] * weights14[iq];
        alignas(32) double TF78[7];
        for (int i = 0; i < 7; ++i)
            TF78[i] = fw78 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF78[i][j] += TF78[i] * FE33_C0_D100_Q14[0][iq][j];
        const double fw79 = sv14[8227] * weights14[iq];
        alignas(32) double TF79[7];
        for (int i = 0; i < 7; ++i)
            TF79[i] = fw79 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF79[i][j] += TF79[i] * FE33_C0_D010_Q14[0][iq][j];
        const double fw80 = sv14[8228] * weights14[iq];
        alignas(32) double TF80[7];
        for (int i = 0; i < 7; ++i)
            TF80[i] = fw80 * FE33_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF80[i][j] += TF80[i] * FE33_C0_D001_Q14[0][iq][j];
    }
    std::fill(&A[0], &A[900], 0.0);
    static const int DM0[7] = { 0, 1, 5, 6, 7, 8, 9 };
    static const int DM1[7] = { 0, 2, 4, 6, 7, 8, 9 };
    static const int DM2[7] = { 0, 3, 4, 5, 7, 8, 9 };
    static const int DM3[7] = { 10, 11, 15, 16, 17, 18, 19 };
    static const int DM4[7] = { 10, 12, 14, 16, 17, 18, 19 };
    static const int DM5[7] = { 10, 13, 14, 15, 17, 18, 19 };
    static const int DM6[7] = { 20, 21, 25, 26, 27, 28, 29 };
    static const int DM7[7] = { 20, 22, 24, 26, 27, 28, 29 };
    static const int DM8[7] = { 20, 23, 24, 25, 27, 28, 29 };
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM0[j]] += BF0[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM1[j]] += BF1[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM2[j]] += BF2[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM3[j]] += BF3[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM4[j]] += BF4[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM5[j]] += BF5[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM6[j]] += BF6[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM7[j]] += BF7[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM8[j]] += BF8[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM0[j]] += BF9[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM1[j]] += BF10[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM2[j]] += BF11[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM3[j]] += BF12[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM4[j]] += BF13[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM5[j]] += BF14[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM6[j]] += BF15[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM7[j]] += BF16[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM8[j]] += BF17[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM0[j]] += BF18[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM1[j]] += BF19[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM2[j]] += BF20[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM3[j]] += BF21[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM4[j]] += BF22[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM5[j]] += BF23[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM6[j]] += BF24[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM7[j]] += BF25[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM8[j]] += BF26[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM0[j]] += BF27[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM1[j]] += BF28[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM2[j]] += BF29[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM3[j]] += BF30[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM4[j]] += BF31[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM5[j]] += BF32[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM6[j]] += BF33[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM7[j]] += BF34[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM8[j]] += BF35[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM0[j]] += BF36[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM1[j]] += BF37[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM2[j]] += BF38[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM3[j]] += BF39[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM4[j]] += BF40[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM5[j]] += BF41[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM6[j]] += BF42[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM7[j]] += BF43[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM8[j]] += BF44[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM0[j]] += BF45[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM1[j]] += BF46[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM2[j]] += BF47[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM3[j]] += BF48[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM4[j]] += BF49[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM5[j]] += BF50[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM6[j]] += BF51[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM7[j]] += BF52[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM8[j]] += BF53[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM0[j]] += BF54[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM1[j]] += BF55[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM2[j]] += BF56[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM3[j]] += BF57[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM4[j]] += BF58[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM5[j]] += BF59[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM6[j]] += BF60[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM7[j]] += BF61[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM8[j]] += BF62[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM0[j]] += BF63[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM1[j]] += BF64[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM2[j]] += BF65[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM3[j]] += BF66[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM4[j]] += BF67[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM5[j]] += BF68[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM6[j]] += BF69[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM7[j]] += BF70[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM8[j]] += BF71[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM0[j]] += BF72[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM1[j]] += BF73[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM2[j]] += BF74[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM3[j]] += BF75[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM4[j]] += BF76[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM5[j]] += BF77[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM6[j]] += BF78[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM7[j]] += BF79[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM8[j]] += BF80[i][j];
}


hyperelasticityb_cell_integral_2_otherwise::hyperelasticityb_cell_integral_2_otherwise() : ufc::cell_integral()
{

}

hyperelasticityb_cell_integral_2_otherwise::~hyperelasticityb_cell_integral_2_otherwise()
{

}

const std::vector<bool> & hyperelasticityb_cell_integral_2_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true, true, false});
return enabled;
}

void hyperelasticityb_cell_integral_2_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 66
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE30_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000003, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000005, 0.0, -2.0, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 1.999999999999998, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000004, 0.0, 2.0, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991836, -0.5978929390991861, 0.4021070609008199, 2.793678817297555, 0.0, -0.4021070609008182, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008198, 0.4021070609008229, 2.391571756396729, -0.4021070609008185, -0.4021070609008184 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008144, 0.4021070609008263, -2.39157175639673, -0.4021070609008171, -0.402107060900819 },
            { 0.5978929390991841, -0.5978929390991863, 2.79367881729755, 0.4021070609008244, 0.0, -2.793678817297547, -0.4021070609008175 },
            { -0.2574914939727682, 0.2574914939727652, 1.257491493972769, 0.2275255180816996, 0.0, -1.257491493972769, -0.2275255180816941 },
            { 0.7724744819183069, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727681, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891075, -1.257491493972769, -1.257491493972769 },
            { -0.257491493972768, 0.2574914939727655, 0.2275255180816934, 1.257491493972776, 0.0, -0.2275255180816934, -1.25749149397277 } } };
    alignas(32) static const double FE30_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.000000000000001 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000003, -1.999999999999999 },
            { -1.0, -1.0, 0.0, 2.000000000000007, 0.0, 1.999999999999998, -2.000000000000001 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991843, -0.5978929390991847, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991851, 0.4021070609008187, 0.4021070609008227, -0.4021070609008185, 2.391571756396729, -0.4021070609008189 },
            { 0.5978929390991842, -0.5978929390991837, 2.793678817297549, 0.4021070609008198, -2.793678817297548, 0.0, -0.4021070609008182 },
            { 0.5978929390991838, 1.793678817297543, 0.402107060900819, 0.4021070609008254, -0.4021070609008185, -2.39157175639673, -0.4021070609008194 },
            { -0.2574914939727676, 0.2574914939727658, 1.25749149397277, 0.2275255180816987, -1.25749149397277, 0.0, -0.2275255180816943 },
            { 0.7724744819183077, 0.2574914939727662, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727675, 0.2574914939727655, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.257491493972769 },
            { -0.2574914939727673, -0.7724744819183084, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE30_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -1.999999999999999 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 1.999999999999999 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999999 },
            { 0.5978929390991834, 1.793678817297545, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396729 },
            { -1.793678817297545, -0.5978929390991823, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396728 },
            { 0.597892939099184, -0.5978929390991828, 2.79367881729755, 0.402107060900818, -2.793678817297549, -0.402107060900818, 0.0 },
            { 0.5978929390991843, -0.5978929390991833, 0.4021070609008183, 2.793678817297548, -0.4021070609008183, -2.793678817297549, 0.0 },
            { -0.2574914939727672, -0.772474481918307, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183076, 0.2574914939727675, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727678, 0.2574914939727679, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727674, 0.2574914939727682, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.227525518081694, 0.0 } } };
    alignas(32) static const double FE40_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE40_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE40_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE40_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE40_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE40_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE40_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE40_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE40_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE40_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE40_C0_D001_Q14[0][0][1];
    alignas(32) double sp[48];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w[8][0] / w[9][0];
    sp[44] = std::abs(sp[13]);
    sp[45] = -1 * w[1][0] * sp[44];
    sp[46] = -1 * w[1][1] * sp[44];
    sp[47] = -1 * w[1][2] * sp[44];
    alignas(32) double BF0[7] = {};
    alignas(32) double BF1[7] = {};
    alignas(32) double BF2[7] = {};
    alignas(32) double BF3[7] = {};
    alignas(32) double BF4[7] = {};
    alignas(32) double BF5[7] = {};
    alignas(32) double BF6[7] = {};
    alignas(32) double BF7[7] = {};
    alignas(32) double BF8[7] = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c0 = w[0][0] * FE30_C0_D100_Q14[0][iq][0] + w[0][1] * FE30_C0_D100_Q14[0][iq][1] + w[0][5] * FE30_C0_D100_Q14[0][iq][2] + w[0][6] * FE30_C0_D100_Q14[0][iq][3] + w[0][7] * FE30_C0_D100_Q14[0][iq][4] + w[0][8] * FE30_C0_D100_Q14[0][iq][5] + w[0][9] * FE30_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE30_C0_D010_Q14[0][iq][0] + w[0][2] * FE30_C0_D010_Q14[0][iq][1] + w[0][4] * FE30_C0_D010_Q14[0][iq][2] + w[0][6] * FE30_C0_D010_Q14[0][iq][3] + w[0][7] * FE30_C0_D010_Q14[0][iq][4] + w[0][8] * FE30_C0_D010_Q14[0][iq][5] + w[0][9] * FE30_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE30_C0_D001_Q14[0][iq][0] + w[0][3] * FE30_C0_D001_Q14[0][iq][1] + w[0][4] * FE30_C0_D001_Q14[0][iq][2] + w[0][5] * FE30_C0_D001_Q14[0][iq][3] + w[0][7] * FE30_C0_D001_Q14[0][iq][4] + w[0][8] * FE30_C0_D001_Q14[0][iq][5] + w[0][9] * FE30_C0_D001_Q14[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE30_C0_D100_Q14[0][iq][0] + w[0][11] * FE30_C0_D100_Q14[0][iq][1] + w[0][15] * FE30_C0_D100_Q14[0][iq][2] + w[0][16] * FE30_C0_D100_Q14[0][iq][3] + w[0][17] * FE30_C0_D100_Q14[0][iq][4] + w[0][18] * FE30_C0_D100_Q14[0][iq][5] + w[0][19] * FE30_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE30_C0_D010_Q14[0][iq][0] + w[0][12] * FE30_C0_D010_Q14[0][iq][1] + w[0][14] * FE30_C0_D010_Q14[0][iq][2] + w[0][16] * FE30_C0_D010_Q14[0][iq][3] + w[0][17] * FE30_C0_D010_Q14[0][iq][4] + w[0][18] * FE30_C0_D010_Q14[0][iq][5] + w[0][19] * FE30_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE30_C0_D001_Q14[0][iq][0] + w[0][13] * FE30_C0_D001_Q14[0][iq][1] + w[0][14] * FE30_C0_D001_Q14[0][iq][2] + w[0][15] * FE30_C0_D001_Q14[0][iq][3] + w[0][17] * FE30_C0_D001_Q14[0][iq][4] + w[0][18] * FE30_C0_D001_Q14[0][iq][5] + w[0][19] * FE30_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE30_C0_D100_Q14[0][iq][0] + w[0][21] * FE30_C0_D100_Q14[0][iq][1] + w[0][25] * FE30_C0_D100_Q14[0][iq][2] + w[0][26] * FE30_C0_D100_Q14[0][iq][3] + w[0][27] * FE30_C0_D100_Q14[0][iq][4] + w[0][28] * FE30_C0_D100_Q14[0][iq][5] + w[0][29] * FE30_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE30_C0_D010_Q14[0][iq][0] + w[0][22] * FE30_C0_D010_Q14[0][iq][1] + w[0][24] * FE30_C0_D010_Q14[0][iq][2] + w[0][26] * FE30_C0_D010_Q14[0][iq][3] + w[0][27] * FE30_C0_D010_Q14[0][iq][4] + w[0][28] * FE30_C0_D010_Q14[0][iq][5] + w[0][29] * FE30_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE30_C0_D001_Q14[0][iq][0] + w[0][23] * FE30_C0_D001_Q14[0][iq][1] + w[0][24] * FE30_C0_D001_Q14[0][iq][2] + w[0][25] * FE30_C0_D001_Q14[0][iq][3] + w[0][27] * FE30_C0_D001_Q14[0][iq][4] + w[0][28] * FE30_C0_D001_Q14[0][iq][5] + w[0][29] * FE30_C0_D001_Q14[0][iq][6];
        alignas(32) double sv14[1231];
        sv14[0] = w0_d0_c0 * sp[14];
        sv14[1] = w0_d1_c0 * sp[17];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c0 * sp[18];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = (1 + sv14[4]) * sp[14];
        sv14[6] = (1 + sv14[4]) * sp[17];
        sv14[7] = (1 + sv14[4]) * sp[18];
        sv14[8] = sv14[5] + sv14[5];
        sv14[9] = sv14[6] + sv14[6];
        sv14[10] = sv14[7] + sv14[7];
        sv14[11] = w0_d0_c1 * sp[14];
        sv14[12] = w0_d1_c1 * sp[17];
        sv14[13] = sv14[11] + sv14[12];
        sv14[14] = w0_d2_c1 * sp[18];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = sv14[15] * sp[14];
        sv14[17] = sv14[15] * sp[17];
        sv14[18] = sv14[15] * sp[18];
        sv14[19] = sv14[16] + sv14[16];
        sv14[20] = sv14[17] + sv14[17];
        sv14[21] = sv14[18] + sv14[18];
        sv14[22] = w0_d0_c2 * sp[14];
        sv14[23] = w0_d1_c2 * sp[17];
        sv14[24] = sv14[22] + sv14[23];
        sv14[25] = w0_d2_c2 * sp[18];
        sv14[26] = sv14[24] + sv14[25];
        sv14[27] = sv14[26] * sp[14];
        sv14[28] = sv14[26] * sp[17];
        sv14[29] = sv14[26] * sp[18];
        sv14[30] = sv14[27] + sv14[27];
        sv14[31] = sv14[28] + sv14[28];
        sv14[32] = sv14[29] + sv14[29];
        sv14[33] = w0_d0_c0 * sp[22];
        sv14[34] = w0_d1_c0 * sp[26];
        sv14[35] = sv14[33] + sv14[34];
        sv14[36] = w0_d2_c0 * sp[30];
        sv14[37] = sv14[35] + sv14[36];
        sv14[38] = sv14[37] * sp[22];
        sv14[39] = sv14[37] * sp[26];
        sv14[40] = sv14[37] * sp[30];
        sv14[41] = sv14[38] + sv14[38];
        sv14[42] = sv14[39] + sv14[39];
        sv14[43] = sv14[40] + sv14[40];
        sv14[44] = w0_d0_c1 * sp[22];
        sv14[45] = w0_d1_c1 * sp[26];
        sv14[46] = sv14[44] + sv14[45];
        sv14[47] = w0_d2_c1 * sp[30];
        sv14[48] = sv14[46] + sv14[47];
        sv14[49] = (1 + sv14[48]) * sp[22];
        sv14[50] = (1 + sv14[48]) * sp[26];
        sv14[51] = (1 + sv14[48]) * sp[30];
        sv14[52] = sv14[49] + sv14[49];
        sv14[53] = sv14[50] + sv14[50];
        sv14[54] = sv14[51] + sv14[51];
        sv14[55] = w0_d0_c2 * sp[22];
        sv14[56] = w0_d1_c2 * sp[26];
        sv14[57] = sv14[55] + sv14[56];
        sv14[58] = w0_d2_c2 * sp[30];
        sv14[59] = sv14[57] + sv14[58];
        sv14[60] = sv14[59] * sp[22];
        sv14[61] = sv14[59] * sp[26];
        sv14[62] = sv14[59] * sp[30];
        sv14[63] = sv14[60] + sv14[60];
        sv14[64] = sv14[61] + sv14[61];
        sv14[65] = sv14[62] + sv14[62];
        sv14[66] = sv14[41] + sv14[8];
        sv14[67] = sv14[42] + sv14[9];
        sv14[68] = sv14[10] + sv14[43];
        sv14[69] = sv14[52] + sv14[19];
        sv14[70] = sv14[53] + sv14[20];
        sv14[71] = sv14[21] + sv14[54];
        sv14[72] = sv14[63] + sv14[30];
        sv14[73] = sv14[64] + sv14[31];
        sv14[74] = sv14[32] + sv14[65];
        sv14[75] = w0_d0_c0 * sp[34];
        sv14[76] = w0_d1_c0 * sp[38];
        sv14[77] = sv14[75] + sv14[76];
        sv14[78] = w0_d2_c0 * sp[42];
        sv14[79] = sv14[77] + sv14[78];
        sv14[80] = sv14[79] * sp[34];
        sv14[81] = sv14[79] * sp[38];
        sv14[82] = sv14[79] * sp[42];
        sv14[83] = sv14[80] + sv14[80];
        sv14[84] = sv14[81] + sv14[81];
        sv14[85] = sv14[82] + sv14[82];
        sv14[86] = w0_d0_c1 * sp[34];
        sv14[87] = w0_d1_c1 * sp[38];
        sv14[88] = sv14[86] + sv14[87];
        sv14[89] = w0_d2_c1 * sp[42];
        sv14[90] = sv14[88] + sv14[89];
        sv14[91] = sv14[90] * sp[34];
        sv14[92] = sv14[90] * sp[38];
        sv14[93] = sv14[90] * sp[42];
        sv14[94] = sv14[91] + sv14[91];
        sv14[95] = sv14[92] + sv14[92];
        sv14[96] = sv14[93] + sv14[93];
        sv14[97] = w0_d0_c2 * sp[34];
        sv14[98] = w0_d1_c2 * sp[38];
        sv14[99] = sv14[97] + sv14[98];
        sv14[100] = w0_d2_c2 * sp[42];
        sv14[101] = sv14[99] + sv14[100];
        sv14[102] = (1 + sv14[101]) * sp[34];
        sv14[103] = (1 + sv14[101]) * sp[38];
        sv14[104] = (1 + sv14[101]) * sp[42];
        sv14[105] = sv14[102] + sv14[102];
        sv14[106] = sv14[103] + sv14[103];
        sv14[107] = sv14[104] + sv14[104];
        sv14[108] = sv14[66] + sv14[83];
        sv14[109] = sv14[67] + sv14[84];
        sv14[110] = sv14[68] + sv14[85];
        sv14[111] = sv14[69] + sv14[94];
        sv14[112] = sv14[70] + sv14[95];
        sv14[113] = sv14[71] + sv14[96];
        sv14[114] = sv14[72] + sv14[105];
        sv14[115] = sv14[73] + sv14[106];
        sv14[116] = sv14[74] + sv14[107];
        sv14[117] = sv14[79] * sv14[79];
        sv14[118] = sv14[90] * sv14[90];
        sv14[119] = sv14[117] + sv14[118];
        sv14[120] = (1 + sv14[101]) * (1 + sv14[101]);
        sv14[121] = sv14[119] + sv14[120];
        sv14[122] = sv14[121] * sv14[41];
        sv14[123] = sv14[121] * sv14[42];
        sv14[124] = sv14[121] * sv14[43];
        sv14[125] = sv14[121] * sv14[52];
        sv14[126] = sv14[121] * sv14[53];
        sv14[127] = sv14[121] * sv14[54];
        sv14[128] = sv14[121] * sv14[63];
        sv14[129] = sv14[121] * sv14[64];
        sv14[130] = sv14[121] * sv14[65];
        sv14[131] = (1 + sv14[48]) * (1 + sv14[48]);
        sv14[132] = sv14[37] * sv14[37];
        sv14[133] = sv14[131] + sv14[132];
        sv14[134] = sv14[59] * sv14[59];
        sv14[135] = sv14[133] + sv14[134];
        sv14[136] = sv14[135] * sv14[83];
        sv14[137] = sv14[135] * sv14[84];
        sv14[138] = sv14[135] * sv14[85];
        sv14[139] = sv14[135] * sv14[94];
        sv14[140] = sv14[135] * sv14[95];
        sv14[141] = sv14[135] * sv14[96];
        sv14[142] = sv14[135] * sv14[105];
        sv14[143] = sv14[135] * sv14[106];
        sv14[144] = sv14[135] * sv14[107];
        sv14[145] = sv14[122] + sv14[136];
        sv14[146] = sv14[123] + sv14[137];
        sv14[147] = sv14[138] + sv14[124];
        sv14[148] = sv14[125] + sv14[139];
        sv14[149] = sv14[126] + sv14[140];
        sv14[150] = sv14[141] + sv14[127];
        sv14[151] = sv14[128] + sv14[142];
        sv14[152] = sv14[129] + sv14[143];
        sv14[153] = sv14[144] + sv14[130];
        sv14[154] = sv14[79] * sp[22];
        sv14[155] = sv14[79] * sp[26];
        sv14[156] = sv14[79] * sp[30];
        sv14[157] = sv14[37] * sp[34];
        sv14[158] = sv14[37] * sp[38];
        sv14[159] = sv14[37] * sp[42];
        sv14[160] = sv14[154] + sv14[157];
        sv14[161] = sv14[155] + sv14[158];
        sv14[162] = sv14[159] + sv14[156];
        sv14[163] = (1 + sv14[48]) * sp[34];
        sv14[164] = (1 + sv14[48]) * sp[38];
        sv14[165] = (1 + sv14[48]) * sp[42];
        sv14[166] = sv14[90] * sp[22];
        sv14[167] = sv14[90] * sp[26];
        sv14[168] = sv14[90] * sp[30];
        sv14[169] = sv14[166] + sv14[163];
        sv14[170] = sv14[167] + sv14[164];
        sv14[171] = sv14[165] + sv14[168];
        sv14[172] = (1 + sv14[101]) * sp[22];
        sv14[173] = (1 + sv14[101]) * sp[26];
        sv14[174] = (1 + sv14[101]) * sp[30];
        sv14[175] = sv14[59] * sp[34];
        sv14[176] = sv14[59] * sp[38];
        sv14[177] = sv14[59] * sp[42];
        sv14[178] = sv14[172] + sv14[175];
        sv14[179] = sv14[173] + sv14[176];
        sv14[180] = sv14[177] + sv14[174];
        sv14[181] = (1 + sv14[48]) * sv14[90];
        sv14[182] = sv14[79] * sv14[37];
        sv14[183] = sv14[181] + sv14[182];
        sv14[184] = (1 + sv14[101]) * sv14[59];
        sv14[185] = sv14[183] + sv14[184];
        sv14[186] = sv14[185] * sv14[160];
        sv14[187] = sv14[185] * sv14[161];
        sv14[188] = sv14[185] * sv14[162];
        sv14[189] = sv14[185] * sv14[169];
        sv14[190] = sv14[185] * sv14[170];
        sv14[191] = sv14[185] * sv14[171];
        sv14[192] = sv14[185] * sv14[178];
        sv14[193] = sv14[185] * sv14[179];
        sv14[194] = sv14[185] * sv14[180];
        sv14[195] = sv14[186] + sv14[186];
        sv14[196] = sv14[187] + sv14[187];
        sv14[197] = sv14[188] + sv14[188];
        sv14[198] = sv14[189] + sv14[189];
        sv14[199] = sv14[190] + sv14[190];
        sv14[200] = sv14[191] + sv14[191];
        sv14[201] = sv14[192] + sv14[192];
        sv14[202] = sv14[193] + sv14[193];
        sv14[203] = sv14[194] + sv14[194];
        sv14[204] = sv14[145] + -1 * sv14[195];
        sv14[205] = sv14[146] + -1 * sv14[196];
        sv14[206] = sv14[147] + -1 * sv14[197];
        sv14[207] = sv14[148] + -1 * sv14[198];
        sv14[208] = sv14[149] + -1 * sv14[199];
        sv14[209] = sv14[150] + -1 * sv14[200];
        sv14[210] = sv14[151] + -1 * sv14[201];
        sv14[211] = sv14[152] + -1 * sv14[202];
        sv14[212] = sv14[153] + -1 * sv14[203];
        sv14[213] = (1 + sv14[4]) * (1 + sv14[4]);
        sv14[214] = sv14[15] * sv14[15];
        sv14[215] = sv14[213] + sv14[214];
        sv14[216] = sv14[26] * sv14[26];
        sv14[217] = sv14[215] + sv14[216];
        sv14[218] = sv14[204] * sv14[217];
        sv14[219] = sv14[205] * sv14[217];
        sv14[220] = sv14[206] * sv14[217];
        sv14[221] = sv14[207] * sv14[217];
        sv14[222] = sv14[208] * sv14[217];
        sv14[223] = sv14[209] * sv14[217];
        sv14[224] = sv14[210] * sv14[217];
        sv14[225] = sv14[211] * sv14[217];
        sv14[226] = sv14[212] * sv14[217];
        sv14[227] = sv14[121] * sv14[135];
        sv14[228] = sv14[185] * sv14[185];
        sv14[229] = sv14[227] + -1 * sv14[228];
        sv14[230] = sv14[229] * sv14[8];
        sv14[231] = sv14[229] * sv14[9];
        sv14[232] = sv14[229] * sv14[10];
        sv14[233] = sv14[229] * sv14[19];
        sv14[234] = sv14[229] * sv14[20];
        sv14[235] = sv14[229] * sv14[21];
        sv14[236] = sv14[229] * sv14[30];
        sv14[237] = sv14[229] * sv14[31];
        sv14[238] = sv14[229] * sv14[32];
        sv14[239] = sv14[218] + sv14[230];
        sv14[240] = sv14[219] + sv14[231];
        sv14[241] = sv14[220] + sv14[232];
        sv14[242] = sv14[221] + sv14[233];
        sv14[243] = sv14[222] + sv14[234];
        sv14[244] = sv14[223] + sv14[235];
        sv14[245] = sv14[224] + sv14[236];
        sv14[246] = sv14[225] + sv14[237];
        sv14[247] = sv14[226] + sv14[238];
        sv14[248] = (1 + sv14[4]) * sv14[79];
        sv14[249] = sv14[90] * sv14[15];
        sv14[250] = sv14[248] + sv14[249];
        sv14[251] = (1 + sv14[101]) * sv14[26];
        sv14[252] = sv14[250] + sv14[251];
        sv14[253] = sv14[252] * sv14[160];
        sv14[254] = sv14[252] * sv14[161];
        sv14[255] = sv14[252] * sv14[162];
        sv14[256] = sv14[252] * sv14[169];
        sv14[257] = sv14[252] * sv14[170];
        sv14[258] = sv14[252] * sv14[171];
        sv14[259] = sv14[252] * sv14[178];
        sv14[260] = sv14[252] * sv14[179];
        sv14[261] = sv14[252] * sv14[180];
        sv14[262] = (1 + sv14[4]) * sp[34];
        sv14[263] = (1 + sv14[4]) * sp[38];
        sv14[264] = (1 + sv14[4]) * sp[42];
        sv14[265] = sv14[79] * sp[14];
        sv14[266] = sv14[79] * sp[17];
        sv14[267] = sv14[79] * sp[18];
        sv14[268] = sv14[262] + sv14[265];
        sv14[269] = sv14[263] + sv14[266];
        sv14[270] = sv14[264] + sv14[267];
        sv14[271] = sv14[90] * sp[14];
        sv14[272] = sv14[90] * sp[17];
        sv14[273] = sv14[90] * sp[18];
        sv14[274] = sv14[15] * sp[34];
        sv14[275] = sv14[15] * sp[38];
        sv14[276] = sv14[15] * sp[42];
        sv14[277] = sv14[274] + sv14[271];
        sv14[278] = sv14[275] + sv14[272];
        sv14[279] = sv14[276] + sv14[273];
        sv14[280] = (1 + sv14[101]) * sp[14];
        sv14[281] = (1 + sv14[101]) * sp[17];
        sv14[282] = (1 + sv14[101]) * sp[18];
        sv14[283] = sv14[26] * sp[34];
        sv14[284] = sv14[26] * sp[38];
        sv14[285] = sv14[26] * sp[42];
        sv14[286] = sv14[283] + sv14[280];
        sv14[287] = sv14[284] + sv14[281];
        sv14[288] = sv14[285] + sv14[282];
        sv14[289] = sv14[185] * sv14[268];
        sv14[290] = sv14[185] * sv14[269];
        sv14[291] = sv14[185] * sv14[270];
        sv14[292] = sv14[185] * sv14[277];
        sv14[293] = sv14[185] * sv14[278];
        sv14[294] = sv14[185] * sv14[279];
        sv14[295] = sv14[185] * sv14[286];
        sv14[296] = sv14[185] * sv14[287];
        sv14[297] = sv14[185] * sv14[288];
        sv14[298] = sv14[253] + sv14[289];
        sv14[299] = sv14[254] + sv14[290];
        sv14[300] = sv14[291] + sv14[255];
        sv14[301] = sv14[256] + sv14[292];
        sv14[302] = sv14[257] + sv14[293];
        sv14[303] = sv14[294] + sv14[258];
        sv14[304] = sv14[259] + sv14[295];
        sv14[305] = sv14[260] + sv14[296];
        sv14[306] = sv14[297] + sv14[261];
        sv14[307] = (1 + sv14[4]) * sp[22];
        sv14[308] = (1 + sv14[4]) * sp[26];
        sv14[309] = (1 + sv14[4]) * sp[30];
        sv14[310] = sv14[37] * sp[14];
        sv14[311] = sv14[37] * sp[17];
        sv14[312] = sv14[37] * sp[18];
        sv14[313] = sv14[307] + sv14[310];
        sv14[314] = sv14[308] + sv14[311];
        sv14[315] = sv14[312] + sv14[309];
        sv14[316] = (1 + sv14[48]) * sp[14];
        sv14[317] = (1 + sv14[48]) * sp[17];
        sv14[318] = (1 + sv14[48]) * sp[18];
        sv14[319] = sv14[15] * sp[22];
        sv14[320] = sv14[15] * sp[26];
        sv14[321] = sv14[15] * sp[30];
        sv14[322] = sv14[319] + sv14[316];
        sv14[323] = sv14[320] + sv14[317];
        sv14[324] = sv14[318] + sv14[321];
        sv14[325] = sv14[26] * sp[22];
        sv14[326] = sv14[26] * sp[26];
        sv14[327] = sv14[26] * sp[30];
        sv14[328] = sv14[59] * sp[14];
        sv14[329] = sv14[59] * sp[17];
        sv14[330] = sv14[59] * sp[18];
        sv14[331] = sv14[325] + sv14[328];
        sv14[332] = sv14[326] + sv14[329];
        sv14[333] = sv14[330] + sv14[327];
        sv14[334] = sv14[121] * sv14[313];
        sv14[335] = sv14[121] * sv14[314];
        sv14[336] = sv14[121] * sv14[315];
        sv14[337] = sv14[121] * sv14[322];
        sv14[338] = sv14[121] * sv14[323];
        sv14[339] = sv14[121] * sv14[324];
        sv14[340] = sv14[121] * sv14[331];
        sv14[341] = sv14[121] * sv14[332];
        sv14[342] = sv14[121] * sv14[333];
        sv14[343] = (1 + sv14[48]) * sv14[15];
        sv14[344] = (1 + sv14[4]) * sv14[37];
        sv14[345] = sv14[343] + sv14[344];
        sv14[346] = sv14[26] * sv14[59];
        sv14[347] = sv14[345] + sv14[346];
        sv14[348] = sv14[347] * sv14[83];
        sv14[349] = sv14[347] * sv14[84];
        sv14[350] = sv14[347] * sv14[85];
        sv14[351] = sv14[347] * sv14[94];
        sv14[352] = sv14[347] * sv14[95];
        sv14[353] = sv14[347] * sv14[96];
        sv14[354] = sv14[347] * sv14[105];
        sv14[355] = sv14[347] * sv14[106];
        sv14[356] = sv14[347] * sv14[107];
        sv14[357] = sv14[348] + sv14[334];
        sv14[358] = sv14[349] + sv14[335];
        sv14[359] = sv14[350] + sv14[336];
        sv14[360] = sv14[351] + sv14[337];
        sv14[361] = sv14[352] + sv14[338];
        sv14[362] = sv14[353] + sv14[339];
        sv14[363] = sv14[354] + sv14[340];
        sv14[364] = sv14[355] + sv14[341];
        sv14[365] = sv14[356] + sv14[342];
        sv14[366] = sv14[298] + -1 * sv14[357];
        sv14[367] = sv14[299] + -1 * sv14[358];
        sv14[368] = sv14[300] + -1 * sv14[359];
        sv14[369] = sv14[301] + -1 * sv14[360];
        sv14[370] = sv14[302] + -1 * sv14[361];
        sv14[371] = sv14[303] + -1 * sv14[362];
        sv14[372] = sv14[304] + -1 * sv14[363];
        sv14[373] = sv14[305] + -1 * sv14[364];
        sv14[374] = sv14[306] + -1 * sv14[365];
        sv14[375] = sv14[366] * sv14[347];
        sv14[376] = sv14[367] * sv14[347];
        sv14[377] = sv14[368] * sv14[347];
        sv14[378] = sv14[369] * sv14[347];
        sv14[379] = sv14[370] * sv14[347];
        sv14[380] = sv14[371] * sv14[347];
        sv14[381] = sv14[372] * sv14[347];
        sv14[382] = sv14[373] * sv14[347];
        sv14[383] = sv14[374] * sv14[347];
        sv14[384] = sv14[252] * sv14[185];
        sv14[385] = sv14[121] * sv14[347];
        sv14[386] = sv14[384] + -1 * sv14[385];
        sv14[387] = sv14[386] * sv14[313];
        sv14[388] = sv14[386] * sv14[314];
        sv14[389] = sv14[386] * sv14[315];
        sv14[390] = sv14[386] * sv14[322];
        sv14[391] = sv14[386] * sv14[323];
        sv14[392] = sv14[386] * sv14[324];
        sv14[393] = sv14[386] * sv14[331];
        sv14[394] = sv14[386] * sv14[332];
        sv14[395] = sv14[386] * sv14[333];
        sv14[396] = sv14[375] + sv14[387];
        sv14[397] = sv14[376] + sv14[388];
        sv14[398] = sv14[377] + sv14[389];
        sv14[399] = sv14[378] + sv14[390];
        sv14[400] = sv14[379] + sv14[391];
        sv14[401] = sv14[380] + sv14[392];
        sv14[402] = sv14[381] + sv14[393];
        sv14[403] = sv14[382] + sv14[394];
        sv14[404] = sv14[383] + sv14[395];
        sv14[405] = sv14[239] + sv14[396];
        sv14[406] = sv14[240] + sv14[397];
        sv14[407] = sv14[241] + sv14[398];
        sv14[408] = sv14[399] + sv14[242];
        sv14[409] = sv14[400] + sv14[243];
        sv14[410] = sv14[244] + sv14[401];
        sv14[411] = sv14[245] + sv14[402];
        sv14[412] = sv14[246] + sv14[403];
        sv14[413] = sv14[247] + sv14[404];
        sv14[414] = sv14[185] * sv14[313];
        sv14[415] = sv14[185] * sv14[314];
        sv14[416] = sv14[185] * sv14[315];
        sv14[417] = sv14[185] * sv14[322];
        sv14[418] = sv14[185] * sv14[323];
        sv14[419] = sv14[185] * sv14[324];
        sv14[420] = sv14[185] * sv14[331];
        sv14[421] = sv14[185] * sv14[332];
        sv14[422] = sv14[185] * sv14[333];
        sv14[423] = sv14[347] * sv14[160];
        sv14[424] = sv14[347] * sv14[161];
        sv14[425] = sv14[347] * sv14[162];
        sv14[426] = sv14[347] * sv14[169];
        sv14[427] = sv14[347] * sv14[170];
        sv14[428] = sv14[347] * sv14[171];
        sv14[429] = sv14[347] * sv14[178];
        sv14[430] = sv14[347] * sv14[179];
        sv14[431] = sv14[347] * sv14[180];
        sv14[432] = sv14[423] + sv14[414];
        sv14[433] = sv14[424] + sv14[415];
        sv14[434] = sv14[416] + sv14[425];
        sv14[435] = sv14[426] + sv14[417];
        sv14[436] = sv14[427] + sv14[418];
        sv14[437] = sv14[428] + sv14[419];
        sv14[438] = sv14[429] + sv14[420];
        sv14[439] = sv14[430] + sv14[421];
        sv14[440] = sv14[431] + sv14[422];
        sv14[441] = sv14[252] * sv14[41];
        sv14[442] = sv14[252] * sv14[42];
        sv14[443] = sv14[252] * sv14[43];
        sv14[444] = sv14[252] * sv14[52];
        sv14[445] = sv14[252] * sv14[53];
        sv14[446] = sv14[252] * sv14[54];
        sv14[447] = sv14[252] * sv14[63];
        sv14[448] = sv14[252] * sv14[64];
        sv14[449] = sv14[252] * sv14[65];
        sv14[450] = sv14[135] * sv14[268];
        sv14[451] = sv14[135] * sv14[269];
        sv14[452] = sv14[135] * sv14[270];
        sv14[453] = sv14[135] * sv14[277];
        sv14[454] = sv14[135] * sv14[278];
        sv14[455] = sv14[135] * sv14[279];
        sv14[456] = sv14[135] * sv14[286];
        sv14[457] = sv14[135] * sv14[287];
        sv14[458] = sv14[135] * sv14[288];
        sv14[459] = sv14[441] + sv14[450];
        sv14[460] = sv14[442] + sv14[451];
        sv14[461] = sv14[452] + sv14[443];
        sv14[462] = sv14[444] + sv14[453];
        sv14[463] = sv14[445] + sv14[454];
        sv14[464] = sv14[455] + sv14[446];
        sv14[465] = sv14[447] + sv14[456];
        sv14[466] = sv14[448] + sv14[457];
        sv14[467] = sv14[458] + sv14[449];
        sv14[468] = sv14[432] + -1 * sv14[459];
        sv14[469] = sv14[433] + -1 * sv14[460];
        sv14[470] = sv14[434] + -1 * sv14[461];
        sv14[471] = sv14[435] + -1 * sv14[462];
        sv14[472] = sv14[436] + -1 * sv14[463];
        sv14[473] = sv14[437] + -1 * sv14[464];
        sv14[474] = sv14[438] + -1 * sv14[465];
        sv14[475] = sv14[439] + -1 * sv14[466];
        sv14[476] = sv14[440] + -1 * sv14[467];
        sv14[477] = sv14[468] * sv14[252];
        sv14[478] = sv14[469] * sv14[252];
        sv14[479] = sv14[470] * sv14[252];
        sv14[480] = sv14[471] * sv14[252];
        sv14[481] = sv14[472] * sv14[252];
        sv14[482] = sv14[473] * sv14[252];
        sv14[483] = sv14[474] * sv14[252];
        sv14[484] = sv14[475] * sv14[252];
        sv14[485] = sv14[476] * sv14[252];
        sv14[486] = sv14[185] * sv14[347];
        sv14[487] = sv14[252] * sv14[135];
        sv14[488] = sv14[486] + -1 * sv14[487];
        sv14[489] = sv14[488] * sv14[268];
        sv14[490] = sv14[488] * sv14[269];
        sv14[491] = sv14[488] * sv14[270];
        sv14[492] = sv14[488] * sv14[277];
        sv14[493] = sv14[488] * sv14[278];
        sv14[494] = sv14[488] * sv14[279];
        sv14[495] = sv14[488] * sv14[286];
        sv14[496] = sv14[488] * sv14[287];
        sv14[497] = sv14[488] * sv14[288];
        sv14[498] = sv14[477] + sv14[489];
        sv14[499] = sv14[478] + sv14[490];
        sv14[500] = sv14[479] + sv14[491];
        sv14[501] = sv14[480] + sv14[492];
        sv14[502] = sv14[481] + sv14[493];
        sv14[503] = sv14[482] + sv14[494];
        sv14[504] = sv14[483] + sv14[495];
        sv14[505] = sv14[484] + sv14[496];
        sv14[506] = sv14[485] + sv14[497];
        sv14[507] = sv14[405] + sv14[498];
        sv14[508] = sv14[406] + sv14[499];
        sv14[509] = sv14[407] + sv14[500];
        sv14[510] = sv14[408] + sv14[501];
        sv14[511] = sv14[409] + sv14[502];
        sv14[512] = sv14[410] + sv14[503];
        sv14[513] = sv14[411] + sv14[504];
        sv14[514] = sv14[412] + sv14[505];
        sv14[515] = sv14[413] + sv14[506];
        sv14[516] = sv14[217] * sv14[229];
        sv14[517] = sv14[347] * sv14[386];
        sv14[518] = sv14[516] + sv14[517];
        sv14[519] = sv14[252] * sv14[488];
        sv14[520] = sv14[518] + sv14[519];
        sv14[521] = 0.3333333333333333 * sv14[507] * std::pow(sv14[520], -0.6666666666666667);
        sv14[522] = 0.3333333333333333 * sv14[508] * std::pow(sv14[520], -0.6666666666666667);
        sv14[523] = 0.3333333333333333 * sv14[509] * std::pow(sv14[520], -0.6666666666666667);
        sv14[524] = 0.3333333333333333 * sv14[510] * std::pow(sv14[520], -0.6666666666666667);
        sv14[525] = 0.3333333333333333 * sv14[511] * std::pow(sv14[520], -0.6666666666666667);
        sv14[526] = 0.3333333333333333 * sv14[512] * std::pow(sv14[520], -0.6666666666666667);
        sv14[527] = 0.3333333333333333 * sv14[513] * std::pow(sv14[520], -0.6666666666666667);
        sv14[528] = 0.3333333333333333 * sv14[514] * std::pow(sv14[520], -0.6666666666666667);
        sv14[529] = 0.3333333333333333 * sv14[515] * std::pow(sv14[520], -0.6666666666666667);
        sv14[530] = sv14[217] + sv14[135];
        sv14[531] = sv14[530] + sv14[121];
        sv14[532] = sv14[531] / std::pow(sv14[520], 0.3333333333333333);
        sv14[533] = sv14[521] * sv14[532];
        sv14[534] = sv14[522] * sv14[532];
        sv14[535] = sv14[523] * sv14[532];
        sv14[536] = sv14[524] * sv14[532];
        sv14[537] = sv14[525] * sv14[532];
        sv14[538] = sv14[526] * sv14[532];
        sv14[539] = sv14[527] * sv14[532];
        sv14[540] = sv14[528] * sv14[532];
        sv14[541] = sv14[529] * sv14[532];
        sv14[542] = sv14[108] + -1 * sv14[533];
        sv14[543] = sv14[109] + -1 * sv14[534];
        sv14[544] = sv14[110] + -1 * sv14[535];
        sv14[545] = sv14[111] + -1 * sv14[536];
        sv14[546] = sv14[112] + -1 * sv14[537];
        sv14[547] = sv14[113] + -1 * sv14[538];
        sv14[548] = sv14[114] + -1 * sv14[539];
        sv14[549] = sv14[115] + -1 * sv14[540];
        sv14[550] = sv14[116] + -1 * sv14[541];
        sv14[551] = sv14[542] / std::pow(sv14[520], 0.3333333333333333);
        sv14[552] = sv14[543] / std::pow(sv14[520], 0.3333333333333333);
        sv14[553] = sv14[544] / std::pow(sv14[520], 0.3333333333333333);
        sv14[554] = sv14[545] / std::pow(sv14[520], 0.3333333333333333);
        sv14[555] = sv14[546] / std::pow(sv14[520], 0.3333333333333333);
        sv14[556] = sv14[547] / std::pow(sv14[520], 0.3333333333333333);
        sv14[557] = sv14[548] / std::pow(sv14[520], 0.3333333333333333);
        sv14[558] = sv14[549] / std::pow(sv14[520], 0.3333333333333333);
        sv14[559] = sv14[550] / std::pow(sv14[520], 0.3333333333333333);
        sv14[560] = sv14[551] * w[4][0];
        sv14[561] = sv14[552] * w[4][0];
        sv14[562] = sv14[553] * w[4][0];
        sv14[563] = sv14[554] * w[4][0];
        sv14[564] = sv14[555] * w[4][0];
        sv14[565] = sv14[556] * w[4][0];
        sv14[566] = sv14[557] * w[4][0];
        sv14[567] = sv14[558] * w[4][0];
        sv14[568] = sv14[559] * w[4][0];
        sv14[569] = sv14[507] * w[6][0];
        sv14[570] = sv14[508] * w[6][0];
        sv14[571] = sv14[509] * w[6][0];
        sv14[572] = sv14[510] * w[6][0];
        sv14[573] = sv14[511] * w[6][0];
        sv14[574] = sv14[512] * w[6][0];
        sv14[575] = sv14[513] * w[6][0];
        sv14[576] = sv14[514] * w[6][0];
        sv14[577] = sv14[515] * w[6][0];
        sv14[578] = std::pow(sv14[520], -1 + w[6][0]);
        sv14[579] = sv14[569] * sv14[578];
        sv14[580] = sv14[570] * sv14[578];
        sv14[581] = sv14[571] * sv14[578];
        sv14[582] = sv14[572] * sv14[578];
        sv14[583] = sv14[573] * sv14[578];
        sv14[584] = sv14[574] * sv14[578];
        sv14[585] = sv14[575] * sv14[578];
        sv14[586] = sv14[576] * sv14[578];
        sv14[587] = sv14[577] * sv14[578];
        sv14[588] = std::pow(sv14[520], w[6][0]);
        sv14[589] = sv14[579] * (1.0 / sv14[588]);
        sv14[590] = sv14[580] * (1.0 / sv14[588]);
        sv14[591] = sv14[581] * (1.0 / sv14[588]);
        sv14[592] = sv14[582] * (1.0 / sv14[588]);
        sv14[593] = sv14[583] * (1.0 / sv14[588]);
        sv14[594] = sv14[584] * (1.0 / sv14[588]);
        sv14[595] = sv14[585] * (1.0 / sv14[588]);
        sv14[596] = sv14[586] * (1.0 / sv14[588]);
        sv14[597] = sv14[587] * (1.0 / sv14[588]);
        sv14[598] = -1 * sv14[589] / sv14[588];
        sv14[599] = -1 * sv14[590] / sv14[588];
        sv14[600] = -1 * sv14[591] / sv14[588];
        sv14[601] = -1 * sv14[592] / sv14[588];
        sv14[602] = -1 * sv14[593] / sv14[588];
        sv14[603] = -1 * sv14[594] / sv14[588];
        sv14[604] = -1 * sv14[595] / sv14[588];
        sv14[605] = -1 * sv14[596] / sv14[588];
        sv14[606] = -1 * sv14[597] / sv14[588];
        sv14[607] = sv14[579] + sv14[598];
        sv14[608] = sv14[580] + sv14[599];
        sv14[609] = sv14[581] + sv14[600];
        sv14[610] = sv14[582] + sv14[601];
        sv14[611] = sv14[583] + sv14[602];
        sv14[612] = sv14[584] + sv14[603];
        sv14[613] = sv14[585] + sv14[604];
        sv14[614] = sv14[586] + sv14[605];
        sv14[615] = sv14[587] + sv14[606];
        sv14[616] = sv14[607] * w[7][0];
        sv14[617] = sv14[608] * w[7][0];
        sv14[618] = sv14[609] * w[7][0];
        sv14[619] = sv14[610] * w[7][0];
        sv14[620] = sv14[611] * w[7][0];
        sv14[621] = sv14[612] * w[7][0];
        sv14[622] = sv14[613] * w[7][0];
        sv14[623] = sv14[614] * w[7][0];
        sv14[624] = sv14[615] * w[7][0];
        sv14[625] = 1.0 / sv14[588] + sv14[588];
        sv14[626] = std::pow(-2.0 + sv14[625], -1 + w[7][0]);
        sv14[627] = sv14[616] * sv14[626];
        sv14[628] = sv14[617] * sv14[626];
        sv14[629] = sv14[618] * sv14[626];
        sv14[630] = sv14[619] * sv14[626];
        sv14[631] = sv14[620] * sv14[626];
        sv14[632] = sv14[621] * sv14[626];
        sv14[633] = sv14[622] * sv14[626];
        sv14[634] = sv14[623] * sv14[626];
        sv14[635] = sv14[624] * sv14[626];
        sv14[636] = sv14[627] * w[5][0];
        sv14[637] = sv14[628] * w[5][0];
        sv14[638] = sv14[629] * w[5][0];
        sv14[639] = sv14[630] * w[5][0];
        sv14[640] = sv14[631] * w[5][0];
        sv14[641] = sv14[632] * w[5][0];
        sv14[642] = sv14[633] * w[5][0];
        sv14[643] = sv14[634] * w[5][0];
        sv14[644] = sv14[635] * w[5][0];
        sv14[645] = sv14[560] + sv14[636];
        sv14[646] = sv14[561] + sv14[637];
        sv14[647] = sv14[562] + sv14[638];
        sv14[648] = sv14[563] + sv14[639];
        sv14[649] = sv14[564] + sv14[640];
        sv14[650] = sv14[565] + sv14[641];
        sv14[651] = sv14[566] + sv14[642];
        sv14[652] = sv14[567] + sv14[643];
        sv14[653] = sv14[568] + sv14[644];
        sv14[654] = w[2][0] * sv14[217];
        sv14[655] = w[2][1] * sv14[347];
        sv14[656] = sv14[654] + sv14[655];
        sv14[657] = w[2][2] * sv14[252];
        sv14[658] = sv14[656] + sv14[657];
        sv14[659] = w[2][0] * sv14[658];
        sv14[660] = w[2][0] * sv14[347];
        sv14[661] = w[2][1] * sv14[135];
        sv14[662] = sv14[660] + sv14[661];
        sv14[663] = w[2][2] * sv14[185];
        sv14[664] = sv14[662] + sv14[663];
        sv14[665] = w[2][1] * sv14[664];
        sv14[666] = sv14[659] + sv14[665];
        sv14[667] = w[2][0] * sv14[252];
        sv14[668] = w[2][1] * sv14[185];
        sv14[669] = sv14[667] + sv14[668];
        sv14[670] = w[2][2] * sv14[121];
        sv14[671] = sv14[669] + sv14[670];
        sv14[672] = w[2][2] * sv14[671];
        sv14[673] = sv14[666] + sv14[672];
        sv14[674] = sv14[673] / std::pow(sv14[520], 0.3333333333333333);
        sv14[675] = w[2][0] * sv14[8];
        sv14[676] = w[2][0] * sv14[9];
        sv14[677] = w[2][0] * sv14[10];
        sv14[678] = w[2][0] * sv14[19];
        sv14[679] = w[2][0] * sv14[20];
        sv14[680] = w[2][0] * sv14[21];
        sv14[681] = w[2][0] * sv14[30];
        sv14[682] = w[2][0] * sv14[31];
        sv14[683] = w[2][0] * sv14[32];
        sv14[684] = w[2][1] * sv14[313];
        sv14[685] = w[2][1] * sv14[314];
        sv14[686] = w[2][1] * sv14[315];
        sv14[687] = w[2][1] * sv14[322];
        sv14[688] = w[2][1] * sv14[323];
        sv14[689] = w[2][1] * sv14[324];
        sv14[690] = w[2][1] * sv14[331];
        sv14[691] = w[2][1] * sv14[332];
        sv14[692] = w[2][1] * sv14[333];
        sv14[693] = sv14[675] + sv14[684];
        sv14[694] = sv14[676] + sv14[685];
        sv14[695] = sv14[677] + sv14[686];
        sv14[696] = sv14[687] + sv14[678];
        sv14[697] = sv14[688] + sv14[679];
        sv14[698] = sv14[680] + sv14[689];
        sv14[699] = sv14[681] + sv14[690];
        sv14[700] = sv14[682] + sv14[691];
        sv14[701] = sv14[683] + sv14[692];
        sv14[702] = w[2][2] * sv14[268];
        sv14[703] = w[2][2] * sv14[269];
        sv14[704] = w[2][2] * sv14[270];
        sv14[705] = w[2][2] * sv14[277];
        sv14[706] = w[2][2] * sv14[278];
        sv14[707] = w[2][2] * sv14[279];
        sv14[708] = w[2][2] * sv14[286];
        sv14[709] = w[2][2] * sv14[287];
        sv14[710] = w[2][2] * sv14[288];
        sv14[711] = sv14[693] + sv14[702];
        sv14[712] = sv14[694] + sv14[703];
        sv14[713] = sv14[695] + sv14[704];
        sv14[714] = sv14[696] + sv14[705];
        sv14[715] = sv14[697] + sv14[706];
        sv14[716] = sv14[698] + sv14[707];
        sv14[717] = sv14[699] + sv14[708];
        sv14[718] = sv14[700] + sv14[709];
        sv14[719] = sv14[701] + sv14[710];
        sv14[720] = w[2][0] * sv14[711];
        sv14[721] = w[2][0] * sv14[712];
        sv14[722] = w[2][0] * sv14[713];
        sv14[723] = w[2][0] * sv14[714];
        sv14[724] = w[2][0] * sv14[715];
        sv14[725] = w[2][0] * sv14[716];
        sv14[726] = w[2][0] * sv14[717];
        sv14[727] = w[2][0] * sv14[718];
        sv14[728] = w[2][0] * sv14[719];
        sv14[729] = w[2][0] * sv14[313];
        sv14[730] = w[2][0] * sv14[314];
        sv14[731] = w[2][0] * sv14[315];
        sv14[732] = w[2][0] * sv14[322];
        sv14[733] = w[2][0] * sv14[323];
        sv14[734] = w[2][0] * sv14[324];
        sv14[735] = w[2][0] * sv14[331];
        sv14[736] = w[2][0] * sv14[332];
        sv14[737] = w[2][0] * sv14[333];
        sv14[738] = w[2][1] * sv14[41];
        sv14[739] = w[2][1] * sv14[42];
        sv14[740] = w[2][1] * sv14[43];
        sv14[741] = w[2][1] * sv14[52];
        sv14[742] = w[2][1] * sv14[53];
        sv14[743] = w[2][1] * sv14[54];
        sv14[744] = w[2][1] * sv14[63];
        sv14[745] = w[2][1] * sv14[64];
        sv14[746] = w[2][1] * sv14[65];
        sv14[747] = sv14[738] + sv14[729];
        sv14[748] = sv14[739] + sv14[730];
        sv14[749] = sv14[731] + sv14[740];
        sv14[750] = sv14[741] + sv14[732];
        sv14[751] = sv14[742] + sv14[733];
        sv14[752] = sv14[743] + sv14[734];
        sv14[753] = sv14[744] + sv14[735];
        sv14[754] = sv14[745] + sv14[736];
        sv14[755] = sv14[737] + sv14[746];
        sv14[756] = w[2][2] * sv14[160];
        sv14[757] = w[2][2] * sv14[161];
        sv14[758] = w[2][2] * sv14[162];
        sv14[759] = w[2][2] * sv14[169];
        sv14[760] = w[2][2] * sv14[170];
        sv14[761] = w[2][2] * sv14[171];
        sv14[762] = w[2][2] * sv14[178];
        sv14[763] = w[2][2] * sv14[179];
        sv14[764] = w[2][2] * sv14[180];
        sv14[765] = sv14[747] + sv14[756];
        sv14[766] = sv14[748] + sv14[757];
        sv14[767] = sv14[749] + sv14[758];
        sv14[768] = sv14[750] + sv14[759];
        sv14[769] = sv14[751] + sv14[760];
        sv14[770] = sv14[752] + sv14[761];
        sv14[771] = sv14[753] + sv14[762];
        sv14[772] = sv14[754] + sv14[763];
        sv14[773] = sv14[755] + sv14[764];
        sv14[774] = w[2][1] * sv14[765];
        sv14[775] = w[2][1] * sv14[766];
        sv14[776] = w[2][1] * sv14[767];
        sv14[777] = w[2][1] * sv14[768];
        sv14[778] = w[2][1] * sv14[769];
        sv14[779] = w[2][1] * sv14[770];
        sv14[780] = w[2][1] * sv14[771];
        sv14[781] = w[2][1] * sv14[772];
        sv14[782] = w[2][1] * sv14[773];
        sv14[783] = sv14[774] + sv14[720];
        sv14[784] = sv14[775] + sv14[721];
        sv14[785] = sv14[722] + sv14[776];
        sv14[786] = sv14[777] + sv14[723];
        sv14[787] = sv14[778] + sv14[724];
        sv14[788] = sv14[725] + sv14[779];
        sv14[789] = sv14[780] + sv14[726];
        sv14[790] = sv14[781] + sv14[727];
        sv14[791] = sv14[728] + sv14[782];
        sv14[792] = w[2][0] * sv14[268];
        sv14[793] = w[2][0] * sv14[269];
        sv14[794] = w[2][0] * sv14[270];
        sv14[795] = w[2][0] * sv14[277];
        sv14[796] = w[2][0] * sv14[278];
        sv14[797] = w[2][0] * sv14[279];
        sv14[798] = w[2][0] * sv14[286];
        sv14[799] = w[2][0] * sv14[287];
        sv14[800] = w[2][0] * sv14[288];
        sv14[801] = w[2][1] * sv14[160];
        sv14[802] = w[2][1] * sv14[161];
        sv14[803] = w[2][1] * sv14[162];
        sv14[804] = w[2][1] * sv14[169];
        sv14[805] = w[2][1] * sv14[170];
        sv14[806] = w[2][1] * sv14[171];
        sv14[807] = w[2][1] * sv14[178];
        sv14[808] = w[2][1] * sv14[179];
        sv14[809] = w[2][1] * sv14[180];
        sv14[810] = sv14[801] + sv14[792];
        sv14[811] = sv14[802] + sv14[793];
        sv14[812] = sv14[794] + sv14[803];
        sv14[813] = sv14[804] + sv14[795];
        sv14[814] = sv14[805] + sv14[796];
        sv14[815] = sv14[797] + sv14[806];
        sv14[816] = sv14[807] + sv14[798];
        sv14[817] = sv14[808] + sv14[799];
        sv14[818] = sv14[800] + sv14[809];
        sv14[819] = w[2][2] * sv14[83];
        sv14[820] = w[2][2] * sv14[84];
        sv14[821] = w[2][2] * sv14[85];
        sv14[822] = w[2][2] * sv14[94];
        sv14[823] = w[2][2] * sv14[95];
        sv14[824] = w[2][2] * sv14[96];
        sv14[825] = w[2][2] * sv14[105];
        sv14[826] = w[2][2] * sv14[106];
        sv14[827] = w[2][2] * sv14[107];
        sv14[828] = sv14[810] + sv14[819];
        sv14[829] = sv14[811] + sv14[820];
        sv14[830] = sv14[812] + sv14[821];
        sv14[831] = sv14[813] + sv14[822];
        sv14[832] = sv14[814] + sv14[823];
        sv14[833] = sv14[815] + sv14[824];
        sv14[834] = sv14[816] + sv14[825];
        sv14[835] = sv14[817] + sv14[826];
        sv14[836] = sv14[818] + sv14[827];
        sv14[837] = w[2][2] * sv14[828];
        sv14[838] = w[2][2] * sv14[829];
        sv14[839] = w[2][2] * sv14[830];
        sv14[840] = w[2][2] * sv14[831];
        sv14[841] = w[2][2] * sv14[832];
        sv14[842] = w[2][2] * sv14[833];
        sv14[843] = w[2][2] * sv14[834];
        sv14[844] = w[2][2] * sv14[835];
        sv14[845] = w[2][2] * sv14[836];
        sv14[846] = sv14[783] + sv14[837];
        sv14[847] = sv14[784] + sv14[838];
        sv14[848] = sv14[785] + sv14[839];
        sv14[849] = sv14[786] + sv14[840];
        sv14[850] = sv14[787] + sv14[841];
        sv14[851] = sv14[788] + sv14[842];
        sv14[852] = sv14[789] + sv14[843];
        sv14[853] = sv14[790] + sv14[844];
        sv14[854] = sv14[791] + sv14[845];
        sv14[855] = sv14[521] * sv14[674];
        sv14[856] = sv14[522] * sv14[674];
        sv14[857] = sv14[523] * sv14[674];
        sv14[858] = sv14[524] * sv14[674];
        sv14[859] = sv14[525] * sv14[674];
        sv14[860] = sv14[526] * sv14[674];
        sv14[861] = sv14[527] * sv14[674];
        sv14[862] = sv14[528] * sv14[674];
        sv14[863] = sv14[529] * sv14[674];
        sv14[864] = sv14[846] + -1 * sv14[855];
        sv14[865] = sv14[847] + -1 * sv14[856];
        sv14[866] = sv14[848] + -1 * sv14[857];
        sv14[867] = sv14[849] + -1 * sv14[858];
        sv14[868] = sv14[850] + -1 * sv14[859];
        sv14[869] = sv14[851] + -1 * sv14[860];
        sv14[870] = sv14[852] + -1 * sv14[861];
        sv14[871] = sv14[853] + -1 * sv14[862];
        sv14[872] = sv14[854] + -1 * sv14[863];
        sv14[873] = sv14[864] / std::pow(sv14[520], 0.3333333333333333);
        sv14[874] = sv14[865] / std::pow(sv14[520], 0.3333333333333333);
        sv14[875] = sv14[866] / std::pow(sv14[520], 0.3333333333333333);
        sv14[876] = sv14[867] / std::pow(sv14[520], 0.3333333333333333);
        sv14[877] = sv14[868] / std::pow(sv14[520], 0.3333333333333333);
        sv14[878] = sv14[869] / std::pow(sv14[520], 0.3333333333333333);
        sv14[879] = sv14[870] / std::pow(sv14[520], 0.3333333333333333);
        sv14[880] = sv14[871] / std::pow(sv14[520], 0.3333333333333333);
        sv14[881] = sv14[872] / std::pow(sv14[520], 0.3333333333333333);
        sv14[882] = (-1 + sv14[674]) * (2 * sv14[873]);
        sv14[883] = (-1 + sv14[674]) * (2 * sv14[874]);
        sv14[884] = (-1 + sv14[674]) * (2 * sv14[875]);
        sv14[885] = (-1 + sv14[674]) * (2 * sv14[876]);
        sv14[886] = (-1 + sv14[674]) * (2 * sv14[877]);
        sv14[887] = (-1 + sv14[674]) * (2 * sv14[878]);
        sv14[888] = (-1 + sv14[674]) * (2 * sv14[879]);
        sv14[889] = (-1 + sv14[674]) * (2 * sv14[880]);
        sv14[890] = (-1 + sv14[674]) * (2 * sv14[881]);
        sv14[891] = sv14[882] * w[9][0];
        sv14[892] = sv14[883] * w[9][0];
        sv14[893] = sv14[884] * w[9][0];
        sv14[894] = sv14[885] * w[9][0];
        sv14[895] = sv14[886] * w[9][0];
        sv14[896] = sv14[887] * w[9][0];
        sv14[897] = sv14[888] * w[9][0];
        sv14[898] = sv14[889] * w[9][0];
        sv14[899] = sv14[890] * w[9][0];
        sv14[900] = std::pow(-1 + sv14[674], 2) * w[9][0];
        sv14[901] = std::exp(sv14[900]);
        sv14[902] = sv14[891] * sv14[901];
        sv14[903] = sv14[892] * sv14[901];
        sv14[904] = sv14[893] * sv14[901];
        sv14[905] = sv14[894] * sv14[901];
        sv14[906] = sv14[895] * sv14[901];
        sv14[907] = sv14[896] * sv14[901];
        sv14[908] = sv14[897] * sv14[901];
        sv14[909] = sv14[898] * sv14[901];
        sv14[910] = sv14[899] * sv14[901];
        sv14[911] = sv14[902] * (sp[43] / 2.0);
        sv14[912] = sv14[903] * (sp[43] / 2.0);
        sv14[913] = sv14[904] * (sp[43] / 2.0);
        sv14[914] = sv14[905] * (sp[43] / 2.0);
        sv14[915] = sv14[906] * (sp[43] / 2.0);
        sv14[916] = sv14[907] * (sp[43] / 2.0);
        sv14[917] = sv14[908] * (sp[43] / 2.0);
        sv14[918] = sv14[909] * (sp[43] / 2.0);
        sv14[919] = sv14[910] * (sp[43] / 2.0);
        sv14[920] = sv14[911] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[921] = sv14[912] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[922] = sv14[913] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[923] = sv14[914] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[924] = sv14[915] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[925] = sv14[916] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[926] = sv14[917] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[927] = sv14[918] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[928] = sv14[919] * (-1 + sv14[674] <= 1e-10 ? 0.0 : 1);
        sv14[929] = sv14[645] + sv14[920];
        sv14[930] = sv14[646] + sv14[921];
        sv14[931] = sv14[647] + sv14[922];
        sv14[932] = sv14[648] + sv14[923];
        sv14[933] = sv14[649] + sv14[924];
        sv14[934] = sv14[650] + sv14[925];
        sv14[935] = sv14[651] + sv14[926];
        sv14[936] = sv14[652] + sv14[927];
        sv14[937] = sv14[653] + sv14[928];
        sv14[938] = w[3][0] * sv14[217];
        sv14[939] = w[3][1] * sv14[347];
        sv14[940] = sv14[938] + sv14[939];
        sv14[941] = w[3][2] * sv14[252];
        sv14[942] = sv14[940] + sv14[941];
        sv14[943] = w[3][0] * sv14[942];
        sv14[944] = w[3][0] * sv14[347];
        sv14[945] = w[3][1] * sv14[135];
        sv14[946] = sv14[944] + sv14[945];
        sv14[947] = w[3][2] * sv14[185];
        sv14[948] = sv14[946] + sv14[947];
        sv14[949] = w[3][1] * sv14[948];
        sv14[950] = sv14[943] + sv14[949];
        sv14[951] = w[3][0] * sv14[252];
        sv14[952] = w[3][1] * sv14[185];
        sv14[953] = sv14[951] + sv14[952];
        sv14[954] = w[3][2] * sv14[121];
        sv14[955] = sv14[953] + sv14[954];
        sv14[956] = w[3][2] * sv14[955];
        sv14[957] = sv14[950] + sv14[956];
        sv14[958] = sv14[957] / std::pow(sv14[520], 0.3333333333333333);
        sv14[959] = w[3][0] * sv14[8];
        sv14[960] = w[3][0] * sv14[9];
        sv14[961] = w[3][0] * sv14[10];
        sv14[962] = w[3][0] * sv14[19];
        sv14[963] = w[3][0] * sv14[20];
        sv14[964] = w[3][0] * sv14[21];
        sv14[965] = w[3][0] * sv14[30];
        sv14[966] = w[3][0] * sv14[31];
        sv14[967] = w[3][0] * sv14[32];
        sv14[968] = w[3][1] * sv14[313];
        sv14[969] = w[3][1] * sv14[314];
        sv14[970] = w[3][1] * sv14[315];
        sv14[971] = w[3][1] * sv14[322];
        sv14[972] = w[3][1] * sv14[323];
        sv14[973] = w[3][1] * sv14[324];
        sv14[974] = w[3][1] * sv14[331];
        sv14[975] = w[3][1] * sv14[332];
        sv14[976] = w[3][1] * sv14[333];
        sv14[977] = sv14[959] + sv14[968];
        sv14[978] = sv14[960] + sv14[969];
        sv14[979] = sv14[961] + sv14[970];
        sv14[980] = sv14[971] + sv14[962];
        sv14[981] = sv14[972] + sv14[963];
        sv14[982] = sv14[964] + sv14[973];
        sv14[983] = sv14[965] + sv14[974];
        sv14[984] = sv14[966] + sv14[975];
        sv14[985] = sv14[967] + sv14[976];
        sv14[986] = w[3][2] * sv14[268];
        sv14[987] = w[3][2] * sv14[269];
        sv14[988] = w[3][2] * sv14[270];
        sv14[989] = w[3][2] * sv14[277];
        sv14[990] = w[3][2] * sv14[278];
        sv14[991] = w[3][2] * sv14[279];
        sv14[992] = w[3][2] * sv14[286];
        sv14[993] = w[3][2] * sv14[287];
        sv14[994] = w[3][2] * sv14[288];
        sv14[995] = sv14[977] + sv14[986];
        sv14[996] = sv14[978] + sv14[987];
        sv14[997] = sv14[979] + sv14[988];
        sv14[998] = sv14[980] + sv14[989];
        sv14[999] = sv14[981] + sv14[990];
        sv14[1000] = sv14[982] + sv14[991];
        sv14[1001] = sv14[983] + sv14[992];
        sv14[1002] = sv14[984] + sv14[993];
        sv14[1003] = sv14[985] + sv14[994];
        sv14[1004] = w[3][0] * sv14[995];
        sv14[1005] = w[3][0] * sv14[996];
        sv14[1006] = w[3][0] * sv14[997];
        sv14[1007] = w[3][0] * sv14[998];
        sv14[1008] = w[3][0] * sv14[999];
        sv14[1009] = w[3][0] * sv14[1000];
        sv14[1010] = w[3][0] * sv14[1001];
        sv14[1011] = w[3][0] * sv14[1002];
        sv14[1012] = w[3][0] * sv14[1003];
        sv14[1013] = w[3][0] * sv14[313];
        sv14[1014] = w[3][0] * sv14[314];
        sv14[1015] = w[3][0] * sv14[315];
        sv14[1016] = w[3][0] * sv14[322];
        sv14[1017] = w[3][0] * sv14[323];
        sv14[1018] = w[3][0] * sv14[324];
        sv14[1019] = w[3][0] * sv14[331];
        sv14[1020] = w[3][0] * sv14[332];
        sv14[1021] = w[3][0] * sv14[333];
        sv14[1022] = w[3][1] * sv14[41];
        sv14[1023] = w[3][1] * sv14[42];
        sv14[1024] = w[3][1] * sv14[43];
        sv14[1025] = w[3][1] * sv14[52];
        sv14[1026] = w[3][1] * sv14[53];
        sv14[1027] = w[3][1] * sv14[54];
        sv14[1028] = w[3][1] * sv14[63];
        sv14[1029] = w[3][1] * sv14[64];
        sv14[1030] = w[3][1] * sv14[65];
        sv14[1031] = sv14[1022] + sv14[1013];
        sv14[1032] = sv14[1023] + sv14[1014];
        sv14[1033] = sv14[1015] + sv14[1024];
        sv14[1034] = sv14[1025] + sv14[1016];
        sv14[1035] = sv14[1026] + sv14[1017];
        sv14[1036] = sv14[1027] + sv14[1018];
        sv14[1037] = sv14[1028] + sv14[1019];
        sv14[1038] = sv14[1029] + sv14[1020];
        sv14[1039] = sv14[1021] + sv14[1030];
        sv14[1040] = w[3][2] * sv14[160];
        sv14[1041] = w[3][2] * sv14[161];
        sv14[1042] = w[3][2] * sv14[162];
        sv14[1043] = w[3][2] * sv14[169];
        sv14[1044] = w[3][2] * sv14[170];
        sv14[1045] = w[3][2] * sv14[171];
        sv14[1046] = w[3][2] * sv14[178];
        sv14[1047] = w[3][2] * sv14[179];
        sv14[1048] = w[3][2] * sv14[180];
        sv14[1049] = sv14[1031] + sv14[1040];
        sv14[1050] = sv14[1032] + sv14[1041];
        sv14[1051] = sv14[1033] + sv14[1042];
        sv14[1052] = sv14[1034] + sv14[1043];
        sv14[1053] = sv14[1035] + sv14[1044];
        sv14[1054] = sv14[1036] + sv14[1045];
        sv14[1055] = sv14[1037] + sv14[1046];
        sv14[1056] = sv14[1038] + sv14[1047];
        sv14[1057] = sv14[1039] + sv14[1048];
        sv14[1058] = w[3][1] * sv14[1049];
        sv14[1059] = w[3][1] * sv14[1050];
        sv14[1060] = w[3][1] * sv14[1051];
        sv14[1061] = w[3][1] * sv14[1052];
        sv14[1062] = w[3][1] * sv14[1053];
        sv14[1063] = w[3][1] * sv14[1054];
        sv14[1064] = w[3][1] * sv14[1055];
        sv14[1065] = w[3][1] * sv14[1056];
        sv14[1066] = w[3][1] * sv14[1057];
        sv14[1067] = sv14[1058] + sv14[1004];
        sv14[1068] = sv14[1059] + sv14[1005];
        sv14[1069] = sv14[1006] + sv14[1060];
        sv14[1070] = sv14[1061] + sv14[1007];
        sv14[1071] = sv14[1062] + sv14[1008];
        sv14[1072] = sv14[1009] + sv14[1063];
        sv14[1073] = sv14[1064] + sv14[1010];
        sv14[1074] = sv14[1065] + sv14[1011];
        sv14[1075] = sv14[1012] + sv14[1066];
        sv14[1076] = w[3][0] * sv14[268];
        sv14[1077] = w[3][0] * sv14[269];
        sv14[1078] = w[3][0] * sv14[270];
        sv14[1079] = w[3][0] * sv14[277];
        sv14[1080] = w[3][0] * sv14[278];
        sv14[1081] = w[3][0] * sv14[279];
        sv14[1082] = w[3][0] * sv14[286];
        sv14[1083] = w[3][0] * sv14[287];
        sv14[1084] = w[3][0] * sv14[288];
        sv14[1085] = w[3][1] * sv14[160];
        sv14[1086] = w[3][1] * sv14[161];
        sv14[1087] = w[3][1] * sv14[162];
        sv14[1088] = w[3][1] * sv14[169];
        sv14[1089] = w[3][1] * sv14[170];
        sv14[1090] = w[3][1] * sv14[171];
        sv14[1091] = w[3][1] * sv14[178];
        sv14[1092] = w[3][1] * sv14[179];
        sv14[1093] = w[3][1] * sv14[180];
        sv14[1094] = sv14[1085] + sv14[1076];
        sv14[1095] = sv14[1086] + sv14[1077];
        sv14[1096] = sv14[1078] + sv14[1087];
        sv14[1097] = sv14[1088] + sv14[1079];
        sv14[1098] = sv14[1089] + sv14[1080];
        sv14[1099] = sv14[1081] + sv14[1090];
        sv14[1100] = sv14[1091] + sv14[1082];
        sv14[1101] = sv14[1092] + sv14[1083];
        sv14[1102] = sv14[1084] + sv14[1093];
        sv14[1103] = w[3][2] * sv14[83];
        sv14[1104] = w[3][2] * sv14[84];
        sv14[1105] = w[3][2] * sv14[85];
        sv14[1106] = w[3][2] * sv14[94];
        sv14[1107] = w[3][2] * sv14[95];
        sv14[1108] = w[3][2] * sv14[96];
        sv14[1109] = w[3][2] * sv14[105];
        sv14[1110] = w[3][2] * sv14[106];
        sv14[1111] = w[3][2] * sv14[107];
        sv14[1112] = sv14[1094] + sv14[1103];
        sv14[1113] = sv14[1095] + sv14[1104];
        sv14[1114] = sv14[1096] + sv14[1105];
        sv14[1115] = sv14[1097] + sv14[1106];
        sv14[1116] = sv14[1098] + sv14[1107];
        sv14[1117] = sv14[1099] + sv14[1108];
        sv14[1118] = sv14[1100] + sv14[1109];
        sv14[1119] = sv14[1101] + sv14[1110];
        sv14[1120] = sv14[1102] + sv14[1111];
        sv14[1121] = w[3][2] * sv14[1112];
        sv14[1122] = w[3][2] * sv14[1113];
        sv14[1123] = w[3][2] * sv14[1114];
        sv14[1124] = w[3][2] * sv14[1115];
        sv14[1125] = w[3][2] * sv14[1116];
        sv14[1126] = w[3][2] * sv14[1117];
        sv14[1127] = w[3][2] * sv14[1118];
        sv14[1128] = w[3][2] * sv14[1119];
        sv14[1129] = w[3][2] * sv14[1120];
        sv14[1130] = sv14[1067] + sv14[1121];
        sv14[1131] = sv14[1068] + sv14[1122];
        sv14[1132] = sv14[1069] + sv14[1123];
        sv14[1133] = sv14[1070] + sv14[1124];
        sv14[1134] = sv14[1071] + sv14[1125];
        sv14[1135] = sv14[1072] + sv14[1126];
        sv14[1136] = sv14[1073] + sv14[1127];
        sv14[1137] = sv14[1074] + sv14[1128];
        sv14[1138] = sv14[1075] + sv14[1129];
        sv14[1139] = sv14[521] * sv14[958];
        sv14[1140] = sv14[522] * sv14[958];
        sv14[1141] = sv14[523] * sv14[958];
        sv14[1142] = sv14[524] * sv14[958];
        sv14[1143] = sv14[525] * sv14[958];
        sv14[1144] = sv14[526] * sv14[958];
        sv14[1145] = sv14[527] * sv14[958];
        sv14[1146] = sv14[528] * sv14[958];
        sv14[1147] = sv14[529] * sv14[958];
        sv14[1148] = sv14[1130] + -1 * sv14[1139];
        sv14[1149] = sv14[1131] + -1 * sv14[1140];
        sv14[1150] = sv14[1132] + -1 * sv14[1141];
        sv14[1151] = sv14[1133] + -1 * sv14[1142];
        sv14[1152] = sv14[1134] + -1 * sv14[1143];
        sv14[1153] = sv14[1135] + -1 * sv14[1144];
        sv14[1154] = sv14[1136] + -1 * sv14[1145];
        sv14[1155] = sv14[1137] + -1 * sv14[1146];
        sv14[1156] = sv14[1138] + -1 * sv14[1147];
        sv14[1157] = sv14[1148] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1158] = sv14[1149] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1159] = sv14[1150] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1160] = sv14[1151] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1161] = sv14[1152] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1162] = sv14[1153] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1163] = sv14[1154] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1164] = sv14[1155] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1165] = sv14[1156] / std::pow(sv14[520], 0.3333333333333333);
        sv14[1166] = (-1 + sv14[958]) * (2 * sv14[1157]);
        sv14[1167] = (-1 + sv14[958]) * (2 * sv14[1158]);
        sv14[1168] = (-1 + sv14[958]) * (2 * sv14[1159]);
        sv14[1169] = (-1 + sv14[958]) * (2 * sv14[1160]);
        sv14[1170] = (-1 + sv14[958]) * (2 * sv14[1161]);
        sv14[1171] = (-1 + sv14[958]) * (2 * sv14[1162]);
        sv14[1172] = (-1 + sv14[958]) * (2 * sv14[1163]);
        sv14[1173] = (-1 + sv14[958]) * (2 * sv14[1164]);
        sv14[1174] = (-1 + sv14[958]) * (2 * sv14[1165]);
        sv14[1175] = sv14[1166] * w[9][0];
        sv14[1176] = sv14[1167] * w[9][0];
        sv14[1177] = sv14[1168] * w[9][0];
        sv14[1178] = sv14[1169] * w[9][0];
        sv14[1179] = sv14[1170] * w[9][0];
        sv14[1180] = sv14[1171] * w[9][0];
        sv14[1181] = sv14[1172] * w[9][0];
        sv14[1182] = sv14[1173] * w[9][0];
        sv14[1183] = sv14[1174] * w[9][0];
        sv14[1184] = std::pow(-1 + sv14[958], 2) * w[9][0];
        sv14[1185] = std::exp(sv14[1184]);
        sv14[1186] = sv14[1175] * sv14[1185];
        sv14[1187] = sv14[1176] * sv14[1185];
        sv14[1188] = sv14[1177] * sv14[1185];
        sv14[1189] = sv14[1178] * sv14[1185];
        sv14[1190] = sv14[1179] * sv14[1185];
        sv14[1191] = sv14[1180] * sv14[1185];
        sv14[1192] = sv14[1181] * sv14[1185];
        sv14[1193] = sv14[1182] * sv14[1185];
        sv14[1194] = sv14[1183] * sv14[1185];
        sv14[1195] = sv14[1186] * (sp[43] / 2.0);
        sv14[1196] = sv14[1187] * (sp[43] / 2.0);
        sv14[1197] = sv14[1188] * (sp[43] / 2.0);
        sv14[1198] = sv14[1189] * (sp[43] / 2.0);
        sv14[1199] = sv14[1190] * (sp[43] / 2.0);
        sv14[1200] = sv14[1191] * (sp[43] / 2.0);
        sv14[1201] = sv14[1192] * (sp[43] / 2.0);
        sv14[1202] = sv14[1193] * (sp[43] / 2.0);
        sv14[1203] = sv14[1194] * (sp[43] / 2.0);
        sv14[1204] = sv14[1195] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1205] = sv14[1196] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1206] = sv14[1197] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1207] = sv14[1198] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1208] = sv14[1199] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1209] = sv14[1200] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1210] = sv14[1201] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1211] = sv14[1202] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1212] = sv14[1203] * (-1 + sv14[958] <= 1e-10 ? 0.0 : 1);
        sv14[1213] = sv14[929] + sv14[1204];
        sv14[1214] = sv14[930] + sv14[1205];
        sv14[1215] = sv14[931] + sv14[1206];
        sv14[1216] = sv14[932] + sv14[1207];
        sv14[1217] = sv14[933] + sv14[1208];
        sv14[1218] = sv14[934] + sv14[1209];
        sv14[1219] = sv14[935] + sv14[1210];
        sv14[1220] = sv14[936] + sv14[1211];
        sv14[1221] = sv14[937] + sv14[1212];
        sv14[1222] = sv14[1213] * sp[44];
        sv14[1223] = sv14[1214] * sp[44];
        sv14[1224] = sv14[1215] * sp[44];
        sv14[1225] = sv14[1216] * sp[44];
        sv14[1226] = sv14[1217] * sp[44];
        sv14[1227] = sv14[1218] * sp[44];
        sv14[1228] = sv14[1219] * sp[44];
        sv14[1229] = sv14[1220] * sp[44];
        sv14[1230] = sv14[1221] * sp[44];
        const double fw0 = sv14[1222] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF0[i] += fw0 * FE30_C0_D100_Q14[0][iq][i];
        const double fw1 = sv14[1223] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF1[i] += fw1 * FE30_C0_D010_Q14[0][iq][i];
        const double fw2 = sv14[1224] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF2[i] += fw2 * FE30_C0_D001_Q14[0][iq][i];
        const double fw3 = sv14[1225] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF3[i] += fw3 * FE30_C0_D100_Q14[0][iq][i];
        const double fw4 = sv14[1226] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF4[i] += fw4 * FE30_C0_D010_Q14[0][iq][i];
        const double fw5 = sv14[1227] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF5[i] += fw5 * FE30_C0_D001_Q14[0][iq][i];
        const double fw6 = sv14[1228] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF6[i] += fw6 * FE30_C0_D100_Q14[0][iq][i];
        const double fw7 = sv14[1229] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF7[i] += fw7 * FE30_C0_D010_Q14[0][iq][i];
        const double fw8 = sv14[1230] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF8[i] += fw8 * FE30_C0_D001_Q14[0][iq][i];
    }
    A[0] = -0.008333333333333318 * sp[45];
    A[1] = -0.008333333333333325 * sp[45];
    A[2] = -0.008333333333333326 * sp[45];
    A[3] = -0.00833333333333333 * sp[45];
    A[4] = 0.03333333333333332 * sp[45];
    A[5] = 0.03333333333333333 * sp[45];
    A[6] = 0.03333333333333332 * sp[45];
    A[7] = 0.03333333333333333 * sp[45];
    A[8] = 0.03333333333333331 * sp[45];
    A[9] = 0.03333333333333333 * sp[45];
    A[10] = -0.008333333333333318 * sp[46];
    A[11] = -0.008333333333333325 * sp[46];
    A[12] = -0.008333333333333326 * sp[46];
    A[13] = -0.00833333333333333 * sp[46];
    A[14] = 0.03333333333333332 * sp[46];
    A[15] = 0.03333333333333333 * sp[46];
    A[16] = 0.03333333333333332 * sp[46];
    A[17] = 0.03333333333333333 * sp[46];
    A[18] = 0.03333333333333331 * sp[46];
    A[19] = 0.03333333333333333 * sp[46];
    A[20] = -0.008333333333333318 * sp[47];
    A[21] = -0.008333333333333325 * sp[47];
    A[22] = -0.008333333333333326 * sp[47];
    A[23] = -0.00833333333333333 * sp[47];
    A[24] = 0.03333333333333332 * sp[47];
    A[25] = 0.03333333333333333 * sp[47];
    A[26] = 0.03333333333333332 * sp[47];
    A[27] = 0.03333333333333333 * sp[47];
    A[28] = 0.03333333333333331 * sp[47];
    A[29] = 0.03333333333333333 * sp[47];
    static const int DM0[7] = { 0, 1, 5, 6, 7, 8, 9 };
    static const int DM1[7] = { 0, 2, 4, 6, 7, 8, 9 };
    static const int DM2[7] = { 0, 3, 4, 5, 7, 8, 9 };
    static const int DM3[7] = { 10, 11, 15, 16, 17, 18, 19 };
    static const int DM4[7] = { 10, 12, 14, 16, 17, 18, 19 };
    static const int DM5[7] = { 10, 13, 14, 15, 17, 18, 19 };
    static const int DM6[7] = { 20, 21, 25, 26, 27, 28, 29 };
    static const int DM7[7] = { 20, 22, 24, 26, 27, 28, 29 };
    static const int DM8[7] = { 20, 23, 24, 25, 27, 28, 29 };
    for (int i = 0; i < 7; ++i)
        A[DM0[i]] += BF0[i];
    for (int i = 0; i < 7; ++i)
        A[DM1[i]] += BF1[i];
    for (int i = 0; i < 7; ++i)
        A[DM2[i]] += BF2[i];
    for (int i = 0; i < 7; ++i)
        A[DM3[i]] += BF3[i];
    for (int i = 0; i < 7; ++i)
        A[DM4[i]] += BF4[i];
    for (int i = 0; i < 7; ++i)
        A[DM5[i]] += BF5[i];
    for (int i = 0; i < 7; ++i)
        A[DM6[i]] += BF6[i];
    for (int i = 0; i < 7; ++i)
        A[DM7[i]] += BF7[i];
    for (int i = 0; i < 7; ++i)
        A[DM8[i]] += BF8[i];
}


hyperelasticityb_exterior_facet_integral_2_1::hyperelasticityb_exterior_facet_integral_2_1() : ufc::exterior_facet_integral()
{

}

hyperelasticityb_exterior_facet_integral_2_1::~hyperelasticityb_exterior_facet_integral_2_1()
{

}

const std::vector<bool> & hyperelasticityb_exterior_facet_integral_2_1::enabled_coefficients() const
{
static const std::vector<bool> enabled({false, false, false, false, false, false, false, false, false, false, true});
return enabled;
}

void hyperelasticityb_exterior_facet_integral_2_1::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    std::size_t facet,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D001_F_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[4][10] =
        { { 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.1666666666666664, 0.1666666666666663, 0.0, 0.0, 0.0 },
          { 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.0, 0.0, 0.1666666666666664, 0.1666666666666663, 0.0 },
          { 0.0, 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.0, 0.1666666666666664, 0.0, 0.1666666666666663 },
          { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.0, 0.1666666666666662, 0.1666666666666663 } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[7] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[11] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[10] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[8] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[3] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[6] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[5] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[4] * FE12_C0_D001_F_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE12_C0_D001_F_Q6[0][0][0] + coordinate_dofs[9] * FE12_C0_D001_F_Q6[0][0][1];
    alignas(32) double sp[118];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = tetrahedron_reference_facet_normals[facet][0] * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = tetrahedron_reference_facet_normals[facet][1] * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = tetrahedron_reference_facet_normals[facet][2] * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = sp[23] * sp[23];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = tetrahedron_reference_facet_normals[facet][0] * sp[28];
    sp[30] = J_c0 * J_c8;
    sp[31] = J_c6 * (-1 * J_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = tetrahedron_reference_facet_normals[facet][1] * sp[33];
    sp[35] = sp[29] + sp[34];
    sp[36] = J_c1 * J_c6;
    sp[37] = J_c0 * J_c7;
    sp[38] = sp[36] + -1 * sp[37];
    sp[39] = sp[38] / sp[13];
    sp[40] = tetrahedron_reference_facet_normals[facet][2] * sp[39];
    sp[41] = sp[35] + sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = sp[24] + sp[42];
    sp[44] = J_c1 * J_c5;
    sp[45] = J_c2 * J_c4;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = tetrahedron_reference_facet_normals[facet][0] * sp[47];
    sp[49] = J_c2 * J_c3;
    sp[50] = J_c0 * J_c5;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = tetrahedron_reference_facet_normals[facet][1] * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = J_c0 * J_c4;
    sp[56] = J_c1 * J_c3;
    sp[57] = sp[55] + -1 * sp[56];
    sp[58] = sp[57] / sp[13];
    sp[59] = tetrahedron_reference_facet_normals[facet][2] * sp[58];
    sp[60] = sp[54] + sp[59];
    sp[61] = sp[60] * sp[60];
    sp[62] = sp[43] + sp[61];
    sp[63] = std::sqrt(sp[62]);
    sp[64] = sp[23] / sp[63];
    sp[65] = -1 * w[10][0] * sp[64];
    sp[66] = sp[41] / sp[63];
    sp[67] = -1 * w[10][0] * sp[66];
    sp[68] = sp[60] / sp[63];
    sp[69] = -1 * w[10][0] * sp[68];
    sp[70] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[71] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[72] = sp[70] + sp[71];
    sp[73] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[74] = sp[72] + sp[73];
    sp[75] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[76] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[77] = sp[75] + sp[76];
    sp[78] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[79] = sp[77] + sp[78];
    sp[80] = sp[74] * sp[79];
    sp[81] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[82] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[83] = sp[81] + sp[82];
    sp[84] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[85] = sp[83] + sp[84];
    sp[86] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[87] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[88] = sp[86] + sp[87];
    sp[89] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[90] = sp[88] + sp[89];
    sp[91] = sp[85] * sp[90];
    sp[92] = sp[80] + -1 * sp[91];
    sp[93] = sp[92] * sp[92];
    sp[94] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[95] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[96] = sp[94] + sp[95];
    sp[97] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * sp[90];
    sp[100] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[101] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[102] = sp[100] + sp[101];
    sp[103] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * sp[79];
    sp[106] = sp[99] + -1 * sp[105];
    sp[107] = sp[106] * sp[106];
    sp[108] = sp[93] + sp[107];
    sp[109] = sp[104] * sp[85];
    sp[110] = sp[74] * sp[98];
    sp[111] = sp[109] + -1 * sp[110];
    sp[112] = sp[111] * sp[111];
    sp[113] = sp[108] + sp[112];
    sp[114] = std::sqrt(sp[113]);
    sp[115] = -1 * sp[65] * sp[114];
    sp[116] = -1 * sp[67] * sp[114];
    sp[117] = -1 * sp[69] * sp[114];
    A[0] = sp[115] * PI0[facet][0];
    A[1] = sp[115] * PI0[facet][1];
    A[2] = sp[115] * PI0[facet][2];
    A[3] = sp[115] * PI0[facet][3];
    A[4] = sp[115] * PI0[facet][4];
    A[5] = sp[115] * PI0[facet][5];
    A[6] = sp[115] * PI0[facet][6];
    A[7] = sp[115] * PI0[facet][7];
    A[8] = sp[115] * PI0[facet][8];
    A[9] = sp[115] * PI0[facet][9];
    A[10] = sp[116] * PI0[facet][0];
    A[11] = sp[116] * PI0[facet][1];
    A[12] = sp[116] * PI0[facet][2];
    A[13] = sp[116] * PI0[facet][3];
    A[14] = sp[116] * PI0[facet][4];
    A[15] = sp[116] * PI0[facet][5];
    A[16] = sp[116] * PI0[facet][6];
    A[17] = sp[116] * PI0[facet][7];
    A[18] = sp[116] * PI0[facet][8];
    A[19] = sp[116] * PI0[facet][9];
    A[20] = sp[117] * PI0[facet][0];
    A[21] = sp[117] * PI0[facet][1];
    A[22] = sp[117] * PI0[facet][2];
    A[23] = sp[117] * PI0[facet][3];
    A[24] = sp[117] * PI0[facet][4];
    A[25] = sp[117] * PI0[facet][5];
    A[26] = sp[117] * PI0[facet][6];
    A[27] = sp[117] * PI0[facet][7];
    A[28] = sp[117] * PI0[facet][8];
    A[29] = sp[117] * PI0[facet][9];
}


hyperelasticityb_cell_integral_3_otherwise::hyperelasticityb_cell_integral_3_otherwise() : ufc::cell_integral()
{

}

hyperelasticityb_cell_integral_3_otherwise::~hyperelasticityb_cell_integral_3_otherwise()
{

}

const std::vector<bool> & hyperelasticityb_cell_integral_3_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void hyperelasticityb_cell_integral_3_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 0
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q14[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q14[0][0][1];
    alignas(32) double sp[15];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = std::abs(sp[13]);
    A[0] = 0.1666666666666666 * sp[14];
}


hyperelasticityb_cell_integral_4_otherwise::hyperelasticityb_cell_integral_4_otherwise() : ufc::cell_integral()
{

}

hyperelasticityb_cell_integral_4_otherwise::~hyperelasticityb_cell_integral_4_otherwise()
{

}

const std::vector<bool> & hyperelasticityb_cell_integral_4_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true});
return enabled;
}

void hyperelasticityb_cell_integral_4_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 140
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE15_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000003, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000005, 0.0, -2.0, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 1.999999999999998, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000004, 0.0, 2.0, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991836, -0.5978929390991861, 0.4021070609008199, 2.793678817297555, 0.0, -0.4021070609008182, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008198, 0.4021070609008229, 2.391571756396729, -0.4021070609008185, -0.4021070609008184 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008144, 0.4021070609008263, -2.39157175639673, -0.4021070609008171, -0.402107060900819 },
            { 0.5978929390991841, -0.5978929390991863, 2.79367881729755, 0.4021070609008244, 0.0, -2.793678817297547, -0.4021070609008175 },
            { -0.2574914939727682, 0.2574914939727652, 1.257491493972769, 0.2275255180816996, 0.0, -1.257491493972769, -0.2275255180816941 },
            { 0.7724744819183069, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727681, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891075, -1.257491493972769, -1.257491493972769 },
            { -0.257491493972768, 0.2574914939727655, 0.2275255180816934, 1.257491493972776, 0.0, -0.2275255180816934, -1.25749149397277 } } };
    alignas(32) static const double FE15_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.000000000000001 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000003, -1.999999999999999 },
            { -1.0, -1.0, 0.0, 2.000000000000007, 0.0, 1.999999999999998, -2.000000000000001 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991843, -0.5978929390991847, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991851, 0.4021070609008187, 0.4021070609008227, -0.4021070609008185, 2.391571756396729, -0.4021070609008189 },
            { 0.5978929390991842, -0.5978929390991837, 2.793678817297549, 0.4021070609008198, -2.793678817297548, 0.0, -0.4021070609008182 },
            { 0.5978929390991838, 1.793678817297543, 0.402107060900819, 0.4021070609008254, -0.4021070609008185, -2.39157175639673, -0.4021070609008194 },
            { -0.2574914939727676, 0.2574914939727658, 1.25749149397277, 0.2275255180816987, -1.25749149397277, 0.0, -0.2275255180816943 },
            { 0.7724744819183077, 0.2574914939727662, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727675, 0.2574914939727655, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.257491493972769 },
            { -0.2574914939727673, -0.7724744819183084, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE15_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -1.999999999999999 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 1.999999999999999 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999999 },
            { 0.5978929390991834, 1.793678817297545, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396729 },
            { -1.793678817297545, -0.5978929390991823, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396728 },
            { 0.597892939099184, -0.5978929390991828, 2.79367881729755, 0.402107060900818, -2.793678817297549, -0.402107060900818, 0.0 },
            { 0.5978929390991843, -0.5978929390991833, 0.4021070609008183, 2.793678817297548, -0.4021070609008183, -2.793678817297549, 0.0 },
            { -0.2574914939727672, -0.772474481918307, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183076, 0.2574914939727675, 1.25749149397277, 1.257491493972769, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727678, 0.2574914939727679, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727674, 0.2574914939727682, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.227525518081694, 0.0 } } };
    alignas(32) static const double FE25_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q14[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q14[0][0][1];
    alignas(32) double sp[57];
    sp[0] = J_c1 * J_c5;
    sp[1] = J_c2 * J_c4;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c4 * J_c8;
    sp[4] = J_c5 * J_c7;
    sp[5] = sp[3] + -1 * sp[4];
    sp[6] = J_c0 * sp[5];
    sp[7] = J_c5 * J_c6;
    sp[8] = J_c3 * J_c8;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = J_c1 * sp[9];
    sp[11] = sp[6] + sp[10];
    sp[12] = J_c3 * J_c7;
    sp[13] = J_c4 * J_c6;
    sp[14] = sp[12] + -1 * sp[13];
    sp[15] = J_c2 * sp[14];
    sp[16] = sp[11] + sp[15];
    sp[17] = sp[2] / sp[16];
    sp[18] = J_c2 * J_c3;
    sp[19] = J_c0 * J_c5;
    sp[20] = sp[18] + -1 * sp[19];
    sp[21] = sp[20] / sp[16];
    sp[22] = J_c0 * J_c4;
    sp[23] = J_c1 * J_c3;
    sp[24] = sp[22] + -1 * sp[23];
    sp[25] = sp[24] / sp[16];
    sp[26] = J_c2 * J_c7;
    sp[27] = J_c8 * (-1 * J_c1);
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] / sp[16];
    sp[30] = J_c0 * J_c8;
    sp[31] = J_c6 * (-1 * J_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[16];
    sp[34] = J_c1 * J_c6;
    sp[35] = J_c0 * J_c7;
    sp[36] = sp[34] + -1 * sp[35];
    sp[37] = sp[36] / sp[16];
    sp[38] = sp[5] / sp[16];
    sp[39] = J_c3 * (-1 * J_c8);
    sp[40] = sp[7] + sp[39];
    sp[41] = sp[40] / sp[16];
    sp[42] = sp[14] / sp[16];
    sp[43] = w[1][0] * w[1][0];
    sp[44] = w[7][0] / w[8][0];
    sp[45] = w[2][0] * w[2][0];
    sp[46] = w[1][0] * w[1][1];
    sp[47] = w[2][0] * w[2][1];
    sp[48] = w[1][0] * w[1][2];
    sp[49] = w[2][0] * w[2][2];
    sp[50] = w[1][1] * w[1][1];
    sp[51] = w[2][1] * w[2][1];
    sp[52] = w[1][1] * w[1][2];
    sp[53] = w[2][1] * w[2][2];
    sp[54] = w[1][2] * w[1][2];
    sp[55] = w[2][2] * w[2][2];
    sp[56] = std::abs(sp[16]);
    alignas(32) double BF0[1] = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c0 = w[0][0] * FE15_C0_D100_Q14[0][iq][0] + w[0][1] * FE15_C0_D100_Q14[0][iq][1] + w[0][5] * FE15_C0_D100_Q14[0][iq][2] + w[0][6] * FE15_C0_D100_Q14[0][iq][3] + w[0][7] * FE15_C0_D100_Q14[0][iq][4] + w[0][8] * FE15_C0_D100_Q14[0][iq][5] + w[0][9] * FE15_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE15_C0_D010_Q14[0][iq][0] + w[0][2] * FE15_C0_D010_Q14[0][iq][1] + w[0][4] * FE15_C0_D010_Q14[0][iq][2] + w[0][6] * FE15_C0_D010_Q14[0][iq][3] + w[0][7] * FE15_C0_D010_Q14[0][iq][4] + w[0][8] * FE15_C0_D010_Q14[0][iq][5] + w[0][9] * FE15_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE15_C0_D001_Q14[0][iq][0] + w[0][3] * FE15_C0_D001_Q14[0][iq][1] + w[0][4] * FE15_C0_D001_Q14[0][iq][2] + w[0][5] * FE15_C0_D001_Q14[0][iq][3] + w[0][7] * FE15_C0_D001_Q14[0][iq][4] + w[0][8] * FE15_C0_D001_Q14[0][iq][5] + w[0][9] * FE15_C0_D001_Q14[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE15_C0_D100_Q14[0][iq][0] + w[0][11] * FE15_C0_D100_Q14[0][iq][1] + w[0][15] * FE15_C0_D100_Q14[0][iq][2] + w[0][16] * FE15_C0_D100_Q14[0][iq][3] + w[0][17] * FE15_C0_D100_Q14[0][iq][4] + w[0][18] * FE15_C0_D100_Q14[0][iq][5] + w[0][19] * FE15_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE15_C0_D010_Q14[0][iq][0] + w[0][12] * FE15_C0_D010_Q14[0][iq][1] + w[0][14] * FE15_C0_D010_Q14[0][iq][2] + w[0][16] * FE15_C0_D010_Q14[0][iq][3] + w[0][17] * FE15_C0_D010_Q14[0][iq][4] + w[0][18] * FE15_C0_D010_Q14[0][iq][5] + w[0][19] * FE15_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE15_C0_D001_Q14[0][iq][0] + w[0][13] * FE15_C0_D001_Q14[0][iq][1] + w[0][14] * FE15_C0_D001_Q14[0][iq][2] + w[0][15] * FE15_C0_D001_Q14[0][iq][3] + w[0][17] * FE15_C0_D001_Q14[0][iq][4] + w[0][18] * FE15_C0_D001_Q14[0][iq][5] + w[0][19] * FE15_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE15_C0_D100_Q14[0][iq][0] + w[0][21] * FE15_C0_D100_Q14[0][iq][1] + w[0][25] * FE15_C0_D100_Q14[0][iq][2] + w[0][26] * FE15_C0_D100_Q14[0][iq][3] + w[0][27] * FE15_C0_D100_Q14[0][iq][4] + w[0][28] * FE15_C0_D100_Q14[0][iq][5] + w[0][29] * FE15_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE15_C0_D010_Q14[0][iq][0] + w[0][22] * FE15_C0_D010_Q14[0][iq][1] + w[0][24] * FE15_C0_D010_Q14[0][iq][2] + w[0][26] * FE15_C0_D010_Q14[0][iq][3] + w[0][27] * FE15_C0_D010_Q14[0][iq][4] + w[0][28] * FE15_C0_D010_Q14[0][iq][5] + w[0][29] * FE15_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE15_C0_D001_Q14[0][iq][0] + w[0][23] * FE15_C0_D001_Q14[0][iq][1] + w[0][24] * FE15_C0_D001_Q14[0][iq][2] + w[0][25] * FE15_C0_D001_Q14[0][iq][3] + w[0][27] * FE15_C0_D001_Q14[0][iq][4] + w[0][28] * FE15_C0_D001_Q14[0][iq][5] + w[0][29] * FE15_C0_D001_Q14[0][iq][6];
        alignas(32) double sv14[514];
        sv14[0] = w0_d0_c0 * sp[17];
        sv14[1] = w0_d1_c0 * sp[21];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c0 * sp[25];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = sv14[4] * sv14[4];
        sv14[6] = w0_d0_c1 * sp[17];
        sv14[7] = w0_d1_c1 * sp[21];
        sv14[8] = sv14[6] + sv14[7];
        sv14[9] = w0_d2_c1 * sp[25];
        sv14[10] = sv14[8] + sv14[9];
        sv14[11] = sv14[10] * sv14[10];
        sv14[12] = sv14[5] + sv14[11];
        sv14[13] = w0_d0_c2 * sp[17];
        sv14[14] = w0_d1_c2 * sp[21];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = w0_d2_c2 * sp[25];
        sv14[17] = sv14[15] + sv14[16];
        sv14[18] = (1 + sv14[17]) * (1 + sv14[17]);
        sv14[19] = sv14[12] + sv14[18];
        sv14[20] = w0_d0_c1 * sp[29];
        sv14[21] = w0_d1_c1 * sp[33];
        sv14[22] = sv14[20] + sv14[21];
        sv14[23] = w0_d2_c1 * sp[37];
        sv14[24] = sv14[22] + sv14[23];
        sv14[25] = (1 + sv14[24]) * (1 + sv14[24]);
        sv14[26] = w0_d0_c0 * sp[29];
        sv14[27] = w0_d1_c0 * sp[33];
        sv14[28] = sv14[26] + sv14[27];
        sv14[29] = w0_d2_c0 * sp[37];
        sv14[30] = sv14[28] + sv14[29];
        sv14[31] = sv14[30] * sv14[30];
        sv14[32] = sv14[25] + sv14[31];
        sv14[33] = w0_d0_c2 * sp[29];
        sv14[34] = w0_d1_c2 * sp[33];
        sv14[35] = sv14[33] + sv14[34];
        sv14[36] = w0_d2_c2 * sp[37];
        sv14[37] = sv14[35] + sv14[36];
        sv14[38] = sv14[37] * sv14[37];
        sv14[39] = sv14[32] + sv14[38];
        sv14[40] = sv14[19] * sv14[39];
        sv14[41] = (1 + sv14[24]) * sv14[10];
        sv14[42] = sv14[4] * sv14[30];
        sv14[43] = sv14[41] + sv14[42];
        sv14[44] = (1 + sv14[17]) * sv14[37];
        sv14[45] = sv14[43] + sv14[44];
        sv14[46] = sv14[45] * sv14[45];
        sv14[47] = sv14[40] + -1 * sv14[46];
        sv14[48] = w0_d0_c0 * sp[38];
        sv14[49] = w0_d1_c0 * sp[41];
        sv14[50] = sv14[48] + sv14[49];
        sv14[51] = w0_d2_c0 * sp[42];
        sv14[52] = sv14[50] + sv14[51];
        sv14[53] = (1 + sv14[52]) * (1 + sv14[52]);
        sv14[54] = w0_d0_c1 * sp[38];
        sv14[55] = w0_d1_c1 * sp[41];
        sv14[56] = sv14[54] + sv14[55];
        sv14[57] = w0_d2_c1 * sp[42];
        sv14[58] = sv14[56] + sv14[57];
        sv14[59] = sv14[58] * sv14[58];
        sv14[60] = sv14[53] + sv14[59];
        sv14[61] = w0_d0_c2 * sp[38];
        sv14[62] = w0_d1_c2 * sp[41];
        sv14[63] = sv14[61] + sv14[62];
        sv14[64] = w0_d2_c2 * sp[42];
        sv14[65] = sv14[63] + sv14[64];
        sv14[66] = sv14[65] * sv14[65];
        sv14[67] = sv14[60] + sv14[66];
        sv14[68] = sv14[67] * sv14[47];
        sv14[69] = (1 + sv14[24]) * sv14[58];
        sv14[70] = (1 + sv14[52]) * sv14[30];
        sv14[71] = sv14[69] + sv14[70];
        sv14[72] = sv14[65] * sv14[37];
        sv14[73] = sv14[71] + sv14[72];
        sv14[74] = (1 + sv14[52]) * sv14[4];
        sv14[75] = sv14[10] * sv14[58];
        sv14[76] = sv14[74] + sv14[75];
        sv14[77] = (1 + sv14[17]) * sv14[65];
        sv14[78] = sv14[76] + sv14[77];
        sv14[79] = sv14[78] * sv14[45];
        sv14[80] = sv14[19] * sv14[73];
        sv14[81] = sv14[79] + -1 * sv14[80];
        sv14[82] = sv14[73] * sv14[81];
        sv14[83] = sv14[68] + sv14[82];
        sv14[84] = sv14[45] * sv14[73];
        sv14[85] = sv14[78] * sv14[39];
        sv14[86] = sv14[84] + -1 * sv14[85];
        sv14[87] = sv14[78] * sv14[86];
        sv14[88] = sv14[83] + sv14[87];
        sv14[89] = 0.3333333333333333 * sv14[47] * std::pow(sv14[88], -0.6666666666666667);
        sv14[90] = sv14[67] + sv14[39];
        sv14[91] = sv14[90] + sv14[19];
        sv14[92] = sv14[91] / std::pow(sv14[88], 0.3333333333333333);
        sv14[93] = sv14[89] * sv14[92];
        sv14[94] = (1 + -1 * sv14[93]) / std::pow(sv14[88], 0.3333333333333333);
        sv14[95] = sv14[94] * w[3][0];
        sv14[96] = sv14[47] * w[5][0];
        sv14[97] = std::pow(sv14[88], -1 + w[5][0]);
        sv14[98] = sv14[96] * sv14[97];
        sv14[99] = std::pow(sv14[88], w[5][0]);
        sv14[100] = sv14[98] * (1.0 / sv14[99]);
        sv14[101] = -1 * sv14[100] / sv14[99];
        sv14[102] = sv14[98] + sv14[101];
        sv14[103] = sv14[102] * w[6][0];
        sv14[104] = 1.0 / sv14[99] + sv14[99];
        sv14[105] = std::pow(-2.0 + sv14[104], -1 + w[6][0]);
        sv14[106] = sv14[103] * sv14[105];
        sv14[107] = sv14[106] * w[4][0];
        sv14[108] = sv14[95] + sv14[107];
        sv14[109] = w[1][0] * sv14[67];
        sv14[110] = w[1][1] * sv14[73];
        sv14[111] = sv14[109] + sv14[110];
        sv14[112] = w[1][2] * sv14[78];
        sv14[113] = sv14[111] + sv14[112];
        sv14[114] = w[1][0] * sv14[113];
        sv14[115] = w[1][0] * sv14[73];
        sv14[116] = w[1][1] * sv14[39];
        sv14[117] = sv14[115] + sv14[116];
        sv14[118] = w[1][2] * sv14[45];
        sv14[119] = sv14[117] + sv14[118];
        sv14[120] = w[1][1] * sv14[119];
        sv14[121] = sv14[114] + sv14[120];
        sv14[122] = w[1][0] * sv14[78];
        sv14[123] = w[1][1] * sv14[45];
        sv14[124] = sv14[122] + sv14[123];
        sv14[125] = w[1][2] * sv14[19];
        sv14[126] = sv14[124] + sv14[125];
        sv14[127] = w[1][2] * sv14[126];
        sv14[128] = sv14[121] + sv14[127];
        sv14[129] = sv14[128] / std::pow(sv14[88], 0.3333333333333333);
        sv14[130] = sv14[89] * sv14[129];
        sv14[131] = sp[43] + -1 * sv14[130];
        sv14[132] = sv14[131] / std::pow(sv14[88], 0.3333333333333333);
        sv14[133] = (-1 + sv14[129]) * (2 * sv14[132]);
        sv14[134] = sv14[133] * w[8][0];
        sv14[135] = std::pow(-1 + sv14[129], 2) * w[8][0];
        sv14[136] = std::exp(sv14[135]);
        sv14[137] = sv14[134] * sv14[136];
        sv14[138] = sv14[137] * (sp[44] / 2.0);
        sv14[139] = sv14[138] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[140] = sv14[108] + sv14[139];
        sv14[141] = w[2][0] * sv14[67];
        sv14[142] = w[2][1] * sv14[73];
        sv14[143] = sv14[141] + sv14[142];
        sv14[144] = w[2][2] * sv14[78];
        sv14[145] = sv14[143] + sv14[144];
        sv14[146] = w[2][0] * sv14[145];
        sv14[147] = w[2][0] * sv14[73];
        sv14[148] = w[2][1] * sv14[39];
        sv14[149] = sv14[147] + sv14[148];
        sv14[150] = w[2][2] * sv14[45];
        sv14[151] = sv14[149] + sv14[150];
        sv14[152] = w[2][1] * sv14[151];
        sv14[153] = sv14[146] + sv14[152];
        sv14[154] = w[2][0] * sv14[78];
        sv14[155] = w[2][1] * sv14[45];
        sv14[156] = sv14[154] + sv14[155];
        sv14[157] = w[2][2] * sv14[19];
        sv14[158] = sv14[156] + sv14[157];
        sv14[159] = w[2][2] * sv14[158];
        sv14[160] = sv14[153] + sv14[159];
        sv14[161] = sv14[160] / std::pow(sv14[88], 0.3333333333333333);
        sv14[162] = sv14[89] * sv14[161];
        sv14[163] = sp[45] + -1 * sv14[162];
        sv14[164] = sv14[163] / std::pow(sv14[88], 0.3333333333333333);
        sv14[165] = (-1 + sv14[161]) * (2 * sv14[164]);
        sv14[166] = sv14[165] * w[8][0];
        sv14[167] = std::pow(-1 + sv14[161], 2) * w[8][0];
        sv14[168] = std::exp(sv14[167]);
        sv14[169] = sv14[166] * sv14[168];
        sv14[170] = sv14[169] * (sp[44] / 2.0);
        sv14[171] = sv14[170] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[172] = sv14[140] + sv14[171];
        sv14[173] = (1 + sv14[17]) * (1 + sv14[24]);
        sv14[174] = sv14[10] * sv14[37];
        sv14[175] = sv14[173] + -1 * sv14[174];
        sv14[176] = (1 + sv14[52]) * sv14[175];
        sv14[177] = sv14[10] * sv14[65];
        sv14[178] = (1 + sv14[17]) * sv14[58];
        sv14[179] = sv14[177] + -1 * sv14[178];
        sv14[180] = sv14[179] * sv14[30];
        sv14[181] = sv14[176] + sv14[180];
        sv14[182] = sv14[58] * sv14[37];
        sv14[183] = (1 + sv14[24]) * sv14[65];
        sv14[184] = sv14[182] + -1 * sv14[183];
        sv14[185] = sv14[184] * sv14[4];
        sv14[186] = sv14[181] + sv14[185];
        sv14[187] = sv14[65] * (1.0 / sv14[186]);
        sv14[188] = sv14[172] * sv14[187];
        sv14[189] = sv14[73] * (-1 * sv14[19]);
        sv14[190] = sv14[79] + sv14[189];
        sv14[191] = 0.3333333333333333 * sv14[190] * std::pow(sv14[88], -0.6666666666666667);
        sv14[192] = sv14[191] * sv14[92];
        sv14[193] = -1 * sv14[192] / std::pow(sv14[88], 0.3333333333333333);
        sv14[194] = sv14[193] * w[3][0];
        sv14[195] = sv14[190] * w[5][0];
        sv14[196] = sv14[195] * sv14[97];
        sv14[197] = sv14[196] * (1.0 / sv14[99]);
        sv14[198] = -1 * sv14[197] / sv14[99];
        sv14[199] = sv14[196] + sv14[198];
        sv14[200] = sv14[199] * w[6][0];
        sv14[201] = sv14[200] * sv14[105];
        sv14[202] = sv14[201] * w[4][0];
        sv14[203] = sv14[194] + sv14[202];
        sv14[204] = sv14[191] * sv14[129];
        sv14[205] = sp[46] + -1 * sv14[204];
        sv14[206] = sv14[205] / std::pow(sv14[88], 0.3333333333333333);
        sv14[207] = (-1 + sv14[129]) * (2 * sv14[206]);
        sv14[208] = sv14[207] * w[8][0];
        sv14[209] = sv14[208] * sv14[136];
        sv14[210] = sv14[209] * (sp[44] / 2.0);
        sv14[211] = sv14[210] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[212] = sv14[203] + sv14[211];
        sv14[213] = sv14[191] * sv14[161];
        sv14[214] = sp[47] + -1 * sv14[213];
        sv14[215] = sv14[214] / std::pow(sv14[88], 0.3333333333333333);
        sv14[216] = (-1 + sv14[161]) * (2 * sv14[215]);
        sv14[217] = sv14[216] * w[8][0];
        sv14[218] = sv14[217] * sv14[168];
        sv14[219] = sv14[218] * (sp[44] / 2.0);
        sv14[220] = sv14[219] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[221] = sv14[212] + sv14[220];
        sv14[222] = sv14[37] * (1.0 / sv14[186]);
        sv14[223] = sv14[221] * sv14[222];
        sv14[224] = sv14[188] + sv14[223];
        sv14[225] = sv14[78] * (-1 * sv14[39]);
        sv14[226] = sv14[84] + sv14[225];
        sv14[227] = 0.3333333333333333 * sv14[226] * std::pow(sv14[88], -0.6666666666666667);
        sv14[228] = sv14[227] * sv14[92];
        sv14[229] = -1 * sv14[228] / std::pow(sv14[88], 0.3333333333333333);
        sv14[230] = sv14[229] * w[3][0];
        sv14[231] = sv14[226] * w[5][0];
        sv14[232] = sv14[231] * sv14[97];
        sv14[233] = sv14[232] * (1.0 / sv14[99]);
        sv14[234] = -1 * sv14[233] / sv14[99];
        sv14[235] = sv14[232] + sv14[234];
        sv14[236] = sv14[235] * w[6][0];
        sv14[237] = sv14[236] * sv14[105];
        sv14[238] = sv14[237] * w[4][0];
        sv14[239] = sv14[230] + sv14[238];
        sv14[240] = sv14[227] * sv14[129];
        sv14[241] = sp[48] + -1 * sv14[240];
        sv14[242] = sv14[241] / std::pow(sv14[88], 0.3333333333333333);
        sv14[243] = (-1 + sv14[129]) * (2 * sv14[242]);
        sv14[244] = sv14[243] * w[8][0];
        sv14[245] = sv14[244] * sv14[136];
        sv14[246] = sv14[245] * (sp[44] / 2.0);
        sv14[247] = sv14[246] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[248] = sv14[239] + sv14[247];
        sv14[249] = sv14[227] * sv14[161];
        sv14[250] = sp[49] + -1 * sv14[249];
        sv14[251] = sv14[250] / std::pow(sv14[88], 0.3333333333333333);
        sv14[252] = (-1 + sv14[161]) * (2 * sv14[251]);
        sv14[253] = sv14[252] * w[8][0];
        sv14[254] = sv14[253] * sv14[168];
        sv14[255] = sv14[254] * (sp[44] / 2.0);
        sv14[256] = sv14[255] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[257] = sv14[248] + sv14[256];
        sv14[258] = (1 + sv14[17]) * (1.0 / sv14[186]);
        sv14[259] = sv14[257] * sv14[258];
        sv14[260] = sv14[224] + sv14[259];
        sv14[261] = sv14[260] * sv14[65];
        sv14[262] = 0.3333333333333333 * sv14[81] * std::pow(sv14[88], -0.6666666666666667);
        sv14[263] = sv14[262] * sv14[92];
        sv14[264] = -1 * sv14[263] / std::pow(sv14[88], 0.3333333333333333);
        sv14[265] = sv14[264] * w[3][0];
        sv14[266] = sv14[81] * w[5][0];
        sv14[267] = sv14[266] * sv14[97];
        sv14[268] = sv14[267] * (1.0 / sv14[99]);
        sv14[269] = -1 * sv14[268] / sv14[99];
        sv14[270] = sv14[267] + sv14[269];
        sv14[271] = sv14[270] * w[6][0];
        sv14[272] = sv14[271] * sv14[105];
        sv14[273] = sv14[272] * w[4][0];
        sv14[274] = sv14[265] + sv14[273];
        sv14[275] = sv14[262] * sv14[129];
        sv14[276] = sp[46] + -1 * sv14[275];
        sv14[277] = sv14[276] / std::pow(sv14[88], 0.3333333333333333);
        sv14[278] = (-1 + sv14[129]) * (2 * sv14[277]);
        sv14[279] = sv14[278] * w[8][0];
        sv14[280] = sv14[279] * sv14[136];
        sv14[281] = sv14[280] * (sp[44] / 2.0);
        sv14[282] = sv14[281] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[283] = sv14[274] + sv14[282];
        sv14[284] = sv14[262] * sv14[161];
        sv14[285] = sp[47] + -1 * sv14[284];
        sv14[286] = sv14[285] / std::pow(sv14[88], 0.3333333333333333);
        sv14[287] = (-1 + sv14[161]) * (2 * sv14[286]);
        sv14[288] = sv14[287] * w[8][0];
        sv14[289] = sv14[288] * sv14[168];
        sv14[290] = sv14[289] * (sp[44] / 2.0);
        sv14[291] = sv14[290] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[292] = sv14[283] + sv14[291];
        sv14[293] = sv14[292] * sv14[187];
        sv14[294] = sv14[19] * sv14[67];
        sv14[295] = sv14[78] * (-1 * sv14[78]);
        sv14[296] = sv14[294] + sv14[295];
        sv14[297] = 0.3333333333333333 * sv14[296] * std::pow(sv14[88], -0.6666666666666667);
        sv14[298] = sv14[297] * sv14[92];
        sv14[299] = (1 + -1 * sv14[298]) / std::pow(sv14[88], 0.3333333333333333);
        sv14[300] = sv14[299] * w[3][0];
        sv14[301] = sv14[296] * w[5][0];
        sv14[302] = sv14[301] * sv14[97];
        sv14[303] = sv14[302] * (1.0 / sv14[99]);
        sv14[304] = -1 * sv14[303] / sv14[99];
        sv14[305] = sv14[302] + sv14[304];
        sv14[306] = sv14[305] * w[6][0];
        sv14[307] = sv14[306] * sv14[105];
        sv14[308] = sv14[307] * w[4][0];
        sv14[309] = sv14[300] + sv14[308];
        sv14[310] = sv14[297] * sv14[129];
        sv14[311] = sp[50] + -1 * sv14[310];
        sv14[312] = sv14[311] / std::pow(sv14[88], 0.3333333333333333);
        sv14[313] = (-1 + sv14[129]) * (2 * sv14[312]);
        sv14[314] = sv14[313] * w[8][0];
        sv14[315] = sv14[314] * sv14[136];
        sv14[316] = sv14[315] * (sp[44] / 2.0);
        sv14[317] = sv14[316] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[318] = sv14[309] + sv14[317];
        sv14[319] = sv14[297] * sv14[161];
        sv14[320] = sp[51] + -1 * sv14[319];
        sv14[321] = sv14[320] / std::pow(sv14[88], 0.3333333333333333);
        sv14[322] = (-1 + sv14[161]) * (2 * sv14[321]);
        sv14[323] = sv14[322] * w[8][0];
        sv14[324] = sv14[323] * sv14[168];
        sv14[325] = sv14[324] * (sp[44] / 2.0);
        sv14[326] = sv14[325] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[327] = sv14[318] + sv14[326];
        sv14[328] = sv14[327] * sv14[222];
        sv14[329] = sv14[293] + sv14[328];
        sv14[330] = sv14[78] * sv14[73];
        sv14[331] = sv14[67] * (-1 * sv14[45]);
        sv14[332] = sv14[330] + sv14[331];
        sv14[333] = 0.3333333333333333 * sv14[332] * std::pow(sv14[88], -0.6666666666666667);
        sv14[334] = sv14[333] * sv14[92];
        sv14[335] = -1 * sv14[334] / std::pow(sv14[88], 0.3333333333333333);
        sv14[336] = sv14[335] * w[3][0];
        sv14[337] = sv14[332] * w[5][0];
        sv14[338] = sv14[337] * sv14[97];
        sv14[339] = sv14[338] * (1.0 / sv14[99]);
        sv14[340] = -1 * sv14[339] / sv14[99];
        sv14[341] = sv14[338] + sv14[340];
        sv14[342] = sv14[341] * w[6][0];
        sv14[343] = sv14[342] * sv14[105];
        sv14[344] = sv14[343] * w[4][0];
        sv14[345] = sv14[336] + sv14[344];
        sv14[346] = sv14[333] * sv14[129];
        sv14[347] = sp[52] + -1 * sv14[346];
        sv14[348] = sv14[347] / std::pow(sv14[88], 0.3333333333333333);
        sv14[349] = (-1 + sv14[129]) * (2 * sv14[348]);
        sv14[350] = sv14[349] * w[8][0];
        sv14[351] = sv14[350] * sv14[136];
        sv14[352] = sv14[351] * (sp[44] / 2.0);
        sv14[353] = sv14[352] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[354] = sv14[345] + sv14[353];
        sv14[355] = sv14[333] * sv14[161];
        sv14[356] = sp[53] + -1 * sv14[355];
        sv14[357] = sv14[356] / std::pow(sv14[88], 0.3333333333333333);
        sv14[358] = (-1 + sv14[161]) * (2 * sv14[357]);
        sv14[359] = sv14[358] * w[8][0];
        sv14[360] = sv14[359] * sv14[168];
        sv14[361] = sv14[360] * (sp[44] / 2.0);
        sv14[362] = sv14[361] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[363] = sv14[354] + sv14[362];
        sv14[364] = sv14[363] * sv14[258];
        sv14[365] = sv14[329] + sv14[364];
        sv14[366] = sv14[365] * sv14[37];
        sv14[367] = sv14[261] + sv14[366];
        sv14[368] = 0.3333333333333333 * sv14[86] * std::pow(sv14[88], -0.6666666666666667);
        sv14[369] = sv14[368] * sv14[92];
        sv14[370] = -1 * sv14[369] / std::pow(sv14[88], 0.3333333333333333);
        sv14[371] = sv14[370] * w[3][0];
        sv14[372] = sv14[86] * w[5][0];
        sv14[373] = sv14[372] * sv14[97];
        sv14[374] = sv14[373] * (1.0 / sv14[99]);
        sv14[375] = -1 * sv14[374] / sv14[99];
        sv14[376] = sv14[373] + sv14[375];
        sv14[377] = sv14[376] * w[6][0];
        sv14[378] = sv14[377] * sv14[105];
        sv14[379] = sv14[378] * w[4][0];
        sv14[380] = sv14[371] + sv14[379];
        sv14[381] = sv14[368] * sv14[129];
        sv14[382] = sp[48] + -1 * sv14[381];
        sv14[383] = sv14[382] / std::pow(sv14[88], 0.3333333333333333);
        sv14[384] = (-1 + sv14[129]) * (2 * sv14[383]);
        sv14[385] = sv14[384] * w[8][0];
        sv14[386] = sv14[385] * sv14[136];
        sv14[387] = sv14[386] * (sp[44] / 2.0);
        sv14[388] = sv14[387] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[389] = sv14[380] + sv14[388];
        sv14[390] = sv14[368] * sv14[161];
        sv14[391] = sp[49] + -1 * sv14[390];
        sv14[392] = sv14[391] / std::pow(sv14[88], 0.3333333333333333);
        sv14[393] = (-1 + sv14[161]) * (2 * sv14[392]);
        sv14[394] = sv14[393] * w[8][0];
        sv14[395] = sv14[394] * sv14[168];
        sv14[396] = sv14[395] * (sp[44] / 2.0);
        sv14[397] = sv14[396] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[398] = sv14[389] + sv14[397];
        sv14[399] = sv14[398] * sv14[187];
        sv14[400] = sv14[363] * sv14[222];
        sv14[401] = sv14[399] + sv14[400];
        sv14[402] = sv14[67] * sv14[39];
        sv14[403] = sv14[73] * (-1 * sv14[73]);
        sv14[404] = sv14[402] + sv14[403];
        sv14[405] = 0.3333333333333333 * sv14[404] * std::pow(sv14[88], -0.6666666666666667);
        sv14[406] = sv14[405] * sv14[92];
        sv14[407] = (1 + -1 * sv14[406]) / std::pow(sv14[88], 0.3333333333333333);
        sv14[408] = sv14[407] * w[3][0];
        sv14[409] = sv14[404] * w[5][0];
        sv14[410] = sv14[409] * sv14[97];
        sv14[411] = sv14[410] * (1.0 / sv14[99]);
        sv14[412] = -1 * sv14[411] / sv14[99];
        sv14[413] = sv14[410] + sv14[412];
        sv14[414] = sv14[413] * w[6][0];
        sv14[415] = sv14[414] * sv14[105];
        sv14[416] = sv14[415] * w[4][0];
        sv14[417] = sv14[408] + sv14[416];
        sv14[418] = sv14[405] * sv14[129];
        sv14[419] = sp[54] + -1 * sv14[418];
        sv14[420] = sv14[419] / std::pow(sv14[88], 0.3333333333333333);
        sv14[421] = (-1 + sv14[129]) * (2 * sv14[420]);
        sv14[422] = sv14[421] * w[8][0];
        sv14[423] = sv14[422] * sv14[136];
        sv14[424] = sv14[423] * (sp[44] / 2.0);
        sv14[425] = sv14[424] * (-1 + sv14[129] <= 1e-10 ? 0.0 : 1);
        sv14[426] = sv14[417] + sv14[425];
        sv14[427] = sv14[405] * sv14[161];
        sv14[428] = sp[55] + -1 * sv14[427];
        sv14[429] = sv14[428] / std::pow(sv14[88], 0.3333333333333333);
        sv14[430] = (-1 + sv14[161]) * (2 * sv14[429]);
        sv14[431] = sv14[430] * w[8][0];
        sv14[432] = sv14[431] * sv14[168];
        sv14[433] = sv14[432] * (sp[44] / 2.0);
        sv14[434] = sv14[433] * (-1 + sv14[161] <= 1e-10 ? 0.0 : 1);
        sv14[435] = sv14[426] + sv14[434];
        sv14[436] = sv14[435] * sv14[258];
        sv14[437] = sv14[401] + sv14[436];
        sv14[438] = (1 + sv14[17]) * sv14[437];
        sv14[439] = sv14[367] + sv14[438];
        sv14[440] = (1 + sv14[24]) * (1.0 / sv14[186]);
        sv14[441] = sv14[327] * sv14[440];
        sv14[442] = sv14[58] * (1.0 / sv14[186]);
        sv14[443] = sv14[292] * sv14[442];
        sv14[444] = sv14[441] + sv14[443];
        sv14[445] = sv14[10] * (1.0 / sv14[186]);
        sv14[446] = sv14[363] * sv14[445];
        sv14[447] = sv14[444] + sv14[446];
        sv14[448] = (1 + sv14[24]) * sv14[447];
        sv14[449] = sv14[221] * sv14[440];
        sv14[450] = sv14[172] * sv14[442];
        sv14[451] = sv14[449] + sv14[450];
        sv14[452] = sv14[257] * sv14[445];
        sv14[453] = sv14[451] + sv14[452];
        sv14[454] = sv14[453] * sv14[58];
        sv14[455] = sv14[448] + sv14[454];
        sv14[456] = sv14[363] * sv14[440];
        sv14[457] = sv14[398] * sv14[442];
        sv14[458] = sv14[456] + sv14[457];
        sv14[459] = sv14[435] * sv14[445];
        sv14[460] = sv14[458] + sv14[459];
        sv14[461] = sv14[460] * sv14[10];
        sv14[462] = sv14[455] + sv14[461];
        sv14[463] = std::pow(sv14[439], 2) + std::pow(sv14[462], 2);
        sv14[464] = (1 + sv14[52]) * (1.0 / sv14[186]);
        sv14[465] = sv14[172] * sv14[464];
        sv14[466] = sv14[30] * (1.0 / sv14[186]);
        sv14[467] = sv14[221] * sv14[466];
        sv14[468] = sv14[465] + sv14[467];
        sv14[469] = sv14[4] * (1.0 / sv14[186]);
        sv14[470] = sv14[257] * sv14[469];
        sv14[471] = sv14[468] + sv14[470];
        sv14[472] = (1 + sv14[52]) * sv14[471];
        sv14[473] = sv14[292] * sv14[464];
        sv14[474] = sv14[327] * sv14[466];
        sv14[475] = sv14[473] + sv14[474];
        sv14[476] = sv14[363] * sv14[469];
        sv14[477] = sv14[475] + sv14[476];
        sv14[478] = sv14[477] * sv14[30];
        sv14[479] = sv14[472] + sv14[478];
        sv14[480] = sv14[398] * sv14[464];
        sv14[481] = sv14[363] * sv14[466];
        sv14[482] = sv14[480] + sv14[481];
        sv14[483] = sv14[435] * sv14[469];
        sv14[484] = sv14[482] + sv14[483];
        sv14[485] = sv14[484] * sv14[4];
        sv14[486] = sv14[479] + sv14[485];
        sv14[487] = sv14[463] + std::pow(sv14[486], 2);
        sv14[488] = sv14[439] * sv14[462];
        sv14[489] = sv14[487] + -1 * sv14[488];
        sv14[490] = sv14[486] * sv14[462];
        sv14[491] = sv14[489] + -1 * sv14[490];
        sv14[492] = sv14[439] * sv14[486];
        sv14[493] = sv14[491] + -1 * sv14[492];
        sv14[494] = sv14[453] * sv14[65];
        sv14[495] = sv14[447] * sv14[37];
        sv14[496] = sv14[494] + sv14[495];
        sv14[497] = (1 + sv14[17]) * sv14[460];
        sv14[498] = sv14[496] + sv14[497];
        sv14[499] = (1 + sv14[52]) * sv14[453];
        sv14[500] = sv14[447] * sv14[30];
        sv14[501] = sv14[499] + sv14[500];
        sv14[502] = sv14[460] * sv14[4];
        sv14[503] = sv14[501] + sv14[502];
        sv14[504] = std::pow(sv14[498], 2) + std::pow(sv14[503], 2);
        sv14[505] = (1 + sv14[52]) * sv14[260];
        sv14[506] = sv14[365] * sv14[30];
        sv14[507] = sv14[505] + sv14[506];
        sv14[508] = sv14[437] * sv14[4];
        sv14[509] = sv14[507] + sv14[508];
        sv14[510] = sv14[504] + std::pow(sv14[509], 2);
        sv14[511] = sv14[493] + 3 * sv14[510];
        sv14[512] = std::sqrt(sv14[511]);
        sv14[513] = sp[56] * sv14[512];
        const double fw0 = sv14[513] * weights14[iq];
        for (int i = 0; i < 1; ++i)
            BF0[i] += fw0;
    }
    A[0] = 0.0;
    for (int i = 0; i < 1; ++i)
        A[i] += BF0[i];
}


hyperelasticityb_form_0::hyperelasticityb_form_0() : ufc::form()
{
    // Do nothing
}

hyperelasticityb_form_0::~hyperelasticityb_form_0()
{
    // Do nothing
}

const char * hyperelasticityb_form_0::signature() const
{
    return "25022e22a2c287796b7035935f6667b99f7dc961d535353a13cb87d3348aaff33717726941a91c453cae7569620479e14626ba4aa7ca34574c19859304264601";
}

std::size_t hyperelasticityb_form_0::rank() const
{
    return 0;
}

std::size_t hyperelasticityb_form_0::num_coefficients() const
{
    return 11;
}

std::size_t hyperelasticityb_form_0::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
    return position[i];
}

ufc::finite_element * hyperelasticityb_form_0::create_coordinate_finite_element() const
{
    return new hyperelasticityb_finite_element_5();
}

ufc::dofmap * hyperelasticityb_form_0::create_coordinate_dofmap() const
{
    return new hyperelasticityb_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticityb_form_0::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * hyperelasticityb_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_3();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 10:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_3();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 10:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_0::max_exterior_facet_subdomain_id() const
{
    return 2;
}

std::size_t hyperelasticityb_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticityb_form_0::has_cell_integrals() const
{
    return true;
}

bool hyperelasticityb_form_0::has_exterior_facet_integrals() const
{
    return true;
}

bool hyperelasticityb_form_0::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_0::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticityb_form_0::has_custom_integrals() const
{
    return false;
}

bool hyperelasticityb_form_0::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticityb_form_0::has_interface_integrals() const
{
    return false;
}

bool hyperelasticityb_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticityb_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * hyperelasticityb_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 1:
      {
        return new hyperelasticityb_exterior_facet_integral_0_1();
        break;
      }
    }
    
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * hyperelasticityb_form_0::create_default_cell_integral() const
{
    return new hyperelasticityb_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * hyperelasticityb_form_0::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_0::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_0::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_0::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_0::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_0::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_0::create_default_overlap_integral() const
{
    return 0;
}


hyperelasticityb_form_1::hyperelasticityb_form_1() : ufc::form()
{
    // Do nothing
}

hyperelasticityb_form_1::~hyperelasticityb_form_1()
{
    // Do nothing
}

const char * hyperelasticityb_form_1::signature() const
{
    return "4caf63763ecc98cf0206af943de1f6ec927828ab97915985f35cee1c44867eabb2dfcd9749ea918cd25a894fa9e3c68d0870871018f1469ffe4f521bfdf7bc77";
}

std::size_t hyperelasticityb_form_1::rank() const
{
    return 2;
}

std::size_t hyperelasticityb_form_1::num_coefficients() const
{
    return 9;
}

std::size_t hyperelasticityb_form_1::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0, 2, 3, 4, 5, 6, 7, 8, 9});
    return position[i];
}

ufc::finite_element * hyperelasticityb_form_1::create_coordinate_finite_element() const
{
    return new hyperelasticityb_finite_element_5();
}

ufc::dofmap * hyperelasticityb_form_1::create_coordinate_dofmap() const
{
    return new hyperelasticityb_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticityb_form_1::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * hyperelasticityb_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_3();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_3();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_finite_element_3();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 10:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_3();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_3();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_dofmap_3();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 10:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_form_1::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_1::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_1::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_1::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_1::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_1::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_1::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_1::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticityb_form_1::has_cell_integrals() const
{
    return true;
}

bool hyperelasticityb_form_1::has_exterior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_1::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_1::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticityb_form_1::has_custom_integrals() const
{
    return false;
}

bool hyperelasticityb_form_1::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticityb_form_1::has_interface_integrals() const
{
    return false;
}

bool hyperelasticityb_form_1::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticityb_form_1::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * hyperelasticityb_form_1::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_1::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_1::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_1::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_1::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_1::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_1::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * hyperelasticityb_form_1::create_default_cell_integral() const
{
    return new hyperelasticityb_cell_integral_1_otherwise();
}

ufc::exterior_facet_integral * hyperelasticityb_form_1::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_1::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_1::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_1::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_1::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_1::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_1::create_default_overlap_integral() const
{
    return 0;
}


hyperelasticityb_form_2::hyperelasticityb_form_2() : ufc::form()
{
    // Do nothing
}

hyperelasticityb_form_2::~hyperelasticityb_form_2()
{
    // Do nothing
}

const char * hyperelasticityb_form_2::signature() const
{
    return "25981c9a993055234e3e225f2de37cc8eb35c1ae4fe630a2d48ff42bf857bdc3d665194c7f935509b345151f2dc4719616de33692ea66325e8273263ba04e19e";
}

std::size_t hyperelasticityb_form_2::rank() const
{
    return 1;
}

std::size_t hyperelasticityb_form_2::num_coefficients() const
{
    return 11;
}

std::size_t hyperelasticityb_form_2::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
    return position[i];
}

ufc::finite_element * hyperelasticityb_form_2::create_coordinate_finite_element() const
{
    return new hyperelasticityb_finite_element_5();
}

ufc::dofmap * hyperelasticityb_form_2::create_coordinate_dofmap() const
{
    return new hyperelasticityb_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticityb_form_2::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * hyperelasticityb_form_2::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_3();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_3();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 10:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 11:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_form_2::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_3();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_3();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 10:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 11:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_form_2::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_2::max_exterior_facet_subdomain_id() const
{
    return 2;
}

std::size_t hyperelasticityb_form_2::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_2::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_2::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_2::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_2::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_2::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticityb_form_2::has_cell_integrals() const
{
    return true;
}

bool hyperelasticityb_form_2::has_exterior_facet_integrals() const
{
    return true;
}

bool hyperelasticityb_form_2::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_2::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticityb_form_2::has_custom_integrals() const
{
    return false;
}

bool hyperelasticityb_form_2::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticityb_form_2::has_interface_integrals() const
{
    return false;
}

bool hyperelasticityb_form_2::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticityb_form_2::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * hyperelasticityb_form_2::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 1:
      {
        return new hyperelasticityb_exterior_facet_integral_2_1();
        break;
      }
    }
    
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_2::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_2::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_2::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_2::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_2::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_2::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * hyperelasticityb_form_2::create_default_cell_integral() const
{
    return new hyperelasticityb_cell_integral_2_otherwise();
}

ufc::exterior_facet_integral * hyperelasticityb_form_2::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_2::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_2::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_2::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_2::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_2::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_2::create_default_overlap_integral() const
{
    return 0;
}


hyperelasticityb_form_3::hyperelasticityb_form_3() : ufc::form()
{
    // Do nothing
}

hyperelasticityb_form_3::~hyperelasticityb_form_3()
{
    // Do nothing
}

const char * hyperelasticityb_form_3::signature() const
{
    return "9d6c3270f3a03cdd9a4f78b2aabc50d9e569c340874abfdcc6631d1e1387793b84bf80cf97e813d6e8c8faaa5d40a73596a5c48d29f29cd7c8ba7180feb7c8f9";
}

std::size_t hyperelasticityb_form_3::rank() const
{
    return 2;
}

std::size_t hyperelasticityb_form_3::num_coefficients() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({});
    return position[i];
}

ufc::finite_element * hyperelasticityb_form_3::create_coordinate_finite_element() const
{
    return new hyperelasticityb_finite_element_5();
}

ufc::dofmap * hyperelasticityb_form_3::create_coordinate_dofmap() const
{
    return new hyperelasticityb_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticityb_form_3::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * hyperelasticityb_form_3::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_6();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_6();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_form_3::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_6();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_6();
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_form_3::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_3::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticityb_form_3::has_cell_integrals() const
{
    return true;
}

bool hyperelasticityb_form_3::has_exterior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_3::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_3::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticityb_form_3::has_custom_integrals() const
{
    return false;
}

bool hyperelasticityb_form_3::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticityb_form_3::has_interface_integrals() const
{
    return false;
}

bool hyperelasticityb_form_3::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticityb_form_3::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * hyperelasticityb_form_3::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_3::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_3::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_3::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_3::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_3::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_3::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * hyperelasticityb_form_3::create_default_cell_integral() const
{
    return new hyperelasticityb_cell_integral_3_otherwise();
}

ufc::exterior_facet_integral * hyperelasticityb_form_3::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_3::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_3::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_3::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_3::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_3::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_3::create_default_overlap_integral() const
{
    return 0;
}


hyperelasticityb_form_4::hyperelasticityb_form_4() : ufc::form()
{
    // Do nothing
}

hyperelasticityb_form_4::~hyperelasticityb_form_4()
{
    // Do nothing
}

const char * hyperelasticityb_form_4::signature() const
{
    return "1801924d590c56319ae9dff8a8b212c4aff90746d256e6e7f24c360350b292c29f543e05074c2016343428503859a09fd9bf5196772108e00cb25de0acc760b5";
}

std::size_t hyperelasticityb_form_4::rank() const
{
    return 1;
}

std::size_t hyperelasticityb_form_4::num_coefficients() const
{
    return 9;
}

std::size_t hyperelasticityb_form_4::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8});
    return position[i];
}

ufc::finite_element * hyperelasticityb_form_4::create_coordinate_finite_element() const
{
    return new hyperelasticityb_finite_element_5();
}

ufc::dofmap * hyperelasticityb_form_4::create_coordinate_dofmap() const
{
    return new hyperelasticityb_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticityb_form_4::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * hyperelasticityb_form_4::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_finite_element_6();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_finite_element_3();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_finite_element_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * hyperelasticityb_form_4::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new hyperelasticityb_dofmap_6();
        break;
      }
    case 1:
      {
        return new hyperelasticityb_dofmap_3();
        break;
      }
    case 2:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 3:
      {
        return new hyperelasticityb_dofmap_1();
        break;
      }
    case 4:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 5:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 6:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 7:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 8:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    case 9:
      {
        return new hyperelasticityb_dofmap_0();
        break;
      }
    }
    
    return 0;
}

std::size_t hyperelasticityb_form_4::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_4::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_4::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_4::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_4::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_4::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_4::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticityb_form_4::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticityb_form_4::has_cell_integrals() const
{
    return true;
}

bool hyperelasticityb_form_4::has_exterior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_4::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticityb_form_4::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticityb_form_4::has_custom_integrals() const
{
    return false;
}

bool hyperelasticityb_form_4::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticityb_form_4::has_interface_integrals() const
{
    return false;
}

bool hyperelasticityb_form_4::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticityb_form_4::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * hyperelasticityb_form_4::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_4::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_4::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_4::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_4::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_4::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_4::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * hyperelasticityb_form_4::create_default_cell_integral() const
{
    return new hyperelasticityb_cell_integral_4_otherwise();
}

ufc::exterior_facet_integral * hyperelasticityb_form_4::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * hyperelasticityb_form_4::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * hyperelasticityb_form_4::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * hyperelasticityb_form_4::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * hyperelasticityb_form_4::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * hyperelasticityb_form_4::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * hyperelasticityb_form_4::create_default_overlap_integral() const
{
    return 0;
}

