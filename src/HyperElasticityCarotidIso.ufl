# Copyright (C) 2009-2010 Harish Narayanan and Garth N. Wells
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# Modified by Anders Logg 2011
#
# First added:  2009-09-29
# Last changed: 2011-06-28
#
# The bilinear form a(du, v) and linear form L(v) for
# a hyperelastic model.
#
# Compile this form with FFC: ffc -l dolfin -fsplit -fquadrature_degree=2 -feliminate_zeros -fprecompute_basis_const -fprecompute_ip_const HyperElasticity.ufl
# ffc -l dolfin  -fquadrature_degree=1 -feliminate_zeros -fprecompute_basis_const -fprecompute_ip_const -fsplit HyperElasticityA.ufl

# Function spaces
cell = tetrahedron
VecCG = VectorElement("Lagrange", cell, 2)
DG = FiniteElement("Lagrange", cell, 1)

# Trial and test functions
du = TrialFunction(VecCG)     # Incremental displacement
v  = TestFunction(VecCG)      # Test function

# Functions
u = Coefficient(VecCG)        # Displacement from previous iteration
B = VectorConstant(cell)        # Body force per unit volume
#T = VectorConstant(cell)        # Traction force on the boundary

# Elasticity parameters
c1 = Constant(cell)
epsilon1 = Constant(cell)
epsilon2 = Constant(cell)

beta1 = Constant(cell)
eta1 = Constant(cell)
delta1 = Constant(cell)
delta2 = Constant(cell)
pressure = Constant(cell)

#
# Kinematics
n = FacetNormal(cell)
d = u.geometric_dimension()
I = Identity(d)                 # Identity tensor
F = I + grad(u)                 # Deformation gradient
C = F.T*F                       # Right Cauchy-Green tensor
C = variable(C)

# Invariants of deformation tensors
I1 = tr(C)
J  = det(F)
I2 = tr(cofac(C))
I3 = det(C)
I3_ = I3**(1./3.)

# Stored strain energy density (compressible neo-Hookean model)
psi = c1*(I1/I3_ -3.) + epsilon1*((I3**epsilon2) + (I3**(-epsilon2))-2.)
psi_pla = beta1*I1 +eta1*I2+delta1*I3 -delta2*ln(I3)
#
invF = inv(F)
#T = -pressure*cofac(F)*n
T = -pressure*n

#Pi = psi*dx(1) +psi_pla*dx(2)- inner(B, u)*dx
Pi = psi*dx - inner(B,u)*dx #- inner(T,u)*ds(3)

# First variation of Pi (directional derivative about u in the direction of v)
Res = derivative(Pi, u, v) - inner(T,v)*ds(3)

# Compute Jacobian of F
Jac = derivative(Res, u, du)

#psi_1  = c1 * (I3**(-1./3.))
#psi_3  = -1./3. * c1 * I1 * (I3**(-4./3.)) + epsilon1*epsilon2*(I3**(epsilon2-1) -I3**(-epsilon2-1)) 
#psi_11 = 0
#psi_33 = 4./9. * c1 * I1* (I3**(-7./3.)) + epsilon1*epsilon2* ( (I3**(epsilon2-2)) * (epsilon2-1) + (I3**(-epsilon2-2)) * (epsilon2+1) ) 
#psi_13 =  -1./3. * c1 * (I3**(-4./3.))
#psi_31 = psi_13 

#invF = inv(F)
#S = psi_1*I + psi_3 * cofac(C) = psi_1*I + psi_3 * J**2 * inv(F)* inv(F.T)
#S =  2*(psi_1*I + psi_3 * I3 * invF* invF.T)
#P = 2*(psi_1 *F + psi_3 * I3 * invF.T)
#Res = inner(P, grad(v))*dx - inner(B,v)*dx - inner(T,v)*ds(3) 

#Jac = psi_1 * 2. * inner(grad(du), grad(v)) *dx\
#  + psi_3 * I3 * (4.*inner(invF.T, grad(du)) * inner(invF.T, grad(v))\
#                    - 2. *inner(invF*grad(du), grad(v).T*invF.T) )*dx\
#  + psi_13 * 4. * I3 * inner(F, grad(du)) *inner(invF.T, grad(v))*dx\
#  + psi_31 * 4. * I3 * inner(F, grad(v)) *inner(invF.T, grad(du))*dx\
#  + psi_33 * 4. * I3**2 * inner(invF.T,grad(v))*inner(invF.T, grad(du))*dx\
##  + psi_11 *4. * inner(F, grad(du)) * inner(F, grad(v))*dx
#Jac = psi_1 * 2. * inner(grad(du), grad(v)) *dx\
#    - 4./3. * c1 * I3**(-1./3.) * (inner(invF.T, grad(du)) * inner(F, grad(v))\
#                                    +inner(invF.T, grad(v)) * inner(F, grad(du)))*dx\
#    + 4.*(1./9. * c1 * I1 * I3**(-1./3.) + epsilon1 * epsilon2**2 *( I3**epsilon2 + I3**(-epsilon2)))\
#        * inner(invF.T, grad(du)) * inner(invF.T, grad(v))*dx\
#    - psi_3 * I3 *2. * inner(grad(du).T * invF.T, invF * grad(v))*dx\
#    + 4. *c1/I1**2 * I3**(-1./3.) * inner(F, grad(v)) * inner(F,grad(du))*dx\




# Trial and test functions
p = TrialFunction(DG)     # Incremental displacement
q  = TestFunction(DG)      # Test function

S = 2*diff(psi, C)
#S =  psi_1*I + psi_3 * J**2 * invF* invF.T
#sigma =  psi_1*F*F.T + psi_3 * J**2*I
sigma = 1./J*F*S*F.T

Mass_vms = p*q*dx

#L_vms = sqrt((sigma[1,1]**2 +sigma[2,2]**2+sigma[0,0]**2\
#    -sigma[1,1]*sigma[2,2]-sigma[1,1]*sigma[0,0]-sigma[2,2]*sigma[0,0]\
#    +3*(sigma[1,2]**2+sigma[1,0]**2+sigma[2,0]**2)))*q*dx(2)\
#    +sqrt((sigma_iso[1,1]**2 +sigma_iso[2,2]**2+sigma_iso[0,0]**2\
#    -sigma_iso[1,1]*sigma_iso[2,2]-sigma_iso[1,1]*sigma_iso[0,0]-sigma_iso[2,2]*sigma_iso[0,0]\
#    +3*(sigma_iso[1,2]**2+sigma_iso[1,0]**2+sigma_iso[2,0]**2)))*q*dx(1)


L_vms = sqrt((sigma[1,1]**2 +sigma[2,2]**2+sigma[0,0]**2\
    -sigma[1,1]*sigma[2,2]-sigma[1,1]*sigma[0,0]-sigma[2,2]*sigma[0,0]\
    +3*(sigma[1,2]**2+sigma[1,0]**2+sigma[2,0]**2)))*q*dx

elements = [VecCG, DG]
forms = [Pi, Jac, Res, Mass_vms, L_vms]

