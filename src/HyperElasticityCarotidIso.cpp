// This code conforms with the UFC specification version 2017.2.0.dev0
// and was automatically generated by FFC version 2017.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   external_include_dirs:          ''
//   external_includes:              ''
//   external_libraries:             ''
//   external_library_dirs:          ''
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              4
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          True

#include "HyperElasticityCarotidIso.h"

hyperelasticitycarotidiso_finite_element_0::hyperelasticitycarotidiso_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticitycarotidiso_finite_element_0::~hyperelasticitycarotidiso_finite_element_0()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_finite_element_0::signature() const
{
    return "FiniteElement('Real', tetrahedron, 0)";
}

ufc::shape hyperelasticitycarotidiso_finite_element_0::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::space_dimension() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::value_size() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_0::degree() const
{
    return 0;
}

const char * hyperelasticitycarotidiso_finite_element_0::family() const
{
    return "Real";
}

void hyperelasticitycarotidiso_finite_element_0::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
}

void hyperelasticitycarotidiso_finite_element_0::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
}

void hyperelasticitycarotidiso_finite_element_0::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void hyperelasticitycarotidiso_finite_element_0::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
}

void hyperelasticitycarotidiso_finite_element_0::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
}

void hyperelasticitycarotidiso_finite_element_0::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
}

void hyperelasticitycarotidiso_finite_element_0::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
}

double hyperelasticitycarotidiso_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticitycarotidiso_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

void hyperelasticitycarotidiso_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

void hyperelasticitycarotidiso_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
}

void hyperelasticitycarotidiso_finite_element_0::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
}

std::size_t hyperelasticitycarotidiso_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_0::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_0::create() const
{
    return new hyperelasticitycarotidiso_finite_element_0();
}


hyperelasticitycarotidiso_finite_element_1::hyperelasticitycarotidiso_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticitycarotidiso_finite_element_1::~hyperelasticitycarotidiso_finite_element_1()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Real', tetrahedron, 0), dim=3)";
}

ufc::shape hyperelasticitycarotidiso_finite_element_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::space_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t hyperelasticitycarotidiso_finite_element_1::value_size() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t hyperelasticitycarotidiso_finite_element_1::reference_value_size() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_1::degree() const
{
    return 0;
}

const char * hyperelasticitycarotidiso_finite_element_1::family() const
{
    return "Real";
}

void hyperelasticitycarotidiso_finite_element_1::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points * 3 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[3 * 3 * ip] += coefficients0[0][0] * basisvalues0[0];
        reference_values[3 * 3 * ip + 3 + 1] += coefficients0[0][0] * basisvalues0[0];
        reference_values[3 * 3 * ip + 3 * 2 + 2] += coefficients0[0][0] * basisvalues0[0];
    }
}

void hyperelasticitycarotidiso_finite_element_1::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives * 3, 0.0);
    if (order > 0)
        return;
}

void hyperelasticitycarotidiso_finite_element_1::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    std::fill_n(values, num_points * 3 * 3, 0.0);
    const std::size_t reference_offsets[3] = { 0, 1, 2 };
    const std::size_t physical_offsets[3] = { 0, 1, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * 3 * ip + 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[3 * 3 * ip + 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void hyperelasticitycarotidiso_finite_element_1::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_1::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void hyperelasticitycarotidiso_finite_element_1::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
}

void hyperelasticitycarotidiso_finite_element_1::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticitycarotidiso_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 2:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticitycarotidiso_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[1] = vals[1];
    values[2] = vals[2];
}

void hyperelasticitycarotidiso_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[0];
    vertex_values[6] = dof_values[0];
    vertex_values[9] = dof_values[0];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[1];
    vertex_values[4] = dof_values[1];
    vertex_values[7] = dof_values[1];
    vertex_values[10] = dof_values[1];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[2];
    vertex_values[5] = dof_values[2];
    vertex_values[8] = dof_values[2];
    vertex_values[11] = dof_values[2];
}

void hyperelasticitycarotidiso_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 2] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 2 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 2 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
}

void hyperelasticitycarotidiso_finite_element_1::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[9] = { 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 9, reference_dof_coordinates);
}

std::size_t hyperelasticitycarotidiso_finite_element_1::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 2:
        return new hyperelasticitycarotidiso_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_1::create() const
{
    return new hyperelasticitycarotidiso_finite_element_1();
}


hyperelasticitycarotidiso_finite_element_2::hyperelasticitycarotidiso_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticitycarotidiso_finite_element_2::~hyperelasticitycarotidiso_finite_element_2()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 2)";
}

ufc::shape hyperelasticitycarotidiso_finite_element_2::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::space_dimension() const
{
    return 10;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::value_size() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_2::degree() const
{
    return 2;
}

const char * hyperelasticitycarotidiso_finite_element_2::family() const
{
    return "Lagrange";
}

void hyperelasticitycarotidiso_finite_element_2::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    for (std::size_t k = 0; k < num_points * 10; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= 0.8660254037844386;
        basisvalues2[3] *= 1.118033988749895;
        basisvalues2[9] *= 1.3228756555322954;
        basisvalues2[2] *= 1.5811388300841898;
        basisvalues2[8] *= 1.8708286933869707;
        basisvalues2[7] *= 2.29128784747792;
        basisvalues2[1] *= 2.7386127875258306;
        basisvalues2[6] *= 3.24037034920393;
        basisvalues2[5] *= 3.968626966596886;
        basisvalues2[4] *= 5.123475382979799;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 6] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 7] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 8] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 9] += coefficients9[0][r] * basisvalues2[r];
    }
}

void hyperelasticitycarotidiso_finite_element_2::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 10 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    const std::size_t reference_offset[10] = {};
    const std::size_t num_components[10] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= 0.8660254037844386;
        basisvalues2[3] *= 1.118033988749895;
        basisvalues2[9] *= 1.3228756555322954;
        basisvalues2[2] *= 1.5811388300841898;
        basisvalues2[8] *= 1.8708286933869707;
        basisvalues2[7] *= 2.29128784747792;
        basisvalues2[1] *= 2.7386127875258306;
        basisvalues2[6] *= 3.24037034920393;
        basisvalues2[5] *= 3.968626966596886;
        basisvalues2[4] *= 5.123475382979799;
        double aux_dmats0_basisvalues2[10] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 10; ++t)
                for (std::size_t u = 0; u < 10; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[10][10];
                for (std::size_t t = 0; t < 10; ++t)
                    for (std::size_t u = 0; u < 10; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 10; ++t)
                    for (std::size_t u = 0; u < 10; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 10; ++t)
                    for (std::size_t u = 0; u < 10; ++u)
                        for (std::size_t tu = 0; tu < 10; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 10; ++s)
                for (std::size_t t = 0; t < 10; ++t)
                    aux_dmats0_basisvalues2[s] += dmats[s][t] * basisvalues2[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 10; ++i)
        {
            double derivatives[9];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[10 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void hyperelasticitycarotidiso_finite_element_2::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    std::fill_n(values, num_points * 10 * num_derivatives, 0.0);
    const std::size_t reference_offsets[10] = {};
    const std::size_t physical_offsets[10] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[9][9];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 10; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[10 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[10 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void hyperelasticitycarotidiso_finite_element_2::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_2::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void hyperelasticitycarotidiso_finite_element_2::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[9][2];
    for (unsigned int row = 0; row < 9; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[9][9];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_2::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 10; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticitycarotidiso_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticitycarotidiso_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
}

void hyperelasticitycarotidiso_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void hyperelasticitycarotidiso_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
}

void hyperelasticitycarotidiso_finite_element_2::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[30] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
}

std::size_t hyperelasticitycarotidiso_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_2::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_2::create() const
{
    return new hyperelasticitycarotidiso_finite_element_2();
}


hyperelasticitycarotidiso_finite_element_3::hyperelasticitycarotidiso_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticitycarotidiso_finite_element_3::~hyperelasticitycarotidiso_finite_element_3()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_finite_element_3::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3)";
}

ufc::shape hyperelasticitycarotidiso_finite_element_3::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::space_dimension() const
{
    return 30;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::value_rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t hyperelasticitycarotidiso_finite_element_3::value_size() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t hyperelasticitycarotidiso_finite_element_3::reference_value_size() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_3::degree() const
{
    return 2;
}

const char * hyperelasticitycarotidiso_finite_element_3::family() const
{
    return "Lagrange";
}

void hyperelasticitycarotidiso_finite_element_3::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    for (std::size_t k = 0; k < num_points * 30 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= 0.8660254037844386;
        basisvalues2[3] *= 1.118033988749895;
        basisvalues2[9] *= 1.3228756555322954;
        basisvalues2[2] *= 1.5811388300841898;
        basisvalues2[8] *= 1.8708286933869707;
        basisvalues2[7] *= 2.29128784747792;
        basisvalues2[1] *= 2.7386127875258306;
        basisvalues2[6] *= 3.24037034920393;
        basisvalues2[5] *= 3.968626966596886;
        basisvalues2[4] *= 5.123475382979799;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 6] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 7] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 8] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 9] += coefficients9[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 10 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 11 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 12 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 13 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 14 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 15 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 16 + 1] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 17 + 1] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 18 + 1] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 19 + 1] += coefficients9[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 20 + 2] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 21 + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 22 + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 23 + 2] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 24 + 2] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 25 + 2] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 26 + 2] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 27 + 2] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 28 + 2] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 29 + 2] += coefficients9[0][r] * basisvalues2[r];
    }
}

void hyperelasticitycarotidiso_finite_element_3::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 30 * num_derivatives * 3, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    const std::size_t reference_offset[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t num_components[30] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= 0.8660254037844386;
        basisvalues2[3] *= 1.118033988749895;
        basisvalues2[9] *= 1.3228756555322954;
        basisvalues2[2] *= 1.5811388300841898;
        basisvalues2[8] *= 1.8708286933869707;
        basisvalues2[7] *= 2.29128784747792;
        basisvalues2[1] *= 2.7386127875258306;
        basisvalues2[6] *= 3.24037034920393;
        basisvalues2[5] *= 3.968626966596886;
        basisvalues2[4] *= 5.123475382979799;
        double aux_dmats0_basisvalues2[10] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 10; ++t)
                for (std::size_t u = 0; u < 10; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[10][10];
                for (std::size_t t = 0; t < 10; ++t)
                    for (std::size_t u = 0; u < 10; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 10; ++t)
                    for (std::size_t u = 0; u < 10; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 10; ++t)
                    for (std::size_t u = 0; u < 10; ++u)
                        for (std::size_t tu = 0; tu < 10; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 10; ++s)
                for (std::size_t t = 0; t < 10; ++t)
                    aux_dmats0_basisvalues2[s] += dmats[s][t] * basisvalues2[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 30; ++i)
        {
            double derivatives[9];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 26:
                // Compute reference derivatives for dof 26.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 27:
                // Compute reference derivatives for dof 27.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 28:
                // Compute reference derivatives for dof 28.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            case 29:
                // Compute reference derivatives for dof 29.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux_dmats0_basisvalues2[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[30 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void hyperelasticitycarotidiso_finite_element_3::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    std::fill_n(values, num_points * 30 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t physical_offsets[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[9][9];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 30; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[30 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[30 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void hyperelasticitycarotidiso_finite_element_3::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_3::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 30; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void hyperelasticitycarotidiso_finite_element_3::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[9][2];
    for (unsigned int row = 0; row < 9; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[9][9];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896251, -0.06085806194501846, -0.03513641844631533, -0.02484519974999767, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.02909571869813232, 0.02375655483665995, 0.01679842102263233};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.05039526306789695, -0.04114755998989117, 0.02909571869813231, 0.02375655483665995, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896254, 0.0, 0.07027283689263066, -0.0248451997499977, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {-0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1007905261357939};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.1187827741832997, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.102868899974728, 0.0, -0.05939138709164987, -0.0671936840905293};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758503, 0.1217161238900369, 0.07027283689263064, -0.09938079899999064, 0.0, 0.1007905261357939, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758505, -0.1217161238900369, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.1028688999747279, 0.0, -0.05939138709164985, -0.06719368409052928};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758502, -0.121716123890037, 0.07027283689263064, -0.09938079899999064, 0.0, -0.100790526135794, 0.02057377999494559, -0.08728715609439693, -0.01187827741832997, 0.01679842102263232};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      double tmp1 = 0.25*(Y + Z)*(Y + Z);
      double tmp2 = 0.5*(1.0 + Z + 2.0*Y);
      double tmp3 = 0.5*(1.0 - Z);
      double tmp4 = tmp3*tmp3;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[4] = 1.5*tmp0*basisvalues[1] - 0.5*tmp1*basisvalues[0];
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[5] = (0.5*(2.0 + 3.0*Y + Z) + 1.0*(1.0 + Y))*basisvalues[1];
      basisvalues[7] = (1.666666666666667*tmp2 + 0.1111111111111111*tmp3)*basisvalues[2] - 0.5555555555555556*tmp4*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[8] = (3.0*Z + 2.0)*basisvalues[2];
      basisvalues[6] = (3.0*Z + 2.0)*basisvalues[1];
      basisvalues[9] = basisvalues[3]*(0.3125 + 1.875*Z) - 0.5625*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[9] *= std::sqrt(1.75);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[8] *= std::sqrt(3.5);
      basisvalues[7] *= std::sqrt(5.25);
      basisvalues[1] *= std::sqrt(7.5);
      basisvalues[6] *= std::sqrt(10.5);
      basisvalues[5] *= std::sqrt(15.75);
      basisvalues[4] *= std::sqrt(26.25);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.2309401076758504, 0.0, -0.1405456737852613, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.02909571869813231, 0.02375655483665995, 0.01679842102263231};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 11.22497216032182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.741657386773954, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477961, 7.245688373094726, 4.18330013267038, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693386977, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.645751311064624, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.240370349203942, 0.0, 0.0, 7.529940238806685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.163977794943222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.291287847477916, 1.449137674618943, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.870828693387013, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.322875655532307, 0.0, 3.864367132317191, -0.3415650255319899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.080123449734634, 0.0, 7.099295739719544, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.818813079129908, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_3::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 30; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[27];
    for (unsigned int r = 0; r < 27; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 30; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticitycarotidiso_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 14:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 15:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 16:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 17:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 18:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 19:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 20:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 21:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 22:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 23:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 24:
      {
        y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 25:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 26:
      {
        y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 27:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 28:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 29:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
      y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticitycarotidiso_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[10] = vals[1];
    values[20] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[11] = vals[1];
    values[21] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[12] = vals[1];
    values[22] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[13] = vals[1];
    values[23] = vals[2];
    y[0] = 0.5*coordinate_dofs[6] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[7] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[8] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    values[14] = vals[1];
    values[24] = vals[2];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    values[15] = vals[1];
    values[25] = vals[2];
    y[0] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[4] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[5] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    values[16] = vals[1];
    values[26] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[9];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[10];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    values[17] = vals[1];
    values[27] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[6];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[7];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    values[18] = vals[1];
    values[28] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[3];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[4];
    y[2] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    values[19] = vals[1];
    values[29] = vals[2];
}

void hyperelasticitycarotidiso_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[4] = dof_values[11];
    vertex_values[7] = dof_values[12];
    vertex_values[10] = dof_values[13];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[20];
    vertex_values[5] = dof_values[21];
    vertex_values[8] = dof_values[22];
    vertex_values[11] = dof_values[23];
}

void hyperelasticitycarotidiso_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[0];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 11] = coordinate_dofs[3];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 12] = coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 13] = coordinate_dofs[9];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 17] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 20] = coordinate_dofs[0];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 21] = coordinate_dofs[3];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 22] = coordinate_dofs[6];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 23] = coordinate_dofs[9];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 24] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 24 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 24 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 25] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 25 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 25 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 26] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 26 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 26 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 27] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 27 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 27 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 28] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 28 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 28 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 29] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 29 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 29 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
}

void hyperelasticitycarotidiso_finite_element_3::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[90] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0 };
    std::copy_n(dof_X, 90, reference_dof_coordinates);
}

std::size_t hyperelasticitycarotidiso_finite_element_3::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_2();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_2();
    case 2:
        return new hyperelasticitycarotidiso_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_3::create() const
{
    return new hyperelasticitycarotidiso_finite_element_3();
}


hyperelasticitycarotidiso_finite_element_4::hyperelasticitycarotidiso_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticitycarotidiso_finite_element_4::~hyperelasticitycarotidiso_finite_element_4()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_finite_element_4::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 1)";
}

ufc::shape hyperelasticitycarotidiso_finite_element_4::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::space_dimension() const
{
    return 4;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::value_rank() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::value_size() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::reference_value_rank() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::reference_value_size() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_4::degree() const
{
    return 1;
}

const char * hyperelasticitycarotidiso_finite_element_4::family() const
{
    return "Lagrange";
}

void hyperelasticitycarotidiso_finite_element_4::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
}

void hyperelasticitycarotidiso_finite_element_4::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double aux_dmats0_basisvalues1[4] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 4; ++t)
                for (std::size_t u = 0; u < 4; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[4][4];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        for (std::size_t tu = 0; tu < 4; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 4; ++s)
                for (std::size_t t = 0; t < 4; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void hyperelasticitycarotidiso_finite_element_4::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void hyperelasticitycarotidiso_finite_element_4::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_4::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void hyperelasticitycarotidiso_finite_element_4::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_4::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticitycarotidiso_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticitycarotidiso_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

void hyperelasticitycarotidiso_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void hyperelasticitycarotidiso_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
}

void hyperelasticitycarotidiso_finite_element_4::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t hyperelasticitycarotidiso_finite_element_4::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_4::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_4::create() const
{
    return new hyperelasticitycarotidiso_finite_element_4();
}


hyperelasticitycarotidiso_finite_element_5::hyperelasticitycarotidiso_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

hyperelasticitycarotidiso_finite_element_5::~hyperelasticitycarotidiso_finite_element_5()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_finite_element_5::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::shape hyperelasticitycarotidiso_finite_element_5::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::space_dimension() const
{
    return 12;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::value_rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t hyperelasticitycarotidiso_finite_element_5::value_size() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::reference_value_rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t hyperelasticitycarotidiso_finite_element_5::reference_value_size() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_finite_element_5::degree() const
{
    return 1;
}

const char * hyperelasticitycarotidiso_finite_element_5::family() const
{
    return "Lagrange";
}

void hyperelasticitycarotidiso_finite_element_5::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
}

void hyperelasticitycarotidiso_finite_element_5::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= 0.8660254037844386;
        basisvalues1[3] *= 1.118033988749895;
        basisvalues1[2] *= 1.5811388300841898;
        basisvalues1[1] *= 2.7386127875258306;
        double aux_dmats0_basisvalues1[4] = {};
        for (std::size_t r = 0; r < num_derivatives; ++r)
        {
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4];
            // Initialize dmats.
            std::size_t comb = combinations[order - 1][r][0];
            for (std::size_t t = 0; t < 4; ++t)
                for (std::size_t u = 0; u < 4; ++u)
                    dmats[t][u] = dmats0[comb][t][u];
            // Looping derivative order to generate dmats.
            for (std::size_t s = 1; s < order; ++s)
            {
                // Store previous dmats matrix.
                double dmats_old[4][4];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats_old[t][u] = dmats[t][u];
                // Resetting dmats.
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        dmats[t][u] = 0.0;
                // Update dmats using an inner product.
                comb = combinations[order - 1][r][s];
                for (std::size_t t = 0; t < 4; ++t)
                    for (std::size_t u = 0; u < 4; ++u)
                        for (std::size_t tu = 0; tu < 4; ++tu)
                            dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
            }
            for (std::size_t s = 0; s < 4; ++s)
                for (std::size_t t = 0; t < 4; ++t)
                    aux_dmats0_basisvalues1[s] += dmats[s][t] * basisvalues1[t];
        }
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3];
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux_dmats0_basisvalues1[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void hyperelasticitycarotidiso_finite_element_5::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void hyperelasticitycarotidiso_finite_element_5::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_5::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void hyperelasticitycarotidiso_finite_element_5::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
}

void hyperelasticitycarotidiso_finite_element_5::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double hyperelasticitycarotidiso_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

void hyperelasticitycarotidiso_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
}

void hyperelasticitycarotidiso_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

void hyperelasticitycarotidiso_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
}

void hyperelasticitycarotidiso_finite_element_5::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
}

std::size_t hyperelasticitycarotidiso_finite_element_5::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_5::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_4();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_4();
    case 2:
        return new hyperelasticitycarotidiso_finite_element_4();
    default:
        return nullptr;
    }
}

ufc::finite_element * hyperelasticitycarotidiso_finite_element_5::create() const
{
    return new hyperelasticitycarotidiso_finite_element_5();
}


hyperelasticitycarotidiso_dofmap_0::hyperelasticitycarotidiso_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticitycarotidiso_dofmap_0::~hyperelasticitycarotidiso_dofmap_0()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
}

bool hyperelasticitycarotidiso_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_0::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_dofmap_0::num_global_support_dofs() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_dofmap_0::num_element_support_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_0::num_element_dofs() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_dofmap_0::num_facet_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_0::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_0::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void hyperelasticitycarotidiso_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 0;
}

void hyperelasticitycarotidiso_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void hyperelasticitycarotidiso_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_0::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
}

std::size_t hyperelasticitycarotidiso_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_0::create() const
{
    return new hyperelasticitycarotidiso_dofmap_0();
}


hyperelasticitycarotidiso_dofmap_1::hyperelasticitycarotidiso_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticitycarotidiso_dofmap_1::~hyperelasticitycarotidiso_dofmap_1()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Real', tetrahedron, 0), dim=3)";
}

bool hyperelasticitycarotidiso_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { false, false, false, true };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_1::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_1::num_global_support_dofs() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_1::num_element_support_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_1::num_element_dofs() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_1::num_facet_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_1::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 3 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_1::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 0, 0, 0, 3 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void hyperelasticitycarotidiso_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset;
    offset += 1;
    dofs[1] = offset;
    offset += 1;
    dofs[2] = offset;
    offset += 1;
}

void hyperelasticitycarotidiso_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    // Do nothing
}

void hyperelasticitycarotidiso_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_1::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
}

std::size_t hyperelasticitycarotidiso_dofmap_1::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 2:
        return new hyperelasticitycarotidiso_dofmap_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_1::create() const
{
    return new hyperelasticitycarotidiso_dofmap_1();
}


hyperelasticitycarotidiso_dofmap_2::hyperelasticitycarotidiso_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticitycarotidiso_dofmap_2::~hyperelasticitycarotidiso_dofmap_2()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 2)";
}

bool hyperelasticitycarotidiso_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, true, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_2::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + num_global_entities[1];
}

std::size_t hyperelasticitycarotidiso_dofmap_2::num_global_support_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_2::num_element_support_dofs() const
{
    return 10;
}

std::size_t hyperelasticitycarotidiso_dofmap_2::num_element_dofs() const
{
    return 10;
}

std::size_t hyperelasticitycarotidiso_dofmap_2::num_facet_dofs() const
{
    return 6;
}

std::size_t hyperelasticitycarotidiso_dofmap_2::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 1, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_2::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 3, 6, 10 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void hyperelasticitycarotidiso_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
}

void hyperelasticitycarotidiso_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            break;
        case 1:
            dofs[0] = 5;
            break;
        case 2:
            dofs[0] = 6;
            break;
        case 3:
            dofs[0] = 7;
            break;
        case 4:
            dofs[0] = 8;
            break;
        case 5:
            dofs[0] = 9;
            break;
        }
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_2::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 6;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 7;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 7;
            dofs[5] = 8;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 7;
            dofs[5] = 9;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            break;
        }
        break;
    }
}

std::size_t hyperelasticitycarotidiso_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_2::create() const
{
    return new hyperelasticitycarotidiso_dofmap_2();
}


hyperelasticitycarotidiso_dofmap_3::hyperelasticitycarotidiso_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticitycarotidiso_dofmap_3::~hyperelasticitycarotidiso_dofmap_3()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_dofmap_3::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3)";
}

bool hyperelasticitycarotidiso_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, true, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_3::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3 * num_global_entities[0] + 3 * num_global_entities[1];
}

std::size_t hyperelasticitycarotidiso_dofmap_3::num_global_support_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_3::num_element_support_dofs() const
{
    return 30;
}

std::size_t hyperelasticitycarotidiso_dofmap_3::num_element_dofs() const
{
    return 30;
}

std::size_t hyperelasticitycarotidiso_dofmap_3::num_facet_dofs() const
{
    return 18;
}

std::size_t hyperelasticitycarotidiso_dofmap_3::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 3, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_3::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 9, 18, 30 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void hyperelasticitycarotidiso_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[10] = offset + entity_indices[0][0];
    dofs[11] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    dofs[13] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[14] = offset + entity_indices[1][0];
    dofs[15] = offset + entity_indices[1][1];
    dofs[16] = offset + entity_indices[1][2];
    dofs[17] = offset + entity_indices[1][3];
    dofs[18] = offset + entity_indices[1][4];
    dofs[19] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    dofs[23] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[24] = offset + entity_indices[1][0];
    dofs[25] = offset + entity_indices[1][1];
    dofs[26] = offset + entity_indices[1][2];
    dofs[27] = offset + entity_indices[1][3];
    dofs[28] = offset + entity_indices[1][4];
    dofs[29] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
}

void hyperelasticitycarotidiso_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 15;
        dofs[11] = 16;
        dofs[12] = 21;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 25;
        dofs[17] = 26;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
        dofs[6] = 10;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 17;
        dofs[11] = 18;
        dofs[12] = 20;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 27;
        dofs[17] = 28;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 13;
        dofs[9] = 15;
        dofs[10] = 17;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 23;
        dofs[15] = 25;
        dofs[16] = 27;
        dofs[17] = 29;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 12;
        dofs[9] = 16;
        dofs[10] = 18;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 22;
        dofs[15] = 26;
        dofs[16] = 28;
        dofs[17] = 29;
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 13;
            dofs[2] = 23;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 14;
            dofs[2] = 24;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 15;
            dofs[2] = 25;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 16;
            dofs[2] = 26;
            break;
        case 3:
            dofs[0] = 7;
            dofs[1] = 17;
            dofs[2] = 27;
            break;
        case 4:
            dofs[0] = 8;
            dofs[1] = 18;
            dofs[2] = 28;
            break;
        case 5:
            dofs[0] = 9;
            dofs[1] = 19;
            dofs[2] = 29;
            break;
        }
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_3::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 13;
            dofs[2] = 23;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 22;
            dofs[7] = 23;
            dofs[8] = 24;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 11;
            dofs[4] = 13;
            dofs[5] = 15;
            dofs[6] = 21;
            dofs[7] = 23;
            dofs[8] = 25;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 6;
            dofs[3] = 11;
            dofs[4] = 12;
            dofs[5] = 16;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 26;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 17;
            dofs[6] = 20;
            dofs[7] = 23;
            dofs[8] = 27;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 10;
            dofs[4] = 12;
            dofs[5] = 18;
            dofs[6] = 20;
            dofs[7] = 22;
            dofs[8] = 28;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 9;
            dofs[3] = 10;
            dofs[4] = 11;
            dofs[5] = 19;
            dofs[6] = 20;
            dofs[7] = 21;
            dofs[8] = 29;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 14;
            dofs[10] = 15;
            dofs[11] = 16;
            dofs[12] = 21;
            dofs[13] = 22;
            dofs[14] = 23;
            dofs[15] = 24;
            dofs[16] = 25;
            dofs[17] = 26;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 7;
            dofs[5] = 8;
            dofs[6] = 10;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 14;
            dofs[10] = 17;
            dofs[11] = 18;
            dofs[12] = 20;
            dofs[13] = 22;
            dofs[14] = 23;
            dofs[15] = 24;
            dofs[16] = 27;
            dofs[17] = 28;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 7;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 13;
            dofs[9] = 15;
            dofs[10] = 17;
            dofs[11] = 19;
            dofs[12] = 20;
            dofs[13] = 21;
            dofs[14] = 23;
            dofs[15] = 25;
            dofs[16] = 27;
            dofs[17] = 29;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 12;
            dofs[9] = 16;
            dofs[10] = 18;
            dofs[11] = 19;
            dofs[12] = 20;
            dofs[13] = 21;
            dofs[14] = 22;
            dofs[15] = 26;
            dofs[16] = 28;
            dofs[17] = 29;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            break;
        }
        break;
    }
}

std::size_t hyperelasticitycarotidiso_dofmap_3::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_2();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_2();
    case 2:
        return new hyperelasticitycarotidiso_dofmap_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_3::create() const
{
    return new hyperelasticitycarotidiso_dofmap_3();
}


hyperelasticitycarotidiso_dofmap_4::hyperelasticitycarotidiso_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticitycarotidiso_dofmap_4::~hyperelasticitycarotidiso_dofmap_4()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_dofmap_4::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
}

bool hyperelasticitycarotidiso_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_4::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t hyperelasticitycarotidiso_dofmap_4::num_global_support_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_4::num_element_support_dofs() const
{
    return 4;
}

std::size_t hyperelasticitycarotidiso_dofmap_4::num_element_dofs() const
{
    return 4;
}

std::size_t hyperelasticitycarotidiso_dofmap_4::num_facet_dofs() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_4::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_4::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void hyperelasticitycarotidiso_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
}

void hyperelasticitycarotidiso_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_4::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
}

std::size_t hyperelasticitycarotidiso_dofmap_4::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_4::create() const
{
    return new hyperelasticitycarotidiso_dofmap_4();
}


hyperelasticitycarotidiso_dofmap_5::hyperelasticitycarotidiso_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

hyperelasticitycarotidiso_dofmap_5::~hyperelasticitycarotidiso_dofmap_5()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_dofmap_5::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

bool hyperelasticitycarotidiso_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_5::topological_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3 * num_global_entities[0];
}

std::size_t hyperelasticitycarotidiso_dofmap_5::num_global_support_dofs() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_dofmap_5::num_element_support_dofs() const
{
    return 12;
}

std::size_t hyperelasticitycarotidiso_dofmap_5::num_element_dofs() const
{
    return 12;
}

std::size_t hyperelasticitycarotidiso_dofmap_5::num_facet_dofs() const
{
    return 9;
}

std::size_t hyperelasticitycarotidiso_dofmap_5::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t hyperelasticitycarotidiso_dofmap_5::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void hyperelasticitycarotidiso_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
}

void hyperelasticitycarotidiso_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
}

void hyperelasticitycarotidiso_dofmap_5::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
}

std::size_t hyperelasticitycarotidiso_dofmap_5::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_4();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_4();
    case 2:
        return new hyperelasticitycarotidiso_dofmap_4();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_dofmap_5::create() const
{
    return new hyperelasticitycarotidiso_dofmap_5();
}


hyperelasticitycarotidiso_coordinate_mapping_5::hyperelasticitycarotidiso_coordinate_mapping_5() : ufc::coordinate_mapping()
{
    // Do nothing
}

hyperelasticitycarotidiso_coordinate_mapping_5::~hyperelasticitycarotidiso_coordinate_mapping_5()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_coordinate_mapping_5::signature() const
{
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::coordinate_mapping * hyperelasticitycarotidiso_coordinate_mapping_5::create() const
{
    return new hyperelasticitycarotidiso_coordinate_mapping_5();
}

std::size_t hyperelasticitycarotidiso_coordinate_mapping_5::geometric_dimension() const
{
    return 3;
}

std::size_t hyperelasticitycarotidiso_coordinate_mapping_5::topological_dimension() const
{
    return 3;
}

ufc::shape hyperelasticitycarotidiso_coordinate_mapping_5::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

ufc::finite_element * hyperelasticitycarotidiso_coordinate_mapping_5::create_coordinate_finite_element() const
{
    return new hyperelasticitycarotidiso_finite_element_5();
}

ufc::dofmap * hyperelasticitycarotidiso_coordinate_mapping_5::create_coordinate_dofmap() const
{
    return new hyperelasticitycarotidiso_dofmap_5();
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_physical_coordinates(
    double * x, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    hyperelasticitycarotidiso_finite_element_4 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_reference_coordinates(
    double * X, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_reference_geometry(
    double * X, double * J, double * detJ, double * K, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_jacobians(
    double * J, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    hyperelasticitycarotidiso_finite_element_4 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_jacobian_determinants(
    double * detJ, std::size_t num_points,
    const double * J,
    int cell_orientation) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_jacobian_inverses(
    double * K, std::size_t num_points,
    const double * J, const double * detJ) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_geometry(
    double * x, double * J, double * detJ, double * K, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs, int cell_orientation) const
{
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
}

void hyperelasticitycarotidiso_coordinate_mapping_5::compute_midpoint_geometry(
    double * x, double * J,
    const double * coordinate_dofs) const
{
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
}


hyperelasticitycarotidiso_cell_integral_0_otherwise::hyperelasticitycarotidiso_cell_integral_0_otherwise() : ufc::cell_integral()
{

}

hyperelasticitycarotidiso_cell_integral_0_otherwise::~hyperelasticitycarotidiso_cell_integral_0_otherwise()
{

}

const std::vector<bool> & hyperelasticitycarotidiso_cell_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, false, true, true, true});
return enabled;
}

void hyperelasticitycarotidiso_cell_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 12
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE15_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000002, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000006, 0.0, -1.999999999999999, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000005, 1.999999999999999, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000005, 0.0, 1.999999999999999, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991835, -0.5978929390991861, 0.4021070609008202, 2.793678817297555, 0.0, -0.402107060900818, -2.793678817297546 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008201, 0.4021070609008222, 2.391571756396729, -0.4021070609008185, -0.4021070609008175 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008153, 0.402107060900826, -2.39157175639673, -0.4021070609008163, -0.4021070609008194 },
            { 0.5978929390991834, -0.5978929390991863, 2.79367881729755, 0.4021070609008223, 0.0, -2.793678817297547, -0.4021070609008178 },
            { -0.2574914939727679, 0.2574914939727652, 1.25749149397277, 0.2275255180817003, 0.0, -1.257491493972769, -0.2275255180816939 },
            { 0.772474481918307, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972768, -1.257491493972768 },
            { -0.2574914939727679, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891074, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727683, 0.2574914939727655, 0.2275255180816932, 1.257491493972775, 0.0, -0.2275255180816933, -1.25749149397277 } } };
    alignas(32) static const double FE15_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000004, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 0.0, 1.999999999999997, -2.000000000000002 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991842, -0.5978929390991845, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991848, 0.4021070609008187, 0.4021070609008225, -0.4021070609008185, 2.391571756396729, -0.402107060900818 },
            { 0.5978929390991847, -0.5978929390991838, 2.793678817297549, 0.4021070609008207, -2.793678817297548, 0.0, -0.4021070609008185 },
            { 0.5978929390991841, 1.793678817297543, 0.402107060900819, 0.4021070609008253, -0.4021070609008185, -2.39157175639673, -0.4021070609008197 },
            { -0.2574914939727678, 0.2574914939727657, 1.25749149397277, 0.2275255180816988, -1.25749149397277, 0.0, -0.2275255180816941 },
            { 0.7724744819183076, 0.2574914939727661, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727673, 0.2574914939727654, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.25749149397277 },
            { -0.2574914939727672, -0.7724744819183081, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE15_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -1.999999999999996 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -2.000000000000003 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 2.000000000000001 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999996 },
            { 0.5978929390991843, 1.793678817297546, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396731 },
            { -1.793678817297545, -0.5978929390991818, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396727 },
            { 0.5978929390991843, -0.5978929390991823, 2.79367881729755, 0.4021070609008178, -2.793678817297549, -0.4021070609008179, 0.0 },
            { 0.5978929390991838, -0.5978929390991845, 0.4021070609008183, 2.793678817297549, -0.4021070609008183, -2.79367881729755, 0.0 },
            { -0.2574914939727669, -0.7724744819183068, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183075, 0.2574914939727674, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727676, 0.2574914939727681, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727683, 0.2574914939727673, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.2275255180816939, 0.0 } } };
    alignas(32) static const double FE15_C0_Q14[1][14][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
            { -0.08031550417191763, 0.2771604624527405, -0.08031550417191768, -0.0803155041719177, 0.04042252210657349, 0.2808394945810975, 0.2808394945810974, 0.04042252210657362, 0.04042252210657341, 0.2808394945810972 },
            { 0.2771604624527406, -0.08031550417191766, -0.08031550417191771, -0.08031550417191771, 0.04042252210657353, 0.04042252210657352, 0.04042252210657354, 0.2808394945810975, 0.2808394945810973, 0.2808394945810972 },
            { -0.08031550417191761, -0.0803155041719177, -0.08031550417191774, 0.2771604624527406, 0.2808394945810973, 0.2808394945810974, 0.04042252210657356, 0.2808394945810972, 0.04042252210657342, 0.04042252210657358 },
            { -0.08031550417191761, -0.08031550417191767, 0.2771604624527405, -0.08031550417191773, 0.2808394945810974, 0.04042252210657359, 0.2808394945810974, 0.04042252210657361, 0.2808394945810971, 0.04042252210657359 },
            { -0.1167122663164589, -0.05041039684813044, -0.1167122663164589, -0.116712266316459, 0.3953212143534665, 0.07152785091236927, 0.07152785091236925, 0.3953212143534666, 0.3953212143534665, 0.07152785091236932 },
            { -0.05041039684813041, -0.1167122663164589, -0.1167122663164588, -0.1167122663164589, 0.3953212143534665, 0.3953212143534666, 0.3953212143534665, 0.07152785091236935, 0.07152785091236906, 0.07152785091236935 },
            { -0.1167122663164588, -0.1167122663164589, -0.1167122663164588, -0.05041039684813049, 0.07152785091236927, 0.07152785091236931, 0.3953212143534665, 0.07152785091236935, 0.3953212143534663, 0.3953212143534666 },
            { -0.1167122663164589, -0.1167122663164589, -0.05041039684813052, -0.1167122663164589, 0.0715278509123693, 0.3953212143534665, 0.07152785091236932, 0.3953212143534665, 0.07152785091236921, 0.3953212143534665 } } };
    alignas(32) static const double FE25_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q14[0][0][1];
    alignas(32) double sp[44];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = std::abs(sp[13]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c0 = w[0][0] * FE15_C0_D100_Q14[0][iq][0] + w[0][1] * FE15_C0_D100_Q14[0][iq][1] + w[0][5] * FE15_C0_D100_Q14[0][iq][2] + w[0][6] * FE15_C0_D100_Q14[0][iq][3] + w[0][7] * FE15_C0_D100_Q14[0][iq][4] + w[0][8] * FE15_C0_D100_Q14[0][iq][5] + w[0][9] * FE15_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE15_C0_D010_Q14[0][iq][0] + w[0][2] * FE15_C0_D010_Q14[0][iq][1] + w[0][4] * FE15_C0_D010_Q14[0][iq][2] + w[0][6] * FE15_C0_D010_Q14[0][iq][3] + w[0][7] * FE15_C0_D010_Q14[0][iq][4] + w[0][8] * FE15_C0_D010_Q14[0][iq][5] + w[0][9] * FE15_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE15_C0_D001_Q14[0][iq][0] + w[0][3] * FE15_C0_D001_Q14[0][iq][1] + w[0][4] * FE15_C0_D001_Q14[0][iq][2] + w[0][5] * FE15_C0_D001_Q14[0][iq][3] + w[0][7] * FE15_C0_D001_Q14[0][iq][4] + w[0][8] * FE15_C0_D001_Q14[0][iq][5] + w[0][9] * FE15_C0_D001_Q14[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE15_C0_D100_Q14[0][iq][0] + w[0][11] * FE15_C0_D100_Q14[0][iq][1] + w[0][15] * FE15_C0_D100_Q14[0][iq][2] + w[0][16] * FE15_C0_D100_Q14[0][iq][3] + w[0][17] * FE15_C0_D100_Q14[0][iq][4] + w[0][18] * FE15_C0_D100_Q14[0][iq][5] + w[0][19] * FE15_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE15_C0_D010_Q14[0][iq][0] + w[0][12] * FE15_C0_D010_Q14[0][iq][1] + w[0][14] * FE15_C0_D010_Q14[0][iq][2] + w[0][16] * FE15_C0_D010_Q14[0][iq][3] + w[0][17] * FE15_C0_D010_Q14[0][iq][4] + w[0][18] * FE15_C0_D010_Q14[0][iq][5] + w[0][19] * FE15_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE15_C0_D001_Q14[0][iq][0] + w[0][13] * FE15_C0_D001_Q14[0][iq][1] + w[0][14] * FE15_C0_D001_Q14[0][iq][2] + w[0][15] * FE15_C0_D001_Q14[0][iq][3] + w[0][17] * FE15_C0_D001_Q14[0][iq][4] + w[0][18] * FE15_C0_D001_Q14[0][iq][5] + w[0][19] * FE15_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE15_C0_D100_Q14[0][iq][0] + w[0][21] * FE15_C0_D100_Q14[0][iq][1] + w[0][25] * FE15_C0_D100_Q14[0][iq][2] + w[0][26] * FE15_C0_D100_Q14[0][iq][3] + w[0][27] * FE15_C0_D100_Q14[0][iq][4] + w[0][28] * FE15_C0_D100_Q14[0][iq][5] + w[0][29] * FE15_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE15_C0_D010_Q14[0][iq][0] + w[0][22] * FE15_C0_D010_Q14[0][iq][1] + w[0][24] * FE15_C0_D010_Q14[0][iq][2] + w[0][26] * FE15_C0_D010_Q14[0][iq][3] + w[0][27] * FE15_C0_D010_Q14[0][iq][4] + w[0][28] * FE15_C0_D010_Q14[0][iq][5] + w[0][29] * FE15_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE15_C0_D001_Q14[0][iq][0] + w[0][23] * FE15_C0_D001_Q14[0][iq][1] + w[0][24] * FE15_C0_D001_Q14[0][iq][2] + w[0][25] * FE15_C0_D001_Q14[0][iq][3] + w[0][27] * FE15_C0_D001_Q14[0][iq][4] + w[0][28] * FE15_C0_D001_Q14[0][iq][5] + w[0][29] * FE15_C0_D001_Q14[0][iq][6];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c0 += w[0][ic] * FE15_C0_Q14[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c1 += w[0][ic + 10] * FE15_C0_Q14[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c2 += w[0][ic + 20] * FE15_C0_Q14[0][iq][ic];
        alignas(32) double sv14[105];
        sv14[0] = w0_d0_c0 * sp[14];
        sv14[1] = w0_d1_c0 * sp[17];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c0 * sp[18];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = (1 + sv14[4]) * (1 + sv14[4]);
        sv14[6] = w0_d0_c1 * sp[14];
        sv14[7] = w0_d1_c1 * sp[17];
        sv14[8] = sv14[6] + sv14[7];
        sv14[9] = w0_d2_c1 * sp[18];
        sv14[10] = sv14[8] + sv14[9];
        sv14[11] = sv14[10] * sv14[10];
        sv14[12] = sv14[5] + sv14[11];
        sv14[13] = w0_d0_c2 * sp[14];
        sv14[14] = w0_d1_c2 * sp[17];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = w0_d2_c2 * sp[18];
        sv14[17] = sv14[15] + sv14[16];
        sv14[18] = sv14[17] * sv14[17];
        sv14[19] = sv14[12] + sv14[18];
        sv14[20] = w0_d0_c1 * sp[22];
        sv14[21] = w0_d1_c1 * sp[26];
        sv14[22] = sv14[20] + sv14[21];
        sv14[23] = w0_d2_c1 * sp[30];
        sv14[24] = sv14[22] + sv14[23];
        sv14[25] = (1 + sv14[24]) * (1 + sv14[24]);
        sv14[26] = w0_d0_c0 * sp[22];
        sv14[27] = w0_d1_c0 * sp[26];
        sv14[28] = sv14[26] + sv14[27];
        sv14[29] = w0_d2_c0 * sp[30];
        sv14[30] = sv14[28] + sv14[29];
        sv14[31] = sv14[30] * sv14[30];
        sv14[32] = sv14[25] + sv14[31];
        sv14[33] = w0_d0_c2 * sp[22];
        sv14[34] = w0_d1_c2 * sp[26];
        sv14[35] = sv14[33] + sv14[34];
        sv14[36] = w0_d2_c2 * sp[30];
        sv14[37] = sv14[35] + sv14[36];
        sv14[38] = sv14[37] * sv14[37];
        sv14[39] = sv14[32] + sv14[38];
        sv14[40] = sv14[19] + sv14[39];
        sv14[41] = w0_d0_c0 * sp[34];
        sv14[42] = w0_d1_c0 * sp[38];
        sv14[43] = sv14[41] + sv14[42];
        sv14[44] = w0_d2_c0 * sp[42];
        sv14[45] = sv14[43] + sv14[44];
        sv14[46] = sv14[45] * sv14[45];
        sv14[47] = w0_d0_c1 * sp[34];
        sv14[48] = w0_d1_c1 * sp[38];
        sv14[49] = sv14[47] + sv14[48];
        sv14[50] = w0_d2_c1 * sp[42];
        sv14[51] = sv14[49] + sv14[50];
        sv14[52] = sv14[51] * sv14[51];
        sv14[53] = sv14[46] + sv14[52];
        sv14[54] = w0_d0_c2 * sp[34];
        sv14[55] = w0_d1_c2 * sp[38];
        sv14[56] = sv14[54] + sv14[55];
        sv14[57] = w0_d2_c2 * sp[42];
        sv14[58] = sv14[56] + sv14[57];
        sv14[59] = (1 + sv14[58]) * (1 + sv14[58]);
        sv14[60] = sv14[53] + sv14[59];
        sv14[61] = sv14[40] + sv14[60];
        sv14[62] = sv14[60] * sv14[39];
        sv14[63] = (1 + sv14[24]) * sv14[51];
        sv14[64] = sv14[45] * sv14[30];
        sv14[65] = sv14[63] + sv14[64];
        sv14[66] = (1 + sv14[58]) * sv14[37];
        sv14[67] = sv14[65] + sv14[66];
        sv14[68] = sv14[67] * sv14[67];
        sv14[69] = sv14[62] + -1 * sv14[68];
        sv14[70] = sv14[19] * sv14[69];
        sv14[71] = (1 + sv14[24]) * sv14[10];
        sv14[72] = (1 + sv14[4]) * sv14[30];
        sv14[73] = sv14[71] + sv14[72];
        sv14[74] = sv14[17] * sv14[37];
        sv14[75] = sv14[73] + sv14[74];
        sv14[76] = (1 + sv14[4]) * sv14[45];
        sv14[77] = sv14[51] * sv14[10];
        sv14[78] = sv14[76] + sv14[77];
        sv14[79] = (1 + sv14[58]) * sv14[17];
        sv14[80] = sv14[78] + sv14[79];
        sv14[81] = sv14[80] * sv14[67];
        sv14[82] = sv14[60] * sv14[75];
        sv14[83] = sv14[81] + -1 * sv14[82];
        sv14[84] = sv14[75] * sv14[83];
        sv14[85] = sv14[70] + sv14[84];
        sv14[86] = sv14[67] * sv14[75];
        sv14[87] = sv14[80] * sv14[39];
        sv14[88] = sv14[86] + -1 * sv14[87];
        sv14[89] = sv14[80] * sv14[88];
        sv14[90] = sv14[85] + sv14[89];
        sv14[91] = sv14[61] / std::pow(sv14[90], 0.3333333333333333);
        sv14[92] = (-3.0 + sv14[91]) * w[3][0];
        sv14[93] = std::pow(sv14[90], -1 * w[5][0]);
        sv14[94] = std::pow(sv14[90], w[5][0]);
        sv14[95] = sv14[93] + sv14[94];
        sv14[96] = (-2.0 + sv14[95]) * w[4][0];
        sv14[97] = sv14[92] + sv14[96];
        sv14[98] = w0_c0 * w[1][0];
        sv14[99] = w0_c1 * w[1][1];
        sv14[100] = sv14[98] + sv14[99];
        sv14[101] = w0_c2 * w[1][2];
        sv14[102] = sv14[100] + sv14[101];
        sv14[103] = sv14[97] + -1 * sv14[102];
        sv14[104] = sv14[103] * sp[43];
        const double fw0 = sv14[104] * weights14[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}


hyperelasticitycarotidiso_exterior_facet_integral_0_3::hyperelasticitycarotidiso_exterior_facet_integral_0_3() : ufc::exterior_facet_integral()
{

}

hyperelasticitycarotidiso_exterior_facet_integral_0_3::~hyperelasticitycarotidiso_exterior_facet_integral_0_3()
{

}

const std::vector<bool> & hyperelasticitycarotidiso_exterior_facet_integral_0_3::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, false, true, false, false, false});
return enabled;
}

void hyperelasticitycarotidiso_exterior_facet_integral_0_3::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    std::size_t facet,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.054975871827661, 0.054975871827661, 0.054975871827661, 0.1116907948390055, 0.1116907948390055, 0.1116907948390055 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE16_C0_D001_F_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE6_C0_F_Q6[4][6][10] =
        { { { 0.0, -0.07480380774819603, 0.5176323419876735, -0.07480380774819671, 0.2992152309927871, 0.03354481152314839, 0.299215230992784, 0.0, 0.0, 0.0 },
            { 0.0, -0.07480380774819607, -0.0748038077481967, 0.5176323419876735, 0.299215230992787, 0.2992152309927841, 0.0335448115231484, 0.0, 0.0, 0.0 },
            { 0.0, 0.5176323419876714, -0.0748038077481966, -0.07480380774819667, 0.0335448115231487, 0.2992152309927867, 0.2992152309927867, 0.0, 0.0, 0.0 },
            { 0.0, -0.04820837781551193, -0.08473049309397783, -0.04820837781551192, 0.1928335112620478, 0.7954802262009063, 0.1928335112620478, 0.0, 0.0, 0.0 },
            { 0.0, -0.04820837781551193, -0.04820837781551179, -0.08473049309397787, 0.1928335112620478, 0.192833511262048, 0.7954802262009061, 0.0, 0.0, 0.0 },
            { 0.0, -0.08473049309397782, -0.04820837781551193, -0.04820837781551199, 0.7954802262009062, 0.192833511262048, 0.1928335112620478, 0.0, 0.0, 0.0 } },
          { { -0.07480380774819598, 0.0, 0.5176323419876735, -0.07480380774819671, 0.2992152309927871, 0.0, 0.0, 0.03354481152314846, 0.2992152309927838, 0.0 },
            { -0.07480380774819598, 0.0, -0.07480380774819673, 0.5176323419876735, 0.299215230992787, 0.0, 0.0, 0.299215230992784, 0.0335448115231483, 0.0 },
            { 0.5176323419876713, 0.0, -0.07480380774819667, -0.0748038077481967, 0.03354481152314873, 0.0, 0.0, 0.2992152309927867, 0.2992152309927867, 0.0 },
            { -0.04820837781551188, 0.0, -0.08473049309397787, -0.048208377815512, 0.1928335112620479, 0.0, 0.0, 0.7954802262009062, 0.1928335112620478, 0.0 },
            { -0.0482083778155119, 0.0, -0.04820837781551199, -0.0847304930939779, 0.1928335112620479, 0.0, 0.0, 0.192833511262048, 0.7954802262009062, 0.0 },
            { -0.0847304930939778, 0.0, -0.04820837781551197, -0.04820837781551202, 0.7954802262009062, 0.0, 0.0, 0.192833511262048, 0.1928335112620478, 0.0 } },
          { { -0.07480380774819595, 0.5176323419876734, 0.0, -0.07480380774819667, 0.0, 0.2992152309927871, 0.0, 0.03354481152314845, 0.0, 0.2992152309927838 },
            { -0.07480380774819601, -0.07480380774819666, 0.0, 0.5176323419876735, 0.0, 0.2992152309927871, 0.0, 0.2992152309927839, 0.0, 0.03354481152314839 },
            { 0.5176323419876713, -0.07480380774819663, 0.0, -0.0748038077481967, 0.0, 0.03354481152314868, 0.0, 0.2992152309927868, 0.0, 0.2992152309927867 },
            { -0.0482083778155119, -0.08473049309397784, 0.0, -0.04820837781551197, 0.0, 0.1928335112620479, 0.0, 0.7954802262009063, 0.0, 0.1928335112620479 },
            { -0.04820837781551187, -0.04820837781551189, 0.0, -0.08473049309397787, 0.0, 0.1928335112620478, 0.0, 0.192833511262048, 0.0, 0.7954802262009062 },
            { -0.08473049309397783, -0.04820837781551194, 0.0, -0.0482083778155119, 0.0, 0.7954802262009063, 0.0, 0.192833511262048, 0.0, 0.1928335112620479 } },
          { { -0.07480380774819596, 0.5176323419876736, -0.07480380774819662, 0.0, 0.0, 0.0, 0.2992152309927871, 0.0, 0.03354481152314816, 0.2992152309927838 },
            { -0.07480380774819598, -0.07480380774819663, 0.5176323419876736, 0.0, 0.0, 0.0, 0.2992152309927871, 0.0, 0.2992152309927838, 0.03354481152314835 },
            { 0.5176323419876714, -0.0748038077481966, -0.07480380774819664, 0.0, 0.0, 0.0, 0.03354481152314867, 0.0, 0.2992152309927867, 0.2992152309927867 },
            { -0.04820837781551188, -0.08473049309397777, -0.04820837781551191, 0.0, 0.0, 0.0, 0.1928335112620479, 0.0, 0.7954802262009061, 0.1928335112620479 },
            { -0.04820837781551187, -0.04820837781551188, -0.08473049309397783, 0.0, 0.0, 0.0, 0.1928335112620479, 0.0, 0.1928335112620478, 0.7954802262009062 },
            { -0.08473049309397776, -0.04820837781551189, -0.04820837781551179, 0.0, 0.0, 0.0, 0.7954802262009062, 0.0, 0.1928335112620476, 0.192833511262048 } } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[4] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[7] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[10] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[5] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[8] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[11] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[3] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[6] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[9] * FE16_C0_D001_F_Q6[0][0][1];
    alignas(32) double sp[45];
    sp[0] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[1] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[2] = sp[0] + sp[1];
    sp[3] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[4] = sp[2] + sp[3];
    sp[5] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[6] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[7] = sp[5] + sp[6];
    sp[8] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[9] = sp[7] + sp[8];
    sp[10] = sp[4] * sp[9];
    sp[11] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[12] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[13] = sp[11] + sp[12];
    sp[14] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[15] = sp[13] + sp[14];
    sp[16] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[17] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[18] = sp[16] + sp[17];
    sp[19] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[20] = sp[18] + sp[19];
    sp[21] = sp[15] * sp[20];
    sp[22] = sp[10] + -1 * sp[21];
    sp[23] = sp[22] * sp[22];
    sp[24] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[25] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[26] = sp[24] + sp[25];
    sp[27] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] * sp[20];
    sp[30] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[31] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[32] = sp[30] + sp[31];
    sp[33] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[34] = sp[32] + sp[33];
    sp[35] = sp[34] * sp[9];
    sp[36] = sp[29] + -1 * sp[35];
    sp[37] = sp[36] * sp[36];
    sp[38] = sp[23] + sp[37];
    sp[39] = sp[34] * sp[15];
    sp[40] = sp[4] * sp[28];
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = sp[38] + sp[42];
    sp[44] = std::sqrt(sp[43]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c0 += w[0][ic] * FE6_C0_F_Q6[facet][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c1 += w[0][ic + 10] * FE6_C0_F_Q6[facet][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c2 += w[0][ic + 20] * FE6_C0_F_Q6[facet][iq][ic];
        alignas(32) double sv6[6];
        sv6[0] = w0_c0 * w[2][0];
        sv6[1] = w0_c1 * w[2][1];
        sv6[2] = sv6[0] + sv6[1];
        sv6[3] = w0_c2 * w[2][2];
        sv6[4] = sv6[2] + sv6[3];
        sv6[5] = -1 * sv6[4] * sp[44];
        const double fw0 = sv6[5] * weights6[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}


hyperelasticitycarotidiso_cell_integral_1_otherwise::hyperelasticitycarotidiso_cell_integral_1_otherwise() : ufc::cell_integral()
{

}

hyperelasticitycarotidiso_cell_integral_1_otherwise::~hyperelasticitycarotidiso_cell_integral_1_otherwise()
{

}

const std::vector<bool> & hyperelasticitycarotidiso_cell_integral_1_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
}

void hyperelasticitycarotidiso_cell_integral_1_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 30
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE26_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000002, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000006, 0.0, -1.999999999999999, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000005, 1.999999999999999, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000005, 0.0, 1.999999999999999, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991835, -0.5978929390991861, 0.4021070609008202, 2.793678817297555, 0.0, -0.402107060900818, -2.793678817297546 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008201, 0.4021070609008222, 2.391571756396729, -0.4021070609008185, -0.4021070609008175 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008153, 0.402107060900826, -2.39157175639673, -0.4021070609008163, -0.4021070609008194 },
            { 0.5978929390991834, -0.5978929390991863, 2.79367881729755, 0.4021070609008223, 0.0, -2.793678817297547, -0.4021070609008178 },
            { -0.2574914939727679, 0.2574914939727652, 1.25749149397277, 0.2275255180817003, 0.0, -1.257491493972769, -0.2275255180816939 },
            { 0.772474481918307, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972768, -1.257491493972768 },
            { -0.2574914939727679, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891074, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727683, 0.2574914939727655, 0.2275255180816932, 1.257491493972775, 0.0, -0.2275255180816933, -1.25749149397277 } } };
    alignas(32) static const double FE26_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000004, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 0.0, 1.999999999999997, -2.000000000000002 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991842, -0.5978929390991845, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991848, 0.4021070609008187, 0.4021070609008225, -0.4021070609008185, 2.391571756396729, -0.402107060900818 },
            { 0.5978929390991847, -0.5978929390991838, 2.793678817297549, 0.4021070609008207, -2.793678817297548, 0.0, -0.4021070609008185 },
            { 0.5978929390991841, 1.793678817297543, 0.402107060900819, 0.4021070609008253, -0.4021070609008185, -2.39157175639673, -0.4021070609008197 },
            { -0.2574914939727678, 0.2574914939727657, 1.25749149397277, 0.2275255180816988, -1.25749149397277, 0.0, -0.2275255180816941 },
            { 0.7724744819183076, 0.2574914939727661, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727673, 0.2574914939727654, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.25749149397277 },
            { -0.2574914939727672, -0.7724744819183081, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE26_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -1.999999999999996 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -2.000000000000003 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 2.000000000000001 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999996 },
            { 0.5978929390991843, 1.793678817297546, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396731 },
            { -1.793678817297545, -0.5978929390991818, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396727 },
            { 0.5978929390991843, -0.5978929390991823, 2.79367881729755, 0.4021070609008178, -2.793678817297549, -0.4021070609008179, 0.0 },
            { 0.5978929390991838, -0.5978929390991845, 0.4021070609008183, 2.793678817297549, -0.4021070609008183, -2.79367881729755, 0.0 },
            { -0.2574914939727669, -0.7724744819183068, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183075, 0.2574914939727674, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727676, 0.2574914939727681, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727683, 0.2574914939727673, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.2275255180816939, 0.0 } } };
    alignas(32) static const double FE36_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE36_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE36_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE36_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE36_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE36_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE36_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE36_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE36_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE36_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE36_C0_D001_Q14[0][0][1];
    alignas(32) double sp[76];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c1 * J_c5;
    sp[20] = J_c2 * J_c4;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c2 * J_c3;
    sp[24] = J_c0 * J_c5;
    sp[25] = sp[23] + -1 * sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c0 * J_c4;
    sp[28] = J_c1 * J_c3;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c2 * J_c7;
    sp[32] = J_c8 * (-1 * J_c1);
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c0 * J_c8;
    sp[36] = J_c6 * (-1 * J_c2);
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c1 * J_c6;
    sp[40] = J_c0 * J_c7;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w[2][0] * w[3][0];
    sp[44] = std::pow(w[3][0], 2) * w[2][0];
    sp[45] = sp[14] * sp[14];
    sp[46] = sp[14] * sp[17];
    sp[47] = sp[18] * sp[14];
    sp[48] = sp[17] * sp[17];
    sp[49] = sp[18] * sp[17];
    sp[50] = sp[18] * sp[18];
    sp[51] = sp[34] * sp[34];
    sp[52] = sp[34] * sp[38];
    sp[53] = sp[34] * sp[42];
    sp[54] = sp[38] * sp[38];
    sp[55] = sp[38] * sp[42];
    sp[56] = sp[42] * sp[42];
    sp[57] = sp[51] + sp[45];
    sp[58] = sp[52] + sp[46];
    sp[59] = sp[53] + sp[47];
    sp[60] = sp[54] + sp[48];
    sp[61] = sp[55] + sp[49];
    sp[62] = sp[50] + sp[56];
    sp[63] = sp[22] * sp[22];
    sp[64] = sp[22] * sp[26];
    sp[65] = sp[30] * sp[22];
    sp[66] = sp[26] * sp[26];
    sp[67] = sp[30] * sp[26];
    sp[68] = sp[30] * sp[30];
    sp[69] = sp[57] + sp[63];
    sp[70] = sp[58] + sp[64];
    sp[71] = sp[59] + sp[65];
    sp[72] = sp[60] + sp[66];
    sp[73] = sp[61] + sp[67];
    sp[74] = sp[62] + sp[68];
    sp[75] = std::abs(sp[13]);
    alignas(32) double BF0[7][7] = {};
    alignas(32) double BF1[7][7] = {};
    alignas(32) double BF2[7][7] = {};
    alignas(32) double BF3[7][7] = {};
    alignas(32) double BF4[7][7] = {};
    alignas(32) double BF5[7][7] = {};
    alignas(32) double BF6[7][7] = {};
    alignas(32) double BF7[7][7] = {};
    alignas(32) double BF8[7][7] = {};
    alignas(32) double BF9[7][7] = {};
    alignas(32) double BF10[7][7] = {};
    alignas(32) double BF11[7][7] = {};
    alignas(32) double BF12[7][7] = {};
    alignas(32) double BF13[7][7] = {};
    alignas(32) double BF14[7][7] = {};
    alignas(32) double BF15[7][7] = {};
    alignas(32) double BF16[7][7] = {};
    alignas(32) double BF17[7][7] = {};
    alignas(32) double BF18[7][7] = {};
    alignas(32) double BF19[7][7] = {};
    alignas(32) double BF20[7][7] = {};
    alignas(32) double BF21[7][7] = {};
    alignas(32) double BF22[7][7] = {};
    alignas(32) double BF23[7][7] = {};
    alignas(32) double BF24[7][7] = {};
    alignas(32) double BF25[7][7] = {};
    alignas(32) double BF26[7][7] = {};
    alignas(32) double BF27[7][7] = {};
    alignas(32) double BF28[7][7] = {};
    alignas(32) double BF29[7][7] = {};
    alignas(32) double BF30[7][7] = {};
    alignas(32) double BF31[7][7] = {};
    alignas(32) double BF32[7][7] = {};
    alignas(32) double BF33[7][7] = {};
    alignas(32) double BF34[7][7] = {};
    alignas(32) double BF35[7][7] = {};
    alignas(32) double BF36[7][7] = {};
    alignas(32) double BF37[7][7] = {};
    alignas(32) double BF38[7][7] = {};
    alignas(32) double BF39[7][7] = {};
    alignas(32) double BF40[7][7] = {};
    alignas(32) double BF41[7][7] = {};
    alignas(32) double BF42[7][7] = {};
    alignas(32) double BF43[7][7] = {};
    alignas(32) double BF44[7][7] = {};
    alignas(32) double BF45[7][7] = {};
    alignas(32) double BF46[7][7] = {};
    alignas(32) double BF47[7][7] = {};
    alignas(32) double BF48[7][7] = {};
    alignas(32) double BF49[7][7] = {};
    alignas(32) double BF50[7][7] = {};
    alignas(32) double BF51[7][7] = {};
    alignas(32) double BF52[7][7] = {};
    alignas(32) double BF53[7][7] = {};
    alignas(32) double BF54[7][7] = {};
    alignas(32) double BF55[7][7] = {};
    alignas(32) double BF56[7][7] = {};
    alignas(32) double BF57[7][7] = {};
    alignas(32) double BF58[7][7] = {};
    alignas(32) double BF59[7][7] = {};
    alignas(32) double BF60[7][7] = {};
    alignas(32) double BF61[7][7] = {};
    alignas(32) double BF62[7][7] = {};
    alignas(32) double BF63[7][7] = {};
    alignas(32) double BF64[7][7] = {};
    alignas(32) double BF65[7][7] = {};
    alignas(32) double BF66[7][7] = {};
    alignas(32) double BF67[7][7] = {};
    alignas(32) double BF68[7][7] = {};
    alignas(32) double BF69[7][7] = {};
    alignas(32) double BF70[7][7] = {};
    alignas(32) double BF71[7][7] = {};
    alignas(32) double BF72[7][7] = {};
    alignas(32) double BF73[7][7] = {};
    alignas(32) double BF74[7][7] = {};
    alignas(32) double BF75[7][7] = {};
    alignas(32) double BF76[7][7] = {};
    alignas(32) double BF77[7][7] = {};
    alignas(32) double BF78[7][7] = {};
    alignas(32) double BF79[7][7] = {};
    alignas(32) double BF80[7][7] = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c0 = w[0][0] * FE26_C0_D100_Q14[0][iq][0] + w[0][1] * FE26_C0_D100_Q14[0][iq][1] + w[0][5] * FE26_C0_D100_Q14[0][iq][2] + w[0][6] * FE26_C0_D100_Q14[0][iq][3] + w[0][7] * FE26_C0_D100_Q14[0][iq][4] + w[0][8] * FE26_C0_D100_Q14[0][iq][5] + w[0][9] * FE26_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE26_C0_D010_Q14[0][iq][0] + w[0][2] * FE26_C0_D010_Q14[0][iq][1] + w[0][4] * FE26_C0_D010_Q14[0][iq][2] + w[0][6] * FE26_C0_D010_Q14[0][iq][3] + w[0][7] * FE26_C0_D010_Q14[0][iq][4] + w[0][8] * FE26_C0_D010_Q14[0][iq][5] + w[0][9] * FE26_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE26_C0_D001_Q14[0][iq][0] + w[0][3] * FE26_C0_D001_Q14[0][iq][1] + w[0][4] * FE26_C0_D001_Q14[0][iq][2] + w[0][5] * FE26_C0_D001_Q14[0][iq][3] + w[0][7] * FE26_C0_D001_Q14[0][iq][4] + w[0][8] * FE26_C0_D001_Q14[0][iq][5] + w[0][9] * FE26_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE26_C0_D100_Q14[0][iq][0] + w[0][21] * FE26_C0_D100_Q14[0][iq][1] + w[0][25] * FE26_C0_D100_Q14[0][iq][2] + w[0][26] * FE26_C0_D100_Q14[0][iq][3] + w[0][27] * FE26_C0_D100_Q14[0][iq][4] + w[0][28] * FE26_C0_D100_Q14[0][iq][5] + w[0][29] * FE26_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE26_C0_D010_Q14[0][iq][0] + w[0][22] * FE26_C0_D010_Q14[0][iq][1] + w[0][24] * FE26_C0_D010_Q14[0][iq][2] + w[0][26] * FE26_C0_D010_Q14[0][iq][3] + w[0][27] * FE26_C0_D010_Q14[0][iq][4] + w[0][28] * FE26_C0_D010_Q14[0][iq][5] + w[0][29] * FE26_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE26_C0_D001_Q14[0][iq][0] + w[0][23] * FE26_C0_D001_Q14[0][iq][1] + w[0][24] * FE26_C0_D001_Q14[0][iq][2] + w[0][25] * FE26_C0_D001_Q14[0][iq][3] + w[0][27] * FE26_C0_D001_Q14[0][iq][4] + w[0][28] * FE26_C0_D001_Q14[0][iq][5] + w[0][29] * FE26_C0_D001_Q14[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE26_C0_D100_Q14[0][iq][0] + w[0][11] * FE26_C0_D100_Q14[0][iq][1] + w[0][15] * FE26_C0_D100_Q14[0][iq][2] + w[0][16] * FE26_C0_D100_Q14[0][iq][3] + w[0][17] * FE26_C0_D100_Q14[0][iq][4] + w[0][18] * FE26_C0_D100_Q14[0][iq][5] + w[0][19] * FE26_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE26_C0_D010_Q14[0][iq][0] + w[0][12] * FE26_C0_D010_Q14[0][iq][1] + w[0][14] * FE26_C0_D010_Q14[0][iq][2] + w[0][16] * FE26_C0_D010_Q14[0][iq][3] + w[0][17] * FE26_C0_D010_Q14[0][iq][4] + w[0][18] * FE26_C0_D010_Q14[0][iq][5] + w[0][19] * FE26_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE26_C0_D001_Q14[0][iq][0] + w[0][13] * FE26_C0_D001_Q14[0][iq][1] + w[0][14] * FE26_C0_D001_Q14[0][iq][2] + w[0][15] * FE26_C0_D001_Q14[0][iq][3] + w[0][17] * FE26_C0_D001_Q14[0][iq][4] + w[0][18] * FE26_C0_D001_Q14[0][iq][5] + w[0][19] * FE26_C0_D001_Q14[0][iq][6];
        alignas(32) double sv14[1939];
        sv14[0] = w0_d0_c0 * sp[22];
        sv14[1] = w0_d1_c0 * sp[26];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c0 * sp[30];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = w0_d0_c2 * sp[34];
        sv14[6] = w0_d1_c2 * sp[38];
        sv14[7] = sv14[5] + sv14[6];
        sv14[8] = w0_d2_c2 * sp[42];
        sv14[9] = sv14[7] + sv14[8];
        sv14[10] = sv14[4] * sv14[9];
        sv14[11] = w0_d0_c2 * sp[22];
        sv14[12] = w0_d1_c2 * sp[26];
        sv14[13] = sv14[11] + sv14[12];
        sv14[14] = w0_d2_c2 * sp[30];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = w0_d0_c0 * sp[34];
        sv14[17] = w0_d1_c0 * sp[38];
        sv14[18] = sv14[16] + sv14[17];
        sv14[19] = w0_d2_c0 * sp[42];
        sv14[20] = sv14[18] + sv14[19];
        sv14[21] = (1 + sv14[15]) * (-1 * sv14[20]);
        sv14[22] = sv14[10] + sv14[21];
        sv14[23] = w0_d0_c0 * sp[14];
        sv14[24] = w0_d1_c0 * sp[17];
        sv14[25] = sv14[23] + sv14[24];
        sv14[26] = w0_d2_c0 * sp[18];
        sv14[27] = sv14[25] + sv14[26];
        sv14[28] = w0_d0_c1 * sp[34];
        sv14[29] = w0_d1_c1 * sp[38];
        sv14[30] = sv14[28] + sv14[29];
        sv14[31] = w0_d2_c1 * sp[42];
        sv14[32] = sv14[30] + sv14[31];
        sv14[33] = (1 + sv14[15]) * (1 + sv14[32]);
        sv14[34] = w0_d0_c1 * sp[22];
        sv14[35] = w0_d1_c1 * sp[26];
        sv14[36] = sv14[34] + sv14[35];
        sv14[37] = w0_d2_c1 * sp[30];
        sv14[38] = sv14[36] + sv14[37];
        sv14[39] = sv14[38] * sv14[9];
        sv14[40] = sv14[33] + -1 * sv14[39];
        sv14[41] = (1 + sv14[27]) * sv14[40];
        sv14[42] = w0_d0_c2 * sp[14];
        sv14[43] = w0_d1_c2 * sp[17];
        sv14[44] = sv14[42] + sv14[43];
        sv14[45] = w0_d2_c2 * sp[18];
        sv14[46] = sv14[44] + sv14[45];
        sv14[47] = sv14[38] * sv14[46];
        sv14[48] = w0_d0_c1 * sp[14];
        sv14[49] = w0_d1_c1 * sp[17];
        sv14[50] = sv14[48] + sv14[49];
        sv14[51] = w0_d2_c1 * sp[18];
        sv14[52] = sv14[50] + sv14[51];
        sv14[53] = (1 + sv14[15]) * sv14[52];
        sv14[54] = sv14[47] + -1 * sv14[53];
        sv14[55] = sv14[54] * sv14[20];
        sv14[56] = sv14[41] + sv14[55];
        sv14[57] = sv14[52] * sv14[9];
        sv14[58] = (1 + sv14[32]) * sv14[46];
        sv14[59] = sv14[57] + -1 * sv14[58];
        sv14[60] = sv14[59] * sv14[4];
        sv14[61] = sv14[56] + sv14[60];
        sv14[62] = sv14[22] / sv14[61];
        sv14[63] = sp[14] * sv14[62];
        sv14[64] = sp[17] * sv14[62];
        sv14[65] = sp[18] * sv14[62];
        sv14[66] = sv14[40] / sv14[61];
        sv14[67] = sp[14] * sv14[66];
        sv14[68] = sp[17] * sv14[66];
        sv14[69] = sp[18] * sv14[66];
        sv14[70] = sv14[38] * sv14[20];
        sv14[71] = (1 + sv14[32]) * sv14[4];
        sv14[72] = sv14[70] + -1 * sv14[71];
        sv14[73] = sv14[72] / sv14[61];
        sv14[74] = sp[14] * sv14[73];
        sv14[75] = sp[17] * sv14[73];
        sv14[76] = sp[18] * sv14[73];
        sv14[77] = sv14[63] * sv14[63];
        sv14[78] = sv14[63] * sv14[64];
        sv14[79] = sv14[65] * sv14[63];
        sv14[80] = sv14[63] * sv14[67];
        sv14[81] = sv14[63] * sv14[68];
        sv14[82] = sv14[63] * sv14[69];
        sv14[83] = sv14[74] * sv14[63];
        sv14[84] = sv14[75] * sv14[63];
        sv14[85] = sv14[76] * sv14[63];
        sv14[86] = sv14[64] * sv14[64];
        sv14[87] = sv14[65] * sv14[64];
        sv14[88] = sv14[64] * sv14[67];
        sv14[89] = sv14[64] * sv14[68];
        sv14[90] = sv14[64] * sv14[69];
        sv14[91] = sv14[74] * sv14[64];
        sv14[92] = sv14[75] * sv14[64];
        sv14[93] = sv14[76] * sv14[64];
        sv14[94] = sv14[65] * sv14[65];
        sv14[95] = sv14[65] * sv14[67];
        sv14[96] = sv14[65] * sv14[68];
        sv14[97] = sv14[65] * sv14[69];
        sv14[98] = sv14[74] * sv14[65];
        sv14[99] = sv14[75] * sv14[65];
        sv14[100] = sv14[76] * sv14[65];
        sv14[101] = sv14[67] * sv14[67];
        sv14[102] = sv14[67] * sv14[68];
        sv14[103] = sv14[69] * sv14[67];
        sv14[104] = sv14[74] * sv14[67];
        sv14[105] = sv14[75] * sv14[67];
        sv14[106] = sv14[76] * sv14[67];
        sv14[107] = sv14[68] * sv14[68];
        sv14[108] = sv14[69] * sv14[68];
        sv14[109] = sv14[74] * sv14[68];
        sv14[110] = sv14[75] * sv14[68];
        sv14[111] = sv14[76] * sv14[68];
        sv14[112] = sv14[69] * sv14[69];
        sv14[113] = sv14[74] * sv14[69];
        sv14[114] = sv14[75] * sv14[69];
        sv14[115] = sv14[76] * sv14[69];
        sv14[116] = sv14[74] * sv14[74];
        sv14[117] = sv14[74] * sv14[75];
        sv14[118] = sv14[76] * sv14[74];
        sv14[119] = sv14[75] * sv14[75];
        sv14[120] = sv14[76] * sv14[75];
        sv14[121] = sv14[76] * sv14[76];
        sv14[122] = sp[34] * sv14[62];
        sv14[123] = sp[38] * sv14[62];
        sv14[124] = sp[42] * sv14[62];
        sv14[125] = sp[34] * sv14[66];
        sv14[126] = sp[38] * sv14[66];
        sv14[127] = sp[42] * sv14[66];
        sv14[128] = sp[34] * sv14[73];
        sv14[129] = sp[38] * sv14[73];
        sv14[130] = sp[42] * sv14[73];
        sv14[131] = sv14[52] * (-1 * (1 + sv14[15]));
        sv14[132] = sv14[47] + sv14[131];
        sv14[133] = sv14[132] / sv14[61];
        sv14[134] = sp[14] * sv14[133];
        sv14[135] = sp[17] * sv14[133];
        sv14[136] = sp[18] * sv14[133];
        sv14[137] = (1 + sv14[15]) * (1 + sv14[27]);
        sv14[138] = sv14[46] * (-1 * sv14[4]);
        sv14[139] = sv14[137] + sv14[138];
        sv14[140] = sv14[139] / sv14[61];
        sv14[141] = sp[14] * sv14[140];
        sv14[142] = sp[17] * sv14[140];
        sv14[143] = sp[18] * sv14[140];
        sv14[144] = sv14[4] * sv14[52];
        sv14[145] = (1 + sv14[27]) * sv14[38];
        sv14[146] = sv14[144] + -1 * sv14[145];
        sv14[147] = sv14[146] / sv14[61];
        sv14[148] = sp[14] * sv14[147];
        sv14[149] = sp[17] * sv14[147];
        sv14[150] = sp[18] * sv14[147];
        sv14[151] = sv14[141] * sv14[122];
        sv14[152] = sv14[142] * sv14[122];
        sv14[153] = sv14[143] * sv14[122];
        sv14[154] = sv14[134] * sv14[122];
        sv14[155] = sv14[135] * sv14[122];
        sv14[156] = sv14[136] * sv14[122];
        sv14[157] = sv14[148] * sv14[122];
        sv14[158] = sv14[149] * sv14[122];
        sv14[159] = sv14[150] * sv14[122];
        sv14[160] = sv14[141] * sv14[123];
        sv14[161] = sv14[142] * sv14[123];
        sv14[162] = sv14[143] * sv14[123];
        sv14[163] = sv14[134] * sv14[123];
        sv14[164] = sv14[135] * sv14[123];
        sv14[165] = sv14[136] * sv14[123];
        sv14[166] = sv14[148] * sv14[123];
        sv14[167] = sv14[149] * sv14[123];
        sv14[168] = sv14[150] * sv14[123];
        sv14[169] = sv14[141] * sv14[124];
        sv14[170] = sv14[142] * sv14[124];
        sv14[171] = sv14[143] * sv14[124];
        sv14[172] = sv14[134] * sv14[124];
        sv14[173] = sv14[135] * sv14[124];
        sv14[174] = sv14[136] * sv14[124];
        sv14[175] = sv14[148] * sv14[124];
        sv14[176] = sv14[149] * sv14[124];
        sv14[177] = sv14[150] * sv14[124];
        sv14[178] = sv14[141] * sv14[125];
        sv14[179] = sv14[142] * sv14[125];
        sv14[180] = sv14[143] * sv14[125];
        sv14[181] = sv14[134] * sv14[125];
        sv14[182] = sv14[135] * sv14[125];
        sv14[183] = sv14[136] * sv14[125];
        sv14[184] = sv14[148] * sv14[125];
        sv14[185] = sv14[149] * sv14[125];
        sv14[186] = sv14[150] * sv14[125];
        sv14[187] = sv14[141] * sv14[126];
        sv14[188] = sv14[142] * sv14[126];
        sv14[189] = sv14[143] * sv14[126];
        sv14[190] = sv14[134] * sv14[126];
        sv14[191] = sv14[135] * sv14[126];
        sv14[192] = sv14[136] * sv14[126];
        sv14[193] = sv14[148] * sv14[126];
        sv14[194] = sv14[149] * sv14[126];
        sv14[195] = sv14[150] * sv14[126];
        sv14[196] = sv14[141] * sv14[127];
        sv14[197] = sv14[142] * sv14[127];
        sv14[198] = sv14[143] * sv14[127];
        sv14[199] = sv14[134] * sv14[127];
        sv14[200] = sv14[135] * sv14[127];
        sv14[201] = sv14[136] * sv14[127];
        sv14[202] = sv14[148] * sv14[127];
        sv14[203] = sv14[149] * sv14[127];
        sv14[204] = sv14[150] * sv14[127];
        sv14[205] = sv14[141] * sv14[128];
        sv14[206] = sv14[142] * sv14[128];
        sv14[207] = sv14[143] * sv14[128];
        sv14[208] = sv14[134] * sv14[128];
        sv14[209] = sv14[135] * sv14[128];
        sv14[210] = sv14[136] * sv14[128];
        sv14[211] = sv14[128] * sv14[148];
        sv14[212] = sv14[128] * sv14[149];
        sv14[213] = sv14[128] * sv14[150];
        sv14[214] = sv14[141] * sv14[129];
        sv14[215] = sv14[142] * sv14[129];
        sv14[216] = sv14[143] * sv14[129];
        sv14[217] = sv14[134] * sv14[129];
        sv14[218] = sv14[135] * sv14[129];
        sv14[219] = sv14[136] * sv14[129];
        sv14[220] = sv14[129] * sv14[148];
        sv14[221] = sv14[129] * sv14[149];
        sv14[222] = sv14[129] * sv14[150];
        sv14[223] = sv14[141] * sv14[130];
        sv14[224] = sv14[142] * sv14[130];
        sv14[225] = sv14[143] * sv14[130];
        sv14[226] = sv14[134] * sv14[130];
        sv14[227] = sv14[135] * sv14[130];
        sv14[228] = sv14[136] * sv14[130];
        sv14[229] = sv14[130] * sv14[148];
        sv14[230] = sv14[130] * sv14[149];
        sv14[231] = sv14[130] * sv14[150];
        sv14[232] = sv14[151] + sv14[77];
        sv14[233] = sv14[160] + sv14[78];
        sv14[234] = sv14[169] + sv14[79];
        sv14[235] = sv14[178] + sv14[80];
        sv14[236] = sv14[187] + sv14[81];
        sv14[237] = sv14[82] + sv14[196];
        sv14[238] = sv14[205] + sv14[83];
        sv14[239] = sv14[214] + sv14[84];
        sv14[240] = sv14[223] + sv14[85];
        sv14[241] = sv14[152] + sv14[78];
        sv14[242] = sv14[161] + sv14[86];
        sv14[243] = sv14[170] + sv14[87];
        sv14[244] = sv14[179] + sv14[88];
        sv14[245] = sv14[188] + sv14[89];
        sv14[246] = sv14[90] + sv14[197];
        sv14[247] = sv14[206] + sv14[91];
        sv14[248] = sv14[215] + sv14[92];
        sv14[249] = sv14[224] + sv14[93];
        sv14[250] = sv14[153] + sv14[79];
        sv14[251] = sv14[162] + sv14[87];
        sv14[252] = sv14[94] + sv14[171];
        sv14[253] = sv14[180] + sv14[95];
        sv14[254] = sv14[189] + sv14[96];
        sv14[255] = sv14[97] + sv14[198];
        sv14[256] = sv14[207] + sv14[98];
        sv14[257] = sv14[216] + sv14[99];
        sv14[258] = sv14[225] + sv14[100];
        sv14[259] = sv14[154] + sv14[80];
        sv14[260] = sv14[163] + sv14[88];
        sv14[261] = sv14[172] + sv14[95];
        sv14[262] = sv14[181] + sv14[101];
        sv14[263] = sv14[190] + sv14[102];
        sv14[264] = sv14[199] + sv14[103];
        sv14[265] = sv14[208] + sv14[104];
        sv14[266] = sv14[217] + sv14[105];
        sv14[267] = sv14[226] + sv14[106];
        sv14[268] = sv14[155] + sv14[81];
        sv14[269] = sv14[164] + sv14[89];
        sv14[270] = sv14[173] + sv14[96];
        sv14[271] = sv14[182] + sv14[102];
        sv14[272] = sv14[191] + sv14[107];
        sv14[273] = sv14[200] + sv14[108];
        sv14[274] = sv14[209] + sv14[109];
        sv14[275] = sv14[218] + sv14[110];
        sv14[276] = sv14[227] + sv14[111];
        sv14[277] = sv14[156] + sv14[82];
        sv14[278] = sv14[165] + sv14[90];
        sv14[279] = sv14[174] + sv14[97];
        sv14[280] = sv14[183] + sv14[103];
        sv14[281] = sv14[192] + sv14[108];
        sv14[282] = sv14[112] + sv14[201];
        sv14[283] = sv14[210] + sv14[113];
        sv14[284] = sv14[219] + sv14[114];
        sv14[285] = sv14[228] + sv14[115];
        sv14[286] = sv14[157] + sv14[83];
        sv14[287] = sv14[166] + sv14[91];
        sv14[288] = sv14[98] + sv14[175];
        sv14[289] = sv14[184] + sv14[104];
        sv14[290] = sv14[193] + sv14[109];
        sv14[291] = sv14[113] + sv14[202];
        sv14[292] = sv14[116] + sv14[211];
        sv14[293] = sv14[117] + sv14[220];
        sv14[294] = sv14[118] + sv14[229];
        sv14[295] = sv14[158] + sv14[84];
        sv14[296] = sv14[167] + sv14[92];
        sv14[297] = sv14[99] + sv14[176];
        sv14[298] = sv14[185] + sv14[105];
        sv14[299] = sv14[194] + sv14[110];
        sv14[300] = sv14[114] + sv14[203];
        sv14[301] = sv14[117] + sv14[212];
        sv14[302] = sv14[119] + sv14[221];
        sv14[303] = sv14[120] + sv14[230];
        sv14[304] = sv14[159] + sv14[85];
        sv14[305] = sv14[168] + sv14[93];
        sv14[306] = sv14[100] + sv14[177];
        sv14[307] = sv14[186] + sv14[106];
        sv14[308] = sv14[195] + sv14[111];
        sv14[309] = sv14[115] + sv14[204];
        sv14[310] = sv14[118] + sv14[213];
        sv14[311] = sv14[120] + sv14[222];
        sv14[312] = sv14[121] + sv14[231];
        sv14[313] = sp[22] * sv14[62];
        sv14[314] = sp[26] * sv14[62];
        sv14[315] = sp[30] * sv14[62];
        sv14[316] = sp[22] * sv14[66];
        sv14[317] = sp[26] * sv14[66];
        sv14[318] = sp[30] * sv14[66];
        sv14[319] = sp[22] * sv14[73];
        sv14[320] = sp[26] * sv14[73];
        sv14[321] = sp[30] * sv14[73];
        sv14[322] = sv14[59] / sv14[61];
        sv14[323] = sp[14] * sv14[322];
        sv14[324] = sp[17] * sv14[322];
        sv14[325] = sp[18] * sv14[322];
        sv14[326] = sv14[46] * sv14[20];
        sv14[327] = (1 + sv14[27]) * sv14[9];
        sv14[328] = sv14[326] + -1 * sv14[327];
        sv14[329] = sv14[328] / sv14[61];
        sv14[330] = sp[14] * sv14[329];
        sv14[331] = sp[17] * sv14[329];
        sv14[332] = sp[18] * sv14[329];
        sv14[333] = (1 + sv14[27]) * (1 + sv14[32]);
        sv14[334] = sv14[52] * sv14[20];
        sv14[335] = sv14[333] + -1 * sv14[334];
        sv14[336] = sv14[335] / sv14[61];
        sv14[337] = sp[14] * sv14[336];
        sv14[338] = sp[17] * sv14[336];
        sv14[339] = sp[18] * sv14[336];
        sv14[340] = sv14[313] * sv14[330];
        sv14[341] = sv14[313] * sv14[331];
        sv14[342] = sv14[313] * sv14[332];
        sv14[343] = sv14[323] * sv14[313];
        sv14[344] = sv14[324] * sv14[313];
        sv14[345] = sv14[325] * sv14[313];
        sv14[346] = sv14[313] * sv14[337];
        sv14[347] = sv14[313] * sv14[338];
        sv14[348] = sv14[313] * sv14[339];
        sv14[349] = sv14[314] * sv14[330];
        sv14[350] = sv14[314] * sv14[331];
        sv14[351] = sv14[314] * sv14[332];
        sv14[352] = sv14[323] * sv14[314];
        sv14[353] = sv14[324] * sv14[314];
        sv14[354] = sv14[325] * sv14[314];
        sv14[355] = sv14[314] * sv14[337];
        sv14[356] = sv14[314] * sv14[338];
        sv14[357] = sv14[314] * sv14[339];
        sv14[358] = sv14[315] * sv14[330];
        sv14[359] = sv14[315] * sv14[331];
        sv14[360] = sv14[315] * sv14[332];
        sv14[361] = sv14[323] * sv14[315];
        sv14[362] = sv14[324] * sv14[315];
        sv14[363] = sv14[325] * sv14[315];
        sv14[364] = sv14[315] * sv14[337];
        sv14[365] = sv14[315] * sv14[338];
        sv14[366] = sv14[315] * sv14[339];
        sv14[367] = sv14[330] * sv14[316];
        sv14[368] = sv14[331] * sv14[316];
        sv14[369] = sv14[332] * sv14[316];
        sv14[370] = sv14[323] * sv14[316];
        sv14[371] = sv14[324] * sv14[316];
        sv14[372] = sv14[325] * sv14[316];
        sv14[373] = sv14[337] * sv14[316];
        sv14[374] = sv14[338] * sv14[316];
        sv14[375] = sv14[339] * sv14[316];
        sv14[376] = sv14[330] * sv14[317];
        sv14[377] = sv14[331] * sv14[317];
        sv14[378] = sv14[332] * sv14[317];
        sv14[379] = sv14[323] * sv14[317];
        sv14[380] = sv14[324] * sv14[317];
        sv14[381] = sv14[325] * sv14[317];
        sv14[382] = sv14[337] * sv14[317];
        sv14[383] = sv14[338] * sv14[317];
        sv14[384] = sv14[339] * sv14[317];
        sv14[385] = sv14[330] * sv14[318];
        sv14[386] = sv14[331] * sv14[318];
        sv14[387] = sv14[332] * sv14[318];
        sv14[388] = sv14[323] * sv14[318];
        sv14[389] = sv14[324] * sv14[318];
        sv14[390] = sv14[325] * sv14[318];
        sv14[391] = sv14[337] * sv14[318];
        sv14[392] = sv14[338] * sv14[318];
        sv14[393] = sv14[339] * sv14[318];
        sv14[394] = sv14[319] * sv14[330];
        sv14[395] = sv14[319] * sv14[331];
        sv14[396] = sv14[319] * sv14[332];
        sv14[397] = sv14[319] * sv14[323];
        sv14[398] = sv14[319] * sv14[324];
        sv14[399] = sv14[319] * sv14[325];
        sv14[400] = sv14[319] * sv14[337];
        sv14[401] = sv14[319] * sv14[338];
        sv14[402] = sv14[319] * sv14[339];
        sv14[403] = sv14[320] * sv14[330];
        sv14[404] = sv14[320] * sv14[331];
        sv14[405] = sv14[320] * sv14[332];
        sv14[406] = sv14[320] * sv14[323];
        sv14[407] = sv14[320] * sv14[324];
        sv14[408] = sv14[320] * sv14[325];
        sv14[409] = sv14[320] * sv14[337];
        sv14[410] = sv14[320] * sv14[338];
        sv14[411] = sv14[320] * sv14[339];
        sv14[412] = sv14[321] * sv14[330];
        sv14[413] = sv14[321] * sv14[331];
        sv14[414] = sv14[321] * sv14[332];
        sv14[415] = sv14[321] * sv14[323];
        sv14[416] = sv14[321] * sv14[324];
        sv14[417] = sv14[321] * sv14[325];
        sv14[418] = sv14[321] * sv14[337];
        sv14[419] = sv14[321] * sv14[338];
        sv14[420] = sv14[321] * sv14[339];
        sv14[421] = sv14[232] + sv14[340];
        sv14[422] = sv14[233] + sv14[349];
        sv14[423] = sv14[234] + sv14[358];
        sv14[424] = sv14[235] + sv14[367];
        sv14[425] = sv14[236] + sv14[376];
        sv14[426] = sv14[237] + sv14[385];
        sv14[427] = sv14[238] + sv14[394];
        sv14[428] = sv14[239] + sv14[403];
        sv14[429] = sv14[240] + sv14[412];
        sv14[430] = sv14[241] + sv14[341];
        sv14[431] = sv14[242] + sv14[350];
        sv14[432] = sv14[243] + sv14[359];
        sv14[433] = sv14[244] + sv14[368];
        sv14[434] = sv14[245] + sv14[377];
        sv14[435] = sv14[246] + sv14[386];
        sv14[436] = sv14[247] + sv14[395];
        sv14[437] = sv14[248] + sv14[404];
        sv14[438] = sv14[249] + sv14[413];
        sv14[439] = sv14[250] + sv14[342];
        sv14[440] = sv14[251] + sv14[351];
        sv14[441] = sv14[252] + sv14[360];
        sv14[442] = sv14[253] + sv14[369];
        sv14[443] = sv14[254] + sv14[378];
        sv14[444] = sv14[255] + sv14[387];
        sv14[445] = sv14[256] + sv14[396];
        sv14[446] = sv14[257] + sv14[405];
        sv14[447] = sv14[258] + sv14[414];
        sv14[448] = sv14[259] + sv14[343];
        sv14[449] = sv14[260] + sv14[352];
        sv14[450] = sv14[261] + sv14[361];
        sv14[451] = sv14[262] + sv14[370];
        sv14[452] = sv14[263] + sv14[379];
        sv14[453] = sv14[264] + sv14[388];
        sv14[454] = sv14[265] + sv14[397];
        sv14[455] = sv14[266] + sv14[406];
        sv14[456] = sv14[267] + sv14[415];
        sv14[457] = sv14[268] + sv14[344];
        sv14[458] = sv14[269] + sv14[353];
        sv14[459] = sv14[270] + sv14[362];
        sv14[460] = sv14[271] + sv14[371];
        sv14[461] = sv14[272] + sv14[380];
        sv14[462] = sv14[273] + sv14[389];
        sv14[463] = sv14[274] + sv14[398];
        sv14[464] = sv14[275] + sv14[407];
        sv14[465] = sv14[276] + sv14[416];
        sv14[466] = sv14[277] + sv14[345];
        sv14[467] = sv14[278] + sv14[354];
        sv14[468] = sv14[279] + sv14[363];
        sv14[469] = sv14[280] + sv14[372];
        sv14[470] = sv14[281] + sv14[381];
        sv14[471] = sv14[282] + sv14[390];
        sv14[472] = sv14[283] + sv14[399];
        sv14[473] = sv14[284] + sv14[408];
        sv14[474] = sv14[285] + sv14[417];
        sv14[475] = sv14[286] + sv14[346];
        sv14[476] = sv14[287] + sv14[355];
        sv14[477] = sv14[288] + sv14[364];
        sv14[478] = sv14[289] + sv14[373];
        sv14[479] = sv14[290] + sv14[382];
        sv14[480] = sv14[291] + sv14[391];
        sv14[481] = sv14[292] + sv14[400];
        sv14[482] = sv14[293] + sv14[409];
        sv14[483] = sv14[294] + sv14[418];
        sv14[484] = sv14[295] + sv14[347];
        sv14[485] = sv14[296] + sv14[356];
        sv14[486] = sv14[297] + sv14[365];
        sv14[487] = sv14[298] + sv14[374];
        sv14[488] = sv14[299] + sv14[383];
        sv14[489] = sv14[300] + sv14[392];
        sv14[490] = sv14[301] + sv14[401];
        sv14[491] = sv14[302] + sv14[410];
        sv14[492] = sv14[303] + sv14[419];
        sv14[493] = sv14[304] + sv14[348];
        sv14[494] = sv14[305] + sv14[357];
        sv14[495] = sv14[306] + sv14[366];
        sv14[496] = sv14[307] + sv14[375];
        sv14[497] = sv14[308] + sv14[384];
        sv14[498] = sv14[309] + sv14[393];
        sv14[499] = sv14[310] + sv14[402];
        sv14[500] = sv14[311] + sv14[411];
        sv14[501] = sv14[312] + sv14[420];
        sv14[502] = sp[34] * sv14[133];
        sv14[503] = sp[38] * sv14[133];
        sv14[504] = sp[42] * sv14[133];
        sv14[505] = sp[34] * sv14[140];
        sv14[506] = sp[38] * sv14[140];
        sv14[507] = sp[42] * sv14[140];
        sv14[508] = sp[34] * sv14[147];
        sv14[509] = sp[38] * sv14[147];
        sv14[510] = sp[42] * sv14[147];
        sv14[511] = sv14[505] * sv14[505];
        sv14[512] = sv14[505] * sv14[506];
        sv14[513] = sv14[505] * sv14[507];
        sv14[514] = sv14[502] * sv14[505];
        sv14[515] = sv14[503] * sv14[505];
        sv14[516] = sv14[504] * sv14[505];
        sv14[517] = sv14[505] * sv14[508];
        sv14[518] = sv14[505] * sv14[509];
        sv14[519] = sv14[505] * sv14[510];
        sv14[520] = sv14[506] * sv14[506];
        sv14[521] = sv14[506] * sv14[507];
        sv14[522] = sv14[502] * sv14[506];
        sv14[523] = sv14[503] * sv14[506];
        sv14[524] = sv14[504] * sv14[506];
        sv14[525] = sv14[506] * sv14[508];
        sv14[526] = sv14[506] * sv14[509];
        sv14[527] = sv14[506] * sv14[510];
        sv14[528] = sv14[507] * sv14[507];
        sv14[529] = sv14[502] * sv14[507];
        sv14[530] = sv14[503] * sv14[507];
        sv14[531] = sv14[504] * sv14[507];
        sv14[532] = sv14[507] * sv14[508];
        sv14[533] = sv14[507] * sv14[509];
        sv14[534] = sv14[507] * sv14[510];
        sv14[535] = sv14[502] * sv14[502];
        sv14[536] = sv14[502] * sv14[503];
        sv14[537] = sv14[502] * sv14[504];
        sv14[538] = sv14[502] * sv14[508];
        sv14[539] = sv14[502] * sv14[509];
        sv14[540] = sv14[502] * sv14[510];
        sv14[541] = sv14[503] * sv14[503];
        sv14[542] = sv14[503] * sv14[504];
        sv14[543] = sv14[503] * sv14[508];
        sv14[544] = sv14[503] * sv14[509];
        sv14[545] = sv14[503] * sv14[510];
        sv14[546] = sv14[504] * sv14[504];
        sv14[547] = sv14[504] * sv14[508];
        sv14[548] = sv14[504] * sv14[509];
        sv14[549] = sv14[504] * sv14[510];
        sv14[550] = sv14[508] * sv14[508];
        sv14[551] = sv14[508] * sv14[509];
        sv14[552] = sv14[508] * sv14[510];
        sv14[553] = sv14[509] * sv14[509];
        sv14[554] = sv14[509] * sv14[510];
        sv14[555] = sv14[510] * sv14[510];
        sv14[556] = sv14[511] + sv14[151];
        sv14[557] = sv14[512] + sv14[152];
        sv14[558] = sv14[513] + sv14[153];
        sv14[559] = sv14[514] + sv14[154];
        sv14[560] = sv14[515] + sv14[155];
        sv14[561] = sv14[516] + sv14[156];
        sv14[562] = sv14[517] + sv14[157];
        sv14[563] = sv14[518] + sv14[158];
        sv14[564] = sv14[519] + sv14[159];
        sv14[565] = sv14[512] + sv14[160];
        sv14[566] = sv14[520] + sv14[161];
        sv14[567] = sv14[521] + sv14[162];
        sv14[568] = sv14[522] + sv14[163];
        sv14[569] = sv14[523] + sv14[164];
        sv14[570] = sv14[524] + sv14[165];
        sv14[571] = sv14[525] + sv14[166];
        sv14[572] = sv14[526] + sv14[167];
        sv14[573] = sv14[527] + sv14[168];
        sv14[574] = sv14[513] + sv14[169];
        sv14[575] = sv14[521] + sv14[170];
        sv14[576] = sv14[528] + sv14[171];
        sv14[577] = sv14[529] + sv14[172];
        sv14[578] = sv14[530] + sv14[173];
        sv14[579] = sv14[531] + sv14[174];
        sv14[580] = sv14[532] + sv14[175];
        sv14[581] = sv14[533] + sv14[176];
        sv14[582] = sv14[534] + sv14[177];
        sv14[583] = sv14[514] + sv14[178];
        sv14[584] = sv14[522] + sv14[179];
        sv14[585] = sv14[529] + sv14[180];
        sv14[586] = sv14[535] + sv14[181];
        sv14[587] = sv14[536] + sv14[182];
        sv14[588] = sv14[537] + sv14[183];
        sv14[589] = sv14[538] + sv14[184];
        sv14[590] = sv14[539] + sv14[185];
        sv14[591] = sv14[540] + sv14[186];
        sv14[592] = sv14[515] + sv14[187];
        sv14[593] = sv14[523] + sv14[188];
        sv14[594] = sv14[530] + sv14[189];
        sv14[595] = sv14[536] + sv14[190];
        sv14[596] = sv14[541] + sv14[191];
        sv14[597] = sv14[542] + sv14[192];
        sv14[598] = sv14[543] + sv14[193];
        sv14[599] = sv14[544] + sv14[194];
        sv14[600] = sv14[545] + sv14[195];
        sv14[601] = sv14[516] + sv14[196];
        sv14[602] = sv14[524] + sv14[197];
        sv14[603] = sv14[531] + sv14[198];
        sv14[604] = sv14[537] + sv14[199];
        sv14[605] = sv14[542] + sv14[200];
        sv14[606] = sv14[546] + sv14[201];
        sv14[607] = sv14[547] + sv14[202];
        sv14[608] = sv14[548] + sv14[203];
        sv14[609] = sv14[549] + sv14[204];
        sv14[610] = sv14[205] + sv14[517];
        sv14[611] = sv14[206] + sv14[525];
        sv14[612] = sv14[207] + sv14[532];
        sv14[613] = sv14[208] + sv14[538];
        sv14[614] = sv14[209] + sv14[543];
        sv14[615] = sv14[210] + sv14[547];
        sv14[616] = sv14[550] + sv14[211];
        sv14[617] = sv14[551] + sv14[212];
        sv14[618] = sv14[213] + sv14[552];
        sv14[619] = sv14[214] + sv14[518];
        sv14[620] = sv14[215] + sv14[526];
        sv14[621] = sv14[216] + sv14[533];
        sv14[622] = sv14[217] + sv14[539];
        sv14[623] = sv14[218] + sv14[544];
        sv14[624] = sv14[219] + sv14[548];
        sv14[625] = sv14[551] + sv14[220];
        sv14[626] = sv14[553] + sv14[221];
        sv14[627] = sv14[222] + sv14[554];
        sv14[628] = sv14[223] + sv14[519];
        sv14[629] = sv14[224] + sv14[527];
        sv14[630] = sv14[225] + sv14[534];
        sv14[631] = sv14[226] + sv14[540];
        sv14[632] = sv14[227] + sv14[545];
        sv14[633] = sv14[228] + sv14[549];
        sv14[634] = sv14[552] + sv14[229];
        sv14[635] = sv14[554] + sv14[230];
        sv14[636] = sv14[231] + sv14[555];
        sv14[637] = sp[22] * sv14[133];
        sv14[638] = sp[26] * sv14[133];
        sv14[639] = sp[30] * sv14[133];
        sv14[640] = sp[22] * sv14[140];
        sv14[641] = sp[26] * sv14[140];
        sv14[642] = sp[30] * sv14[140];
        sv14[643] = sp[22] * sv14[147];
        sv14[644] = sp[26] * sv14[147];
        sv14[645] = sp[30] * sv14[147];
        sv14[646] = sp[34] * sv14[322];
        sv14[647] = sp[38] * sv14[322];
        sv14[648] = sp[42] * sv14[322];
        sv14[649] = sp[34] * sv14[329];
        sv14[650] = sp[38] * sv14[329];
        sv14[651] = sp[42] * sv14[329];
        sv14[652] = sp[34] * sv14[336];
        sv14[653] = sp[38] * sv14[336];
        sv14[654] = sp[42] * sv14[336];
        sv14[655] = sv14[640] * sv14[649];
        sv14[656] = sv14[640] * sv14[650];
        sv14[657] = sv14[640] * sv14[651];
        sv14[658] = sv14[640] * sv14[646];
        sv14[659] = sv14[640] * sv14[647];
        sv14[660] = sv14[640] * sv14[648];
        sv14[661] = sv14[640] * sv14[652];
        sv14[662] = sv14[640] * sv14[653];
        sv14[663] = sv14[640] * sv14[654];
        sv14[664] = sv14[641] * sv14[649];
        sv14[665] = sv14[641] * sv14[650];
        sv14[666] = sv14[641] * sv14[651];
        sv14[667] = sv14[641] * sv14[646];
        sv14[668] = sv14[641] * sv14[647];
        sv14[669] = sv14[641] * sv14[648];
        sv14[670] = sv14[641] * sv14[652];
        sv14[671] = sv14[641] * sv14[653];
        sv14[672] = sv14[641] * sv14[654];
        sv14[673] = sv14[642] * sv14[649];
        sv14[674] = sv14[642] * sv14[650];
        sv14[675] = sv14[642] * sv14[651];
        sv14[676] = sv14[642] * sv14[646];
        sv14[677] = sv14[642] * sv14[647];
        sv14[678] = sv14[642] * sv14[648];
        sv14[679] = sv14[642] * sv14[652];
        sv14[680] = sv14[642] * sv14[653];
        sv14[681] = sv14[642] * sv14[654];
        sv14[682] = sv14[637] * sv14[649];
        sv14[683] = sv14[637] * sv14[650];
        sv14[684] = sv14[637] * sv14[651];
        sv14[685] = sv14[637] * sv14[646];
        sv14[686] = sv14[637] * sv14[647];
        sv14[687] = sv14[637] * sv14[648];
        sv14[688] = sv14[637] * sv14[652];
        sv14[689] = sv14[637] * sv14[653];
        sv14[690] = sv14[637] * sv14[654];
        sv14[691] = sv14[638] * sv14[649];
        sv14[692] = sv14[638] * sv14[650];
        sv14[693] = sv14[638] * sv14[651];
        sv14[694] = sv14[638] * sv14[646];
        sv14[695] = sv14[638] * sv14[647];
        sv14[696] = sv14[638] * sv14[648];
        sv14[697] = sv14[638] * sv14[652];
        sv14[698] = sv14[638] * sv14[653];
        sv14[699] = sv14[638] * sv14[654];
        sv14[700] = sv14[639] * sv14[649];
        sv14[701] = sv14[639] * sv14[650];
        sv14[702] = sv14[639] * sv14[651];
        sv14[703] = sv14[639] * sv14[646];
        sv14[704] = sv14[639] * sv14[647];
        sv14[705] = sv14[639] * sv14[648];
        sv14[706] = sv14[639] * sv14[652];
        sv14[707] = sv14[639] * sv14[653];
        sv14[708] = sv14[639] * sv14[654];
        sv14[709] = sv14[643] * sv14[649];
        sv14[710] = sv14[643] * sv14[650];
        sv14[711] = sv14[643] * sv14[651];
        sv14[712] = sv14[643] * sv14[646];
        sv14[713] = sv14[643] * sv14[647];
        sv14[714] = sv14[643] * sv14[648];
        sv14[715] = sv14[643] * sv14[652];
        sv14[716] = sv14[643] * sv14[653];
        sv14[717] = sv14[643] * sv14[654];
        sv14[718] = sv14[644] * sv14[649];
        sv14[719] = sv14[644] * sv14[650];
        sv14[720] = sv14[644] * sv14[651];
        sv14[721] = sv14[644] * sv14[646];
        sv14[722] = sv14[644] * sv14[647];
        sv14[723] = sv14[644] * sv14[648];
        sv14[724] = sv14[644] * sv14[652];
        sv14[725] = sv14[644] * sv14[653];
        sv14[726] = sv14[644] * sv14[654];
        sv14[727] = sv14[645] * sv14[649];
        sv14[728] = sv14[645] * sv14[650];
        sv14[729] = sv14[645] * sv14[651];
        sv14[730] = sv14[645] * sv14[646];
        sv14[731] = sv14[645] * sv14[647];
        sv14[732] = sv14[645] * sv14[648];
        sv14[733] = sv14[645] * sv14[652];
        sv14[734] = sv14[645] * sv14[653];
        sv14[735] = sv14[645] * sv14[654];
        sv14[736] = sv14[556] + sv14[655];
        sv14[737] = sv14[557] + sv14[664];
        sv14[738] = sv14[558] + sv14[673];
        sv14[739] = sv14[559] + sv14[682];
        sv14[740] = sv14[560] + sv14[691];
        sv14[741] = sv14[561] + sv14[700];
        sv14[742] = sv14[562] + sv14[709];
        sv14[743] = sv14[563] + sv14[718];
        sv14[744] = sv14[564] + sv14[727];
        sv14[745] = sv14[565] + sv14[656];
        sv14[746] = sv14[566] + sv14[665];
        sv14[747] = sv14[567] + sv14[674];
        sv14[748] = sv14[568] + sv14[683];
        sv14[749] = sv14[569] + sv14[692];
        sv14[750] = sv14[570] + sv14[701];
        sv14[751] = sv14[571] + sv14[710];
        sv14[752] = sv14[572] + sv14[719];
        sv14[753] = sv14[573] + sv14[728];
        sv14[754] = sv14[574] + sv14[657];
        sv14[755] = sv14[575] + sv14[666];
        sv14[756] = sv14[576] + sv14[675];
        sv14[757] = sv14[577] + sv14[684];
        sv14[758] = sv14[578] + sv14[693];
        sv14[759] = sv14[579] + sv14[702];
        sv14[760] = sv14[580] + sv14[711];
        sv14[761] = sv14[581] + sv14[720];
        sv14[762] = sv14[582] + sv14[729];
        sv14[763] = sv14[583] + sv14[658];
        sv14[764] = sv14[584] + sv14[667];
        sv14[765] = sv14[585] + sv14[676];
        sv14[766] = sv14[586] + sv14[685];
        sv14[767] = sv14[587] + sv14[694];
        sv14[768] = sv14[588] + sv14[703];
        sv14[769] = sv14[589] + sv14[712];
        sv14[770] = sv14[590] + sv14[721];
        sv14[771] = sv14[591] + sv14[730];
        sv14[772] = sv14[592] + sv14[659];
        sv14[773] = sv14[593] + sv14[668];
        sv14[774] = sv14[594] + sv14[677];
        sv14[775] = sv14[595] + sv14[686];
        sv14[776] = sv14[596] + sv14[695];
        sv14[777] = sv14[597] + sv14[704];
        sv14[778] = sv14[598] + sv14[713];
        sv14[779] = sv14[599] + sv14[722];
        sv14[780] = sv14[600] + sv14[731];
        sv14[781] = sv14[601] + sv14[660];
        sv14[782] = sv14[602] + sv14[669];
        sv14[783] = sv14[603] + sv14[678];
        sv14[784] = sv14[604] + sv14[687];
        sv14[785] = sv14[605] + sv14[696];
        sv14[786] = sv14[606] + sv14[705];
        sv14[787] = sv14[607] + sv14[714];
        sv14[788] = sv14[608] + sv14[723];
        sv14[789] = sv14[609] + sv14[732];
        sv14[790] = sv14[610] + sv14[661];
        sv14[791] = sv14[611] + sv14[670];
        sv14[792] = sv14[612] + sv14[679];
        sv14[793] = sv14[613] + sv14[688];
        sv14[794] = sv14[614] + sv14[697];
        sv14[795] = sv14[615] + sv14[706];
        sv14[796] = sv14[616] + sv14[715];
        sv14[797] = sv14[617] + sv14[724];
        sv14[798] = sv14[618] + sv14[733];
        sv14[799] = sv14[619] + sv14[662];
        sv14[800] = sv14[620] + sv14[671];
        sv14[801] = sv14[621] + sv14[680];
        sv14[802] = sv14[622] + sv14[689];
        sv14[803] = sv14[623] + sv14[698];
        sv14[804] = sv14[624] + sv14[707];
        sv14[805] = sv14[625] + sv14[716];
        sv14[806] = sv14[626] + sv14[725];
        sv14[807] = sv14[627] + sv14[734];
        sv14[808] = sv14[628] + sv14[663];
        sv14[809] = sv14[629] + sv14[672];
        sv14[810] = sv14[630] + sv14[681];
        sv14[811] = sv14[631] + sv14[690];
        sv14[812] = sv14[632] + sv14[699];
        sv14[813] = sv14[633] + sv14[708];
        sv14[814] = sv14[634] + sv14[717];
        sv14[815] = sv14[635] + sv14[726];
        sv14[816] = sv14[636] + sv14[735];
        sv14[817] = sv14[736] + sv14[421];
        sv14[818] = sv14[737] + sv14[422];
        sv14[819] = sv14[738] + sv14[423];
        sv14[820] = sv14[739] + sv14[424];
        sv14[821] = sv14[740] + sv14[425];
        sv14[822] = sv14[741] + sv14[426];
        sv14[823] = sv14[742] + sv14[427];
        sv14[824] = sv14[743] + sv14[428];
        sv14[825] = sv14[744] + sv14[429];
        sv14[826] = sv14[745] + sv14[430];
        sv14[827] = sv14[746] + sv14[431];
        sv14[828] = sv14[747] + sv14[432];
        sv14[829] = sv14[748] + sv14[433];
        sv14[830] = sv14[749] + sv14[434];
        sv14[831] = sv14[750] + sv14[435];
        sv14[832] = sv14[751] + sv14[436];
        sv14[833] = sv14[752] + sv14[437];
        sv14[834] = sv14[753] + sv14[438];
        sv14[835] = sv14[439] + sv14[754];
        sv14[836] = sv14[440] + sv14[755];
        sv14[837] = sv14[441] + sv14[756];
        sv14[838] = sv14[757] + sv14[442];
        sv14[839] = sv14[758] + sv14[443];
        sv14[840] = sv14[759] + sv14[444];
        sv14[841] = sv14[445] + sv14[760];
        sv14[842] = sv14[446] + sv14[761];
        sv14[843] = sv14[447] + sv14[762];
        sv14[844] = sv14[763] + sv14[448];
        sv14[845] = sv14[764] + sv14[449];
        sv14[846] = sv14[765] + sv14[450];
        sv14[847] = sv14[766] + sv14[451];
        sv14[848] = sv14[767] + sv14[452];
        sv14[849] = sv14[768] + sv14[453];
        sv14[850] = sv14[769] + sv14[454];
        sv14[851] = sv14[770] + sv14[455];
        sv14[852] = sv14[771] + sv14[456];
        sv14[853] = sv14[772] + sv14[457];
        sv14[854] = sv14[773] + sv14[458];
        sv14[855] = sv14[774] + sv14[459];
        sv14[856] = sv14[775] + sv14[460];
        sv14[857] = sv14[776] + sv14[461];
        sv14[858] = sv14[777] + sv14[462];
        sv14[859] = sv14[778] + sv14[463];
        sv14[860] = sv14[779] + sv14[464];
        sv14[861] = sv14[780] + sv14[465];
        sv14[862] = sv14[781] + sv14[466];
        sv14[863] = sv14[782] + sv14[467];
        sv14[864] = sv14[783] + sv14[468];
        sv14[865] = sv14[784] + sv14[469];
        sv14[866] = sv14[785] + sv14[470];
        sv14[867] = sv14[786] + sv14[471];
        sv14[868] = sv14[472] + sv14[787];
        sv14[869] = sv14[473] + sv14[788];
        sv14[870] = sv14[474] + sv14[789];
        sv14[871] = sv14[790] + sv14[475];
        sv14[872] = sv14[791] + sv14[476];
        sv14[873] = sv14[792] + sv14[477];
        sv14[874] = sv14[793] + sv14[478];
        sv14[875] = sv14[794] + sv14[479];
        sv14[876] = sv14[795] + sv14[480];
        sv14[877] = sv14[796] + sv14[481];
        sv14[878] = sv14[797] + sv14[482];
        sv14[879] = sv14[798] + sv14[483];
        sv14[880] = sv14[799] + sv14[484];
        sv14[881] = sv14[800] + sv14[485];
        sv14[882] = sv14[801] + sv14[486];
        sv14[883] = sv14[802] + sv14[487];
        sv14[884] = sv14[803] + sv14[488];
        sv14[885] = sv14[804] + sv14[489];
        sv14[886] = sv14[805] + sv14[490];
        sv14[887] = sv14[806] + sv14[491];
        sv14[888] = sv14[807] + sv14[492];
        sv14[889] = sv14[493] + sv14[808];
        sv14[890] = sv14[494] + sv14[809];
        sv14[891] = sv14[495] + sv14[810];
        sv14[892] = sv14[811] + sv14[496];
        sv14[893] = sv14[812] + sv14[497];
        sv14[894] = sv14[813] + sv14[498];
        sv14[895] = sv14[499] + sv14[814];
        sv14[896] = sv14[500] + sv14[815];
        sv14[897] = sv14[501] + sv14[816];
        sv14[898] = sv14[655] + sv14[340];
        sv14[899] = sv14[656] + sv14[341];
        sv14[900] = sv14[342] + sv14[657];
        sv14[901] = sv14[658] + sv14[343];
        sv14[902] = sv14[659] + sv14[344];
        sv14[903] = sv14[660] + sv14[345];
        sv14[904] = sv14[661] + sv14[346];
        sv14[905] = sv14[662] + sv14[347];
        sv14[906] = sv14[348] + sv14[663];
        sv14[907] = sv14[664] + sv14[349];
        sv14[908] = sv14[665] + sv14[350];
        sv14[909] = sv14[351] + sv14[666];
        sv14[910] = sv14[667] + sv14[352];
        sv14[911] = sv14[668] + sv14[353];
        sv14[912] = sv14[669] + sv14[354];
        sv14[913] = sv14[670] + sv14[355];
        sv14[914] = sv14[671] + sv14[356];
        sv14[915] = sv14[357] + sv14[672];
        sv14[916] = sv14[673] + sv14[358];
        sv14[917] = sv14[674] + sv14[359];
        sv14[918] = sv14[360] + sv14[675];
        sv14[919] = sv14[676] + sv14[361];
        sv14[920] = sv14[677] + sv14[362];
        sv14[921] = sv14[678] + sv14[363];
        sv14[922] = sv14[679] + sv14[364];
        sv14[923] = sv14[680] + sv14[365];
        sv14[924] = sv14[366] + sv14[681];
        sv14[925] = sv14[682] + sv14[367];
        sv14[926] = sv14[683] + sv14[368];
        sv14[927] = sv14[684] + sv14[369];
        sv14[928] = sv14[685] + sv14[370];
        sv14[929] = sv14[686] + sv14[371];
        sv14[930] = sv14[687] + sv14[372];
        sv14[931] = sv14[688] + sv14[373];
        sv14[932] = sv14[689] + sv14[374];
        sv14[933] = sv14[690] + sv14[375];
        sv14[934] = sv14[691] + sv14[376];
        sv14[935] = sv14[692] + sv14[377];
        sv14[936] = sv14[693] + sv14[378];
        sv14[937] = sv14[694] + sv14[379];
        sv14[938] = sv14[695] + sv14[380];
        sv14[939] = sv14[696] + sv14[381];
        sv14[940] = sv14[697] + sv14[382];
        sv14[941] = sv14[698] + sv14[383];
        sv14[942] = sv14[699] + sv14[384];
        sv14[943] = sv14[700] + sv14[385];
        sv14[944] = sv14[701] + sv14[386];
        sv14[945] = sv14[702] + sv14[387];
        sv14[946] = sv14[703] + sv14[388];
        sv14[947] = sv14[704] + sv14[389];
        sv14[948] = sv14[705] + sv14[390];
        sv14[949] = sv14[706] + sv14[391];
        sv14[950] = sv14[707] + sv14[392];
        sv14[951] = sv14[708] + sv14[393];
        sv14[952] = sv14[709] + sv14[394];
        sv14[953] = sv14[710] + sv14[395];
        sv14[954] = sv14[396] + sv14[711];
        sv14[955] = sv14[712] + sv14[397];
        sv14[956] = sv14[713] + sv14[398];
        sv14[957] = sv14[399] + sv14[714];
        sv14[958] = sv14[715] + sv14[400];
        sv14[959] = sv14[716] + sv14[401];
        sv14[960] = sv14[402] + sv14[717];
        sv14[961] = sv14[718] + sv14[403];
        sv14[962] = sv14[719] + sv14[404];
        sv14[963] = sv14[405] + sv14[720];
        sv14[964] = sv14[721] + sv14[406];
        sv14[965] = sv14[722] + sv14[407];
        sv14[966] = sv14[408] + sv14[723];
        sv14[967] = sv14[724] + sv14[409];
        sv14[968] = sv14[725] + sv14[410];
        sv14[969] = sv14[411] + sv14[726];
        sv14[970] = sv14[727] + sv14[412];
        sv14[971] = sv14[728] + sv14[413];
        sv14[972] = sv14[414] + sv14[729];
        sv14[973] = sv14[730] + sv14[415];
        sv14[974] = sv14[731] + sv14[416];
        sv14[975] = sv14[417] + sv14[732];
        sv14[976] = sv14[733] + sv14[418];
        sv14[977] = sv14[734] + sv14[419];
        sv14[978] = sv14[420] + sv14[735];
        sv14[979] = sp[22] * sv14[322];
        sv14[980] = sp[26] * sv14[322];
        sv14[981] = sp[30] * sv14[322];
        sv14[982] = sp[22] * sv14[329];
        sv14[983] = sp[26] * sv14[329];
        sv14[984] = sp[30] * sv14[329];
        sv14[985] = sp[22] * sv14[336];
        sv14[986] = sp[26] * sv14[336];
        sv14[987] = sp[30] * sv14[336];
        sv14[988] = sv14[982] * sv14[982];
        sv14[989] = sv14[982] * sv14[983];
        sv14[990] = sv14[984] * sv14[982];
        sv14[991] = sv14[979] * sv14[982];
        sv14[992] = sv14[980] * sv14[982];
        sv14[993] = sv14[981] * sv14[982];
        sv14[994] = sv14[985] * sv14[982];
        sv14[995] = sv14[986] * sv14[982];
        sv14[996] = sv14[987] * sv14[982];
        sv14[997] = sv14[983] * sv14[983];
        sv14[998] = sv14[984] * sv14[983];
        sv14[999] = sv14[979] * sv14[983];
        sv14[1000] = sv14[980] * sv14[983];
        sv14[1001] = sv14[981] * sv14[983];
        sv14[1002] = sv14[985] * sv14[983];
        sv14[1003] = sv14[986] * sv14[983];
        sv14[1004] = sv14[987] * sv14[983];
        sv14[1005] = sv14[984] * sv14[984];
        sv14[1006] = sv14[979] * sv14[984];
        sv14[1007] = sv14[980] * sv14[984];
        sv14[1008] = sv14[981] * sv14[984];
        sv14[1009] = sv14[985] * sv14[984];
        sv14[1010] = sv14[986] * sv14[984];
        sv14[1011] = sv14[987] * sv14[984];
        sv14[1012] = sv14[979] * sv14[979];
        sv14[1013] = sv14[979] * sv14[980];
        sv14[1014] = sv14[981] * sv14[979];
        sv14[1015] = sv14[979] * sv14[985];
        sv14[1016] = sv14[979] * sv14[986];
        sv14[1017] = sv14[979] * sv14[987];
        sv14[1018] = sv14[980] * sv14[980];
        sv14[1019] = sv14[981] * sv14[980];
        sv14[1020] = sv14[980] * sv14[985];
        sv14[1021] = sv14[980] * sv14[986];
        sv14[1022] = sv14[980] * sv14[987];
        sv14[1023] = sv14[981] * sv14[981];
        sv14[1024] = sv14[981] * sv14[985];
        sv14[1025] = sv14[981] * sv14[986];
        sv14[1026] = sv14[981] * sv14[987];
        sv14[1027] = sv14[985] * sv14[985];
        sv14[1028] = sv14[985] * sv14[986];
        sv14[1029] = sv14[987] * sv14[985];
        sv14[1030] = sv14[986] * sv14[986];
        sv14[1031] = sv14[987] * sv14[986];
        sv14[1032] = sv14[987] * sv14[987];
        sv14[1033] = sv14[898] + sv14[988];
        sv14[1034] = sv14[899] + sv14[989];
        sv14[1035] = sv14[900] + sv14[990];
        sv14[1036] = sv14[901] + sv14[991];
        sv14[1037] = sv14[902] + sv14[992];
        sv14[1038] = sv14[903] + sv14[993];
        sv14[1039] = sv14[904] + sv14[994];
        sv14[1040] = sv14[905] + sv14[995];
        sv14[1041] = sv14[906] + sv14[996];
        sv14[1042] = sv14[907] + sv14[989];
        sv14[1043] = sv14[908] + sv14[997];
        sv14[1044] = sv14[909] + sv14[998];
        sv14[1045] = sv14[910] + sv14[999];
        sv14[1046] = sv14[911] + sv14[1000];
        sv14[1047] = sv14[912] + sv14[1001];
        sv14[1048] = sv14[913] + sv14[1002];
        sv14[1049] = sv14[914] + sv14[1003];
        sv14[1050] = sv14[915] + sv14[1004];
        sv14[1051] = sv14[916] + sv14[990];
        sv14[1052] = sv14[917] + sv14[998];
        sv14[1053] = sv14[918] + sv14[1005];
        sv14[1054] = sv14[919] + sv14[1006];
        sv14[1055] = sv14[920] + sv14[1007];
        sv14[1056] = sv14[921] + sv14[1008];
        sv14[1057] = sv14[922] + sv14[1009];
        sv14[1058] = sv14[923] + sv14[1010];
        sv14[1059] = sv14[924] + sv14[1011];
        sv14[1060] = sv14[925] + sv14[991];
        sv14[1061] = sv14[926] + sv14[999];
        sv14[1062] = sv14[927] + sv14[1006];
        sv14[1063] = sv14[928] + sv14[1012];
        sv14[1064] = sv14[929] + sv14[1013];
        sv14[1065] = sv14[930] + sv14[1014];
        sv14[1066] = sv14[931] + sv14[1015];
        sv14[1067] = sv14[932] + sv14[1016];
        sv14[1068] = sv14[933] + sv14[1017];
        sv14[1069] = sv14[934] + sv14[992];
        sv14[1070] = sv14[935] + sv14[1000];
        sv14[1071] = sv14[936] + sv14[1007];
        sv14[1072] = sv14[937] + sv14[1013];
        sv14[1073] = sv14[938] + sv14[1018];
        sv14[1074] = sv14[939] + sv14[1019];
        sv14[1075] = sv14[940] + sv14[1020];
        sv14[1076] = sv14[941] + sv14[1021];
        sv14[1077] = sv14[942] + sv14[1022];
        sv14[1078] = sv14[943] + sv14[993];
        sv14[1079] = sv14[944] + sv14[1001];
        sv14[1080] = sv14[945] + sv14[1008];
        sv14[1081] = sv14[946] + sv14[1014];
        sv14[1082] = sv14[947] + sv14[1019];
        sv14[1083] = sv14[948] + sv14[1023];
        sv14[1084] = sv14[949] + sv14[1024];
        sv14[1085] = sv14[950] + sv14[1025];
        sv14[1086] = sv14[951] + sv14[1026];
        sv14[1087] = sv14[952] + sv14[994];
        sv14[1088] = sv14[953] + sv14[1002];
        sv14[1089] = sv14[954] + sv14[1009];
        sv14[1090] = sv14[955] + sv14[1015];
        sv14[1091] = sv14[956] + sv14[1020];
        sv14[1092] = sv14[957] + sv14[1024];
        sv14[1093] = sv14[958] + sv14[1027];
        sv14[1094] = sv14[959] + sv14[1028];
        sv14[1095] = sv14[960] + sv14[1029];
        sv14[1096] = sv14[961] + sv14[995];
        sv14[1097] = sv14[962] + sv14[1003];
        sv14[1098] = sv14[963] + sv14[1010];
        sv14[1099] = sv14[964] + sv14[1016];
        sv14[1100] = sv14[965] + sv14[1021];
        sv14[1101] = sv14[966] + sv14[1025];
        sv14[1102] = sv14[967] + sv14[1028];
        sv14[1103] = sv14[968] + sv14[1030];
        sv14[1104] = sv14[969] + sv14[1031];
        sv14[1105] = sv14[970] + sv14[996];
        sv14[1106] = sv14[971] + sv14[1004];
        sv14[1107] = sv14[972] + sv14[1011];
        sv14[1108] = sv14[973] + sv14[1017];
        sv14[1109] = sv14[974] + sv14[1022];
        sv14[1110] = sv14[975] + sv14[1026];
        sv14[1111] = sv14[976] + sv14[1029];
        sv14[1112] = sv14[977] + sv14[1031];
        sv14[1113] = sv14[978] + sv14[1032];
        sv14[1114] = sv14[817] + sv14[1033];
        sv14[1115] = sv14[818] + sv14[1034];
        sv14[1116] = sv14[819] + sv14[1035];
        sv14[1117] = sv14[820] + sv14[1036];
        sv14[1118] = sv14[821] + sv14[1037];
        sv14[1119] = sv14[822] + sv14[1038];
        sv14[1120] = sv14[823] + sv14[1039];
        sv14[1121] = sv14[824] + sv14[1040];
        sv14[1122] = sv14[825] + sv14[1041];
        sv14[1123] = sv14[826] + sv14[1042];
        sv14[1124] = sv14[827] + sv14[1043];
        sv14[1125] = sv14[828] + sv14[1044];
        sv14[1126] = sv14[829] + sv14[1045];
        sv14[1127] = sv14[830] + sv14[1046];
        sv14[1128] = sv14[831] + sv14[1047];
        sv14[1129] = sv14[832] + sv14[1048];
        sv14[1130] = sv14[833] + sv14[1049];
        sv14[1131] = sv14[834] + sv14[1050];
        sv14[1132] = sv14[835] + sv14[1051];
        sv14[1133] = sv14[836] + sv14[1052];
        sv14[1134] = sv14[837] + sv14[1053];
        sv14[1135] = sv14[838] + sv14[1054];
        sv14[1136] = sv14[839] + sv14[1055];
        sv14[1137] = sv14[840] + sv14[1056];
        sv14[1138] = sv14[841] + sv14[1057];
        sv14[1139] = sv14[842] + sv14[1058];
        sv14[1140] = sv14[843] + sv14[1059];
        sv14[1141] = sv14[844] + sv14[1060];
        sv14[1142] = sv14[845] + sv14[1061];
        sv14[1143] = sv14[846] + sv14[1062];
        sv14[1144] = sv14[847] + sv14[1063];
        sv14[1145] = sv14[848] + sv14[1064];
        sv14[1146] = sv14[849] + sv14[1065];
        sv14[1147] = sv14[850] + sv14[1066];
        sv14[1148] = sv14[851] + sv14[1067];
        sv14[1149] = sv14[852] + sv14[1068];
        sv14[1150] = sv14[853] + sv14[1069];
        sv14[1151] = sv14[854] + sv14[1070];
        sv14[1152] = sv14[855] + sv14[1071];
        sv14[1153] = sv14[856] + sv14[1072];
        sv14[1154] = sv14[857] + sv14[1073];
        sv14[1155] = sv14[858] + sv14[1074];
        sv14[1156] = sv14[859] + sv14[1075];
        sv14[1157] = sv14[860] + sv14[1076];
        sv14[1158] = sv14[861] + sv14[1077];
        sv14[1159] = sv14[862] + sv14[1078];
        sv14[1160] = sv14[863] + sv14[1079];
        sv14[1161] = sv14[864] + sv14[1080];
        sv14[1162] = sv14[865] + sv14[1081];
        sv14[1163] = sv14[866] + sv14[1082];
        sv14[1164] = sv14[867] + sv14[1083];
        sv14[1165] = sv14[868] + sv14[1084];
        sv14[1166] = sv14[869] + sv14[1085];
        sv14[1167] = sv14[870] + sv14[1086];
        sv14[1168] = sv14[871] + sv14[1087];
        sv14[1169] = sv14[872] + sv14[1088];
        sv14[1170] = sv14[873] + sv14[1089];
        sv14[1171] = sv14[874] + sv14[1090];
        sv14[1172] = sv14[875] + sv14[1091];
        sv14[1173] = sv14[876] + sv14[1092];
        sv14[1174] = sv14[877] + sv14[1093];
        sv14[1175] = sv14[878] + sv14[1094];
        sv14[1176] = sv14[879] + sv14[1095];
        sv14[1177] = sv14[880] + sv14[1096];
        sv14[1178] = sv14[881] + sv14[1097];
        sv14[1179] = sv14[882] + sv14[1098];
        sv14[1180] = sv14[883] + sv14[1099];
        sv14[1181] = sv14[884] + sv14[1100];
        sv14[1182] = sv14[885] + sv14[1101];
        sv14[1183] = sv14[886] + sv14[1102];
        sv14[1184] = sv14[887] + sv14[1103];
        sv14[1185] = sv14[888] + sv14[1104];
        sv14[1186] = sv14[889] + sv14[1105];
        sv14[1187] = sv14[890] + sv14[1106];
        sv14[1188] = sv14[891] + sv14[1107];
        sv14[1189] = sv14[892] + sv14[1108];
        sv14[1190] = sv14[893] + sv14[1109];
        sv14[1191] = sv14[894] + sv14[1110];
        sv14[1192] = sv14[895] + sv14[1111];
        sv14[1193] = sv14[896] + sv14[1112];
        sv14[1194] = sv14[897] + sv14[1113];
        sv14[1195] = (1 + sv14[27]) * (1 + sv14[27]);
        sv14[1196] = sv14[52] * sv14[52];
        sv14[1197] = sv14[1195] + sv14[1196];
        sv14[1198] = sv14[46] * sv14[46];
        sv14[1199] = sv14[1197] + sv14[1198];
        sv14[1200] = sv14[4] * sv14[4];
        sv14[1201] = sv14[38] * sv14[38];
        sv14[1202] = sv14[1200] + sv14[1201];
        sv14[1203] = (1 + sv14[15]) * (1 + sv14[15]);
        sv14[1204] = sv14[1202] + sv14[1203];
        sv14[1205] = (1 + sv14[32]) * (1 + sv14[32]);
        sv14[1206] = sv14[20] * sv14[20];
        sv14[1207] = sv14[1205] + sv14[1206];
        sv14[1208] = sv14[9] * sv14[9];
        sv14[1209] = sv14[1207] + sv14[1208];
        sv14[1210] = sv14[1204] * sv14[1209];
        sv14[1211] = (1 + sv14[32]) * sv14[38];
        sv14[1212] = sv14[4] * sv14[20];
        sv14[1213] = sv14[1211] + sv14[1212];
        sv14[1214] = (1 + sv14[15]) * sv14[9];
        sv14[1215] = sv14[1213] + sv14[1214];
        sv14[1216] = sv14[1215] * sv14[1215];
        sv14[1217] = sv14[1210] + -1 * sv14[1216];
        sv14[1218] = sv14[1199] * sv14[1217];
        sv14[1219] = (1 + sv14[32]) * sv14[52];
        sv14[1220] = (1 + sv14[27]) * sv14[20];
        sv14[1221] = sv14[1219] + sv14[1220];
        sv14[1222] = sv14[46] * sv14[9];
        sv14[1223] = sv14[1221] + sv14[1222];
        sv14[1224] = (1 + sv14[27]) * sv14[4];
        sv14[1225] = sv14[38] * sv14[52];
        sv14[1226] = sv14[1224] + sv14[1225];
        sv14[1227] = (1 + sv14[15]) * sv14[46];
        sv14[1228] = sv14[1226] + sv14[1227];
        sv14[1229] = sv14[1228] * sv14[1215];
        sv14[1230] = sv14[1204] * sv14[1223];
        sv14[1231] = sv14[1229] + -1 * sv14[1230];
        sv14[1232] = sv14[1223] * sv14[1231];
        sv14[1233] = sv14[1218] + sv14[1232];
        sv14[1234] = sv14[1215] * sv14[1223];
        sv14[1235] = sv14[1228] * sv14[1209];
        sv14[1236] = sv14[1234] + -1 * sv14[1235];
        sv14[1237] = sv14[1228] * sv14[1236];
        sv14[1238] = sv14[1233] + sv14[1237];
        sv14[1239] = std::pow(sv14[1238], -1 + -1 * w[3][0]);
        sv14[1240] = std::pow(sv14[1238], -1 + w[3][0]);
        sv14[1241] = -1 * sv14[1239] + sv14[1240];
        sv14[1242] = sv14[1241] * sp[43];
        sv14[1243] = sv14[1199] + sv14[1209];
        sv14[1244] = sv14[1243] + sv14[1204];
        sv14[1245] = sv14[1244] * (-0.3333333333333333 * w[1][0]);
        sv14[1246] = sv14[1245] * std::pow(sv14[1238], -1.333333333333333);
        sv14[1247] = sv14[1242] + sv14[1246];
        sv14[1248] = sv14[1238] * sv14[1247];
        sv14[1249] = sv14[1114] * (2.0 * sv14[1248]);
        sv14[1250] = sv14[1115] * (2.0 * sv14[1248]);
        sv14[1251] = sv14[1116] * (2.0 * sv14[1248]);
        sv14[1252] = sv14[1117] * (2.0 * sv14[1248]);
        sv14[1253] = sv14[1118] * (2.0 * sv14[1248]);
        sv14[1254] = sv14[1119] * (2.0 * sv14[1248]);
        sv14[1255] = sv14[1120] * (2.0 * sv14[1248]);
        sv14[1256] = sv14[1121] * (2.0 * sv14[1248]);
        sv14[1257] = sv14[1122] * (2.0 * sv14[1248]);
        sv14[1258] = sv14[1123] * (2.0 * sv14[1248]);
        sv14[1259] = sv14[1124] * (2.0 * sv14[1248]);
        sv14[1260] = sv14[1125] * (2.0 * sv14[1248]);
        sv14[1261] = sv14[1126] * (2.0 * sv14[1248]);
        sv14[1262] = sv14[1127] * (2.0 * sv14[1248]);
        sv14[1263] = sv14[1128] * (2.0 * sv14[1248]);
        sv14[1264] = sv14[1129] * (2.0 * sv14[1248]);
        sv14[1265] = sv14[1130] * (2.0 * sv14[1248]);
        sv14[1266] = sv14[1131] * (2.0 * sv14[1248]);
        sv14[1267] = sv14[1132] * (2.0 * sv14[1248]);
        sv14[1268] = sv14[1133] * (2.0 * sv14[1248]);
        sv14[1269] = sv14[1134] * (2.0 * sv14[1248]);
        sv14[1270] = sv14[1135] * (2.0 * sv14[1248]);
        sv14[1271] = sv14[1136] * (2.0 * sv14[1248]);
        sv14[1272] = sv14[1137] * (2.0 * sv14[1248]);
        sv14[1273] = sv14[1138] * (2.0 * sv14[1248]);
        sv14[1274] = sv14[1139] * (2.0 * sv14[1248]);
        sv14[1275] = sv14[1140] * (2.0 * sv14[1248]);
        sv14[1276] = sv14[1141] * (2.0 * sv14[1248]);
        sv14[1277] = sv14[1142] * (2.0 * sv14[1248]);
        sv14[1278] = sv14[1143] * (2.0 * sv14[1248]);
        sv14[1279] = sv14[1144] * (2.0 * sv14[1248]);
        sv14[1280] = sv14[1145] * (2.0 * sv14[1248]);
        sv14[1281] = sv14[1146] * (2.0 * sv14[1248]);
        sv14[1282] = sv14[1147] * (2.0 * sv14[1248]);
        sv14[1283] = sv14[1148] * (2.0 * sv14[1248]);
        sv14[1284] = sv14[1149] * (2.0 * sv14[1248]);
        sv14[1285] = sv14[1150] * (2.0 * sv14[1248]);
        sv14[1286] = sv14[1151] * (2.0 * sv14[1248]);
        sv14[1287] = sv14[1152] * (2.0 * sv14[1248]);
        sv14[1288] = sv14[1153] * (2.0 * sv14[1248]);
        sv14[1289] = sv14[1154] * (2.0 * sv14[1248]);
        sv14[1290] = sv14[1155] * (2.0 * sv14[1248]);
        sv14[1291] = sv14[1156] * (2.0 * sv14[1248]);
        sv14[1292] = sv14[1157] * (2.0 * sv14[1248]);
        sv14[1293] = sv14[1158] * (2.0 * sv14[1248]);
        sv14[1294] = sv14[1159] * (2.0 * sv14[1248]);
        sv14[1295] = sv14[1160] * (2.0 * sv14[1248]);
        sv14[1296] = sv14[1161] * (2.0 * sv14[1248]);
        sv14[1297] = sv14[1162] * (2.0 * sv14[1248]);
        sv14[1298] = sv14[1163] * (2.0 * sv14[1248]);
        sv14[1299] = sv14[1164] * (2.0 * sv14[1248]);
        sv14[1300] = sv14[1165] * (2.0 * sv14[1248]);
        sv14[1301] = sv14[1166] * (2.0 * sv14[1248]);
        sv14[1302] = sv14[1167] * (2.0 * sv14[1248]);
        sv14[1303] = sv14[1168] * (2.0 * sv14[1248]);
        sv14[1304] = sv14[1169] * (2.0 * sv14[1248]);
        sv14[1305] = sv14[1170] * (2.0 * sv14[1248]);
        sv14[1306] = sv14[1171] * (2.0 * sv14[1248]);
        sv14[1307] = sv14[1172] * (2.0 * sv14[1248]);
        sv14[1308] = sv14[1173] * (2.0 * sv14[1248]);
        sv14[1309] = sv14[1174] * (2.0 * sv14[1248]);
        sv14[1310] = sv14[1175] * (2.0 * sv14[1248]);
        sv14[1311] = sv14[1176] * (2.0 * sv14[1248]);
        sv14[1312] = sv14[1177] * (2.0 * sv14[1248]);
        sv14[1313] = sv14[1178] * (2.0 * sv14[1248]);
        sv14[1314] = sv14[1179] * (2.0 * sv14[1248]);
        sv14[1315] = sv14[1180] * (2.0 * sv14[1248]);
        sv14[1316] = sv14[1181] * (2.0 * sv14[1248]);
        sv14[1317] = sv14[1182] * (2.0 * sv14[1248]);
        sv14[1318] = sv14[1183] * (2.0 * sv14[1248]);
        sv14[1319] = sv14[1184] * (2.0 * sv14[1248]);
        sv14[1320] = sv14[1185] * (2.0 * sv14[1248]);
        sv14[1321] = sv14[1186] * (2.0 * sv14[1248]);
        sv14[1322] = sv14[1187] * (2.0 * sv14[1248]);
        sv14[1323] = sv14[1188] * (2.0 * sv14[1248]);
        sv14[1324] = sv14[1189] * (2.0 * sv14[1248]);
        sv14[1325] = sv14[1190] * (2.0 * sv14[1248]);
        sv14[1326] = sv14[1191] * (2.0 * sv14[1248]);
        sv14[1327] = sv14[1192] * (2.0 * sv14[1248]);
        sv14[1328] = sv14[1193] * (2.0 * sv14[1248]);
        sv14[1329] = sv14[1194] * (2.0 * sv14[1248]);
        sv14[1330] = (1 + sv14[27]) * sp[14];
        sv14[1331] = (1 + sv14[27]) * sp[17];
        sv14[1332] = (1 + sv14[27]) * sp[18];
        sv14[1333] = sv14[52] * sp[14];
        sv14[1334] = sv14[52] * sp[17];
        sv14[1335] = sv14[52] * sp[18];
        sv14[1336] = sv14[46] * sp[14];
        sv14[1337] = sv14[46] * sp[17];
        sv14[1338] = sv14[46] * sp[18];
        sv14[1339] = sv14[20] * sp[34];
        sv14[1340] = sv14[20] * sp[38];
        sv14[1341] = sv14[20] * sp[42];
        sv14[1342] = (1 + sv14[32]) * sp[34];
        sv14[1343] = (1 + sv14[32]) * sp[38];
        sv14[1344] = (1 + sv14[32]) * sp[42];
        sv14[1345] = sv14[9] * sp[34];
        sv14[1346] = sv14[9] * sp[38];
        sv14[1347] = sv14[9] * sp[42];
        sv14[1348] = sv14[1342] + sv14[1333];
        sv14[1349] = sv14[1343] + sv14[1334];
        sv14[1350] = sv14[1335] + sv14[1344];
        sv14[1351] = sv14[1339] + sv14[1330];
        sv14[1352] = sv14[1340] + sv14[1331];
        sv14[1353] = sv14[1332] + sv14[1341];
        sv14[1354] = sv14[1345] + sv14[1336];
        sv14[1355] = sv14[1346] + sv14[1337];
        sv14[1356] = sv14[1338] + sv14[1347];
        sv14[1357] = sv14[4] * sp[22];
        sv14[1358] = sv14[4] * sp[26];
        sv14[1359] = sv14[4] * sp[30];
        sv14[1360] = sv14[38] * sp[22];
        sv14[1361] = sv14[38] * sp[26];
        sv14[1362] = sv14[38] * sp[30];
        sv14[1363] = (1 + sv14[15]) * sp[22];
        sv14[1364] = (1 + sv14[15]) * sp[26];
        sv14[1365] = (1 + sv14[15]) * sp[30];
        sv14[1366] = sv14[1348] + sv14[1360];
        sv14[1367] = sv14[1349] + sv14[1361];
        sv14[1368] = sv14[1350] + sv14[1362];
        sv14[1369] = sv14[1351] + sv14[1357];
        sv14[1370] = sv14[1352] + sv14[1358];
        sv14[1371] = sv14[1353] + sv14[1359];
        sv14[1372] = sv14[1354] + sv14[1363];
        sv14[1373] = sv14[1355] + sv14[1364];
        sv14[1374] = sv14[1356] + sv14[1365];
        sv14[1375] = sv14[505] + sv14[63];
        sv14[1376] = sv14[506] + sv14[64];
        sv14[1377] = sv14[507] + sv14[65];
        sv14[1378] = sv14[502] + sv14[67];
        sv14[1379] = sv14[503] + sv14[68];
        sv14[1380] = sv14[504] + sv14[69];
        sv14[1381] = sv14[74] + sv14[508];
        sv14[1382] = sv14[75] + sv14[509];
        sv14[1383] = sv14[76] + sv14[510];
        sv14[1384] = sv14[1375] + sv14[982];
        sv14[1385] = sv14[1376] + sv14[983];
        sv14[1386] = sv14[1377] + sv14[984];
        sv14[1387] = sv14[1378] + sv14[979];
        sv14[1388] = sv14[1379] + sv14[980];
        sv14[1389] = sv14[1380] + sv14[981];
        sv14[1390] = sv14[1381] + sv14[985];
        sv14[1391] = sv14[1382] + sv14[986];
        sv14[1392] = sv14[1383] + sv14[987];
        sv14[1393] = sv14[1366] * sv14[1384];
        sv14[1394] = sv14[1366] * sv14[1385];
        sv14[1395] = sv14[1366] * sv14[1386];
        sv14[1396] = sv14[1366] * sv14[1387];
        sv14[1397] = sv14[1366] * sv14[1388];
        sv14[1398] = sv14[1366] * sv14[1389];
        sv14[1399] = sv14[1366] * sv14[1390];
        sv14[1400] = sv14[1366] * sv14[1391];
        sv14[1401] = sv14[1366] * sv14[1392];
        sv14[1402] = sv14[1367] * sv14[1384];
        sv14[1403] = sv14[1367] * sv14[1385];
        sv14[1404] = sv14[1367] * sv14[1386];
        sv14[1405] = sv14[1367] * sv14[1387];
        sv14[1406] = sv14[1367] * sv14[1388];
        sv14[1407] = sv14[1367] * sv14[1389];
        sv14[1408] = sv14[1367] * sv14[1390];
        sv14[1409] = sv14[1367] * sv14[1391];
        sv14[1410] = sv14[1367] * sv14[1392];
        sv14[1411] = sv14[1368] * sv14[1384];
        sv14[1412] = sv14[1368] * sv14[1385];
        sv14[1413] = sv14[1368] * sv14[1386];
        sv14[1414] = sv14[1368] * sv14[1387];
        sv14[1415] = sv14[1368] * sv14[1388];
        sv14[1416] = sv14[1368] * sv14[1389];
        sv14[1417] = sv14[1368] * sv14[1390];
        sv14[1418] = sv14[1368] * sv14[1391];
        sv14[1419] = sv14[1368] * sv14[1392];
        sv14[1420] = sv14[1369] * sv14[1384];
        sv14[1421] = sv14[1369] * sv14[1385];
        sv14[1422] = sv14[1369] * sv14[1386];
        sv14[1423] = sv14[1369] * sv14[1387];
        sv14[1424] = sv14[1369] * sv14[1388];
        sv14[1425] = sv14[1369] * sv14[1389];
        sv14[1426] = sv14[1369] * sv14[1390];
        sv14[1427] = sv14[1369] * sv14[1391];
        sv14[1428] = sv14[1369] * sv14[1392];
        sv14[1429] = sv14[1370] * sv14[1384];
        sv14[1430] = sv14[1370] * sv14[1385];
        sv14[1431] = sv14[1370] * sv14[1386];
        sv14[1432] = sv14[1370] * sv14[1387];
        sv14[1433] = sv14[1370] * sv14[1388];
        sv14[1434] = sv14[1370] * sv14[1389];
        sv14[1435] = sv14[1370] * sv14[1390];
        sv14[1436] = sv14[1370] * sv14[1391];
        sv14[1437] = sv14[1370] * sv14[1392];
        sv14[1438] = sv14[1371] * sv14[1384];
        sv14[1439] = sv14[1371] * sv14[1385];
        sv14[1440] = sv14[1371] * sv14[1386];
        sv14[1441] = sv14[1371] * sv14[1387];
        sv14[1442] = sv14[1371] * sv14[1388];
        sv14[1443] = sv14[1371] * sv14[1389];
        sv14[1444] = sv14[1371] * sv14[1390];
        sv14[1445] = sv14[1371] * sv14[1391];
        sv14[1446] = sv14[1371] * sv14[1392];
        sv14[1447] = sv14[1372] * sv14[1384];
        sv14[1448] = sv14[1372] * sv14[1385];
        sv14[1449] = sv14[1372] * sv14[1386];
        sv14[1450] = sv14[1372] * sv14[1387];
        sv14[1451] = sv14[1372] * sv14[1388];
        sv14[1452] = sv14[1372] * sv14[1389];
        sv14[1453] = sv14[1372] * sv14[1390];
        sv14[1454] = sv14[1372] * sv14[1391];
        sv14[1455] = sv14[1372] * sv14[1392];
        sv14[1456] = sv14[1373] * sv14[1384];
        sv14[1457] = sv14[1373] * sv14[1385];
        sv14[1458] = sv14[1373] * sv14[1386];
        sv14[1459] = sv14[1373] * sv14[1387];
        sv14[1460] = sv14[1373] * sv14[1388];
        sv14[1461] = sv14[1373] * sv14[1389];
        sv14[1462] = sv14[1373] * sv14[1390];
        sv14[1463] = sv14[1373] * sv14[1391];
        sv14[1464] = sv14[1373] * sv14[1392];
        sv14[1465] = sv14[1374] * sv14[1384];
        sv14[1466] = sv14[1374] * sv14[1385];
        sv14[1467] = sv14[1374] * sv14[1386];
        sv14[1468] = sv14[1374] * sv14[1387];
        sv14[1469] = sv14[1374] * sv14[1388];
        sv14[1470] = sv14[1374] * sv14[1389];
        sv14[1471] = sv14[1374] * sv14[1390];
        sv14[1472] = sv14[1374] * sv14[1391];
        sv14[1473] = sv14[1374] * sv14[1392];
        sv14[1474] = sv14[1393] + sv14[1393];
        sv14[1475] = sv14[1402] + sv14[1394];
        sv14[1476] = sv14[1395] + sv14[1411];
        sv14[1477] = sv14[1396] + sv14[1420];
        sv14[1478] = sv14[1397] + sv14[1429];
        sv14[1479] = sv14[1398] + sv14[1438];
        sv14[1480] = sv14[1399] + sv14[1447];
        sv14[1481] = sv14[1400] + sv14[1456];
        sv14[1482] = sv14[1401] + sv14[1465];
        sv14[1483] = sv14[1403] + sv14[1403];
        sv14[1484] = sv14[1404] + sv14[1412];
        sv14[1485] = sv14[1405] + sv14[1421];
        sv14[1486] = sv14[1406] + sv14[1430];
        sv14[1487] = sv14[1407] + sv14[1439];
        sv14[1488] = sv14[1408] + sv14[1448];
        sv14[1489] = sv14[1409] + sv14[1457];
        sv14[1490] = sv14[1410] + sv14[1466];
        sv14[1491] = sv14[1413] + sv14[1413];
        sv14[1492] = sv14[1414] + sv14[1422];
        sv14[1493] = sv14[1415] + sv14[1431];
        sv14[1494] = sv14[1416] + sv14[1440];
        sv14[1495] = sv14[1417] + sv14[1449];
        sv14[1496] = sv14[1418] + sv14[1458];
        sv14[1497] = sv14[1419] + sv14[1467];
        sv14[1498] = sv14[1423] + sv14[1423];
        sv14[1499] = sv14[1432] + sv14[1424];
        sv14[1500] = sv14[1425] + sv14[1441];
        sv14[1501] = sv14[1450] + sv14[1426];
        sv14[1502] = sv14[1459] + sv14[1427];
        sv14[1503] = sv14[1468] + sv14[1428];
        sv14[1504] = sv14[1433] + sv14[1433];
        sv14[1505] = sv14[1434] + sv14[1442];
        sv14[1506] = sv14[1451] + sv14[1435];
        sv14[1507] = sv14[1460] + sv14[1436];
        sv14[1508] = sv14[1469] + sv14[1437];
        sv14[1509] = sv14[1443] + sv14[1443];
        sv14[1510] = sv14[1452] + sv14[1444];
        sv14[1511] = sv14[1461] + sv14[1445];
        sv14[1512] = sv14[1470] + sv14[1446];
        sv14[1513] = sv14[1453] + sv14[1453];
        sv14[1514] = sv14[1462] + sv14[1454];
        sv14[1515] = sv14[1455] + sv14[1471];
        sv14[1516] = sv14[1463] + sv14[1463];
        sv14[1517] = sv14[1464] + sv14[1472];
        sv14[1518] = sv14[1473] + sv14[1473];
        sv14[1519] = 1.333333333333333 * w[1][0] * std::pow(sv14[1238], -0.3333333333333333);
        sv14[1520] = sv14[1474] * sv14[1519];
        sv14[1521] = sv14[1475] * sv14[1519];
        sv14[1522] = sv14[1476] * sv14[1519];
        sv14[1523] = sv14[1477] * sv14[1519];
        sv14[1524] = sv14[1478] * sv14[1519];
        sv14[1525] = sv14[1479] * sv14[1519];
        sv14[1526] = sv14[1480] * sv14[1519];
        sv14[1527] = sv14[1481] * sv14[1519];
        sv14[1528] = sv14[1482] * sv14[1519];
        sv14[1529] = sv14[1483] * sv14[1519];
        sv14[1530] = sv14[1484] * sv14[1519];
        sv14[1531] = sv14[1485] * sv14[1519];
        sv14[1532] = sv14[1486] * sv14[1519];
        sv14[1533] = sv14[1487] * sv14[1519];
        sv14[1534] = sv14[1488] * sv14[1519];
        sv14[1535] = sv14[1489] * sv14[1519];
        sv14[1536] = sv14[1490] * sv14[1519];
        sv14[1537] = sv14[1491] * sv14[1519];
        sv14[1538] = sv14[1492] * sv14[1519];
        sv14[1539] = sv14[1493] * sv14[1519];
        sv14[1540] = sv14[1494] * sv14[1519];
        sv14[1541] = sv14[1495] * sv14[1519];
        sv14[1542] = sv14[1496] * sv14[1519];
        sv14[1543] = sv14[1497] * sv14[1519];
        sv14[1544] = sv14[1498] * sv14[1519];
        sv14[1545] = sv14[1499] * sv14[1519];
        sv14[1546] = sv14[1500] * sv14[1519];
        sv14[1547] = sv14[1501] * sv14[1519];
        sv14[1548] = sv14[1502] * sv14[1519];
        sv14[1549] = sv14[1503] * sv14[1519];
        sv14[1550] = sv14[1504] * sv14[1519];
        sv14[1551] = sv14[1505] * sv14[1519];
        sv14[1552] = sv14[1506] * sv14[1519];
        sv14[1553] = sv14[1507] * sv14[1519];
        sv14[1554] = sv14[1508] * sv14[1519];
        sv14[1555] = sv14[1509] * sv14[1519];
        sv14[1556] = sv14[1510] * sv14[1519];
        sv14[1557] = sv14[1511] * sv14[1519];
        sv14[1558] = sv14[1512] * sv14[1519];
        sv14[1559] = sv14[1513] * sv14[1519];
        sv14[1560] = sv14[1514] * sv14[1519];
        sv14[1561] = sv14[1515] * sv14[1519];
        sv14[1562] = sv14[1516] * sv14[1519];
        sv14[1563] = sv14[1517] * sv14[1519];
        sv14[1564] = sv14[1518] * sv14[1519];
        sv14[1565] = -1 * sv14[1249] + -1 * sv14[1520];
        sv14[1566] = -1 * sv14[1250] + -1 * sv14[1521];
        sv14[1567] = -1 * sv14[1251] + -1 * sv14[1522];
        sv14[1568] = -1 * sv14[1252] + -1 * sv14[1523];
        sv14[1569] = -1 * sv14[1253] + -1 * sv14[1524];
        sv14[1570] = -1 * sv14[1254] + -1 * sv14[1525];
        sv14[1571] = -1 * sv14[1255] + -1 * sv14[1526];
        sv14[1572] = -1 * sv14[1256] + -1 * sv14[1527];
        sv14[1573] = -1 * sv14[1257] + -1 * sv14[1528];
        sv14[1574] = -1 * sv14[1258] + -1 * sv14[1521];
        sv14[1575] = -1 * sv14[1259] + -1 * sv14[1529];
        sv14[1576] = -1 * sv14[1260] + -1 * sv14[1530];
        sv14[1577] = -1 * sv14[1261] + -1 * sv14[1531];
        sv14[1578] = -1 * sv14[1262] + -1 * sv14[1532];
        sv14[1579] = -1 * sv14[1263] + -1 * sv14[1533];
        sv14[1580] = -1 * sv14[1264] + -1 * sv14[1534];
        sv14[1581] = -1 * sv14[1265] + -1 * sv14[1535];
        sv14[1582] = -1 * sv14[1266] + -1 * sv14[1536];
        sv14[1583] = -1 * sv14[1267] + -1 * sv14[1522];
        sv14[1584] = -1 * sv14[1268] + -1 * sv14[1530];
        sv14[1585] = -1 * sv14[1269] + -1 * sv14[1537];
        sv14[1586] = -1 * sv14[1270] + -1 * sv14[1538];
        sv14[1587] = -1 * sv14[1271] + -1 * sv14[1539];
        sv14[1588] = -1 * sv14[1272] + -1 * sv14[1540];
        sv14[1589] = -1 * sv14[1273] + -1 * sv14[1541];
        sv14[1590] = -1 * sv14[1274] + -1 * sv14[1542];
        sv14[1591] = -1 * sv14[1275] + -1 * sv14[1543];
        sv14[1592] = -1 * sv14[1276] + -1 * sv14[1523];
        sv14[1593] = -1 * sv14[1277] + -1 * sv14[1531];
        sv14[1594] = -1 * sv14[1278] + -1 * sv14[1538];
        sv14[1595] = -1 * sv14[1279] + -1 * sv14[1544];
        sv14[1596] = -1 * sv14[1280] + -1 * sv14[1545];
        sv14[1597] = -1 * sv14[1281] + -1 * sv14[1546];
        sv14[1598] = -1 * sv14[1282] + -1 * sv14[1547];
        sv14[1599] = -1 * sv14[1283] + -1 * sv14[1548];
        sv14[1600] = -1 * sv14[1284] + -1 * sv14[1549];
        sv14[1601] = -1 * sv14[1285] + -1 * sv14[1524];
        sv14[1602] = -1 * sv14[1286] + -1 * sv14[1532];
        sv14[1603] = -1 * sv14[1287] + -1 * sv14[1539];
        sv14[1604] = -1 * sv14[1288] + -1 * sv14[1545];
        sv14[1605] = -1 * sv14[1289] + -1 * sv14[1550];
        sv14[1606] = -1 * sv14[1290] + -1 * sv14[1551];
        sv14[1607] = -1 * sv14[1291] + -1 * sv14[1552];
        sv14[1608] = -1 * sv14[1292] + -1 * sv14[1553];
        sv14[1609] = -1 * sv14[1293] + -1 * sv14[1554];
        sv14[1610] = -1 * sv14[1294] + -1 * sv14[1525];
        sv14[1611] = -1 * sv14[1295] + -1 * sv14[1533];
        sv14[1612] = -1 * sv14[1296] + -1 * sv14[1540];
        sv14[1613] = -1 * sv14[1297] + -1 * sv14[1546];
        sv14[1614] = -1 * sv14[1298] + -1 * sv14[1551];
        sv14[1615] = -1 * sv14[1299] + -1 * sv14[1555];
        sv14[1616] = -1 * sv14[1300] + -1 * sv14[1556];
        sv14[1617] = -1 * sv14[1301] + -1 * sv14[1557];
        sv14[1618] = -1 * sv14[1302] + -1 * sv14[1558];
        sv14[1619] = -1 * sv14[1303] + -1 * sv14[1526];
        sv14[1620] = -1 * sv14[1304] + -1 * sv14[1534];
        sv14[1621] = -1 * sv14[1305] + -1 * sv14[1541];
        sv14[1622] = -1 * sv14[1306] + -1 * sv14[1547];
        sv14[1623] = -1 * sv14[1307] + -1 * sv14[1552];
        sv14[1624] = -1 * sv14[1308] + -1 * sv14[1556];
        sv14[1625] = -1 * sv14[1309] + -1 * sv14[1559];
        sv14[1626] = -1 * sv14[1310] + -1 * sv14[1560];
        sv14[1627] = -1 * sv14[1311] + -1 * sv14[1561];
        sv14[1628] = -1 * sv14[1312] + -1 * sv14[1527];
        sv14[1629] = -1 * sv14[1313] + -1 * sv14[1535];
        sv14[1630] = -1 * sv14[1314] + -1 * sv14[1542];
        sv14[1631] = -1 * sv14[1315] + -1 * sv14[1548];
        sv14[1632] = -1 * sv14[1316] + -1 * sv14[1553];
        sv14[1633] = -1 * sv14[1317] + -1 * sv14[1557];
        sv14[1634] = -1 * sv14[1318] + -1 * sv14[1560];
        sv14[1635] = -1 * sv14[1319] + -1 * sv14[1562];
        sv14[1636] = -1 * sv14[1320] + -1 * sv14[1563];
        sv14[1637] = -1 * sv14[1321] + -1 * sv14[1528];
        sv14[1638] = -1 * sv14[1322] + -1 * sv14[1536];
        sv14[1639] = -1 * sv14[1323] + -1 * sv14[1543];
        sv14[1640] = -1 * sv14[1324] + -1 * sv14[1549];
        sv14[1641] = -1 * sv14[1325] + -1 * sv14[1554];
        sv14[1642] = -1 * sv14[1326] + -1 * sv14[1558];
        sv14[1643] = -1 * sv14[1327] + -1 * sv14[1561];
        sv14[1644] = -1 * sv14[1328] + -1 * sv14[1563];
        sv14[1645] = -1 * sv14[1329] + -1 * sv14[1564];
        sv14[1646] = std::pow(sv14[1238], -1 * w[3][0]);
        sv14[1647] = std::pow(sv14[1238], w[3][0]);
        sv14[1648] = sv14[1646] + sv14[1647];
        sv14[1649] = sv14[1648] * sp[44];
        sv14[1650] = sv14[1244] * (0.1111111111111111 * w[1][0]);
        sv14[1651] = sv14[1650] * std::pow(sv14[1238], -0.3333333333333333);
        sv14[1652] = sv14[1649] + sv14[1651];
        sv14[1653] = sv14[1384] * (4.0 * sv14[1652]);
        sv14[1654] = sv14[1385] * (4.0 * sv14[1652]);
        sv14[1655] = sv14[1386] * (4.0 * sv14[1652]);
        sv14[1656] = sv14[1387] * (4.0 * sv14[1652]);
        sv14[1657] = sv14[1388] * (4.0 * sv14[1652]);
        sv14[1658] = sv14[1389] * (4.0 * sv14[1652]);
        sv14[1659] = sv14[1390] * (4.0 * sv14[1652]);
        sv14[1660] = sv14[1391] * (4.0 * sv14[1652]);
        sv14[1661] = sv14[1392] * (4.0 * sv14[1652]);
        sv14[1662] = sv14[1384] * sv14[1653];
        sv14[1663] = sv14[1384] * sv14[1654];
        sv14[1664] = sv14[1384] * sv14[1655];
        sv14[1665] = sv14[1384] * sv14[1656];
        sv14[1666] = sv14[1384] * sv14[1657];
        sv14[1667] = sv14[1384] * sv14[1658];
        sv14[1668] = sv14[1384] * sv14[1659];
        sv14[1669] = sv14[1384] * sv14[1660];
        sv14[1670] = sv14[1384] * sv14[1661];
        sv14[1671] = sv14[1385] * sv14[1653];
        sv14[1672] = sv14[1385] * sv14[1654];
        sv14[1673] = sv14[1385] * sv14[1655];
        sv14[1674] = sv14[1385] * sv14[1656];
        sv14[1675] = sv14[1385] * sv14[1657];
        sv14[1676] = sv14[1385] * sv14[1658];
        sv14[1677] = sv14[1385] * sv14[1659];
        sv14[1678] = sv14[1385] * sv14[1660];
        sv14[1679] = sv14[1385] * sv14[1661];
        sv14[1680] = sv14[1386] * sv14[1653];
        sv14[1681] = sv14[1386] * sv14[1654];
        sv14[1682] = sv14[1386] * sv14[1655];
        sv14[1683] = sv14[1386] * sv14[1656];
        sv14[1684] = sv14[1386] * sv14[1657];
        sv14[1685] = sv14[1386] * sv14[1658];
        sv14[1686] = sv14[1386] * sv14[1659];
        sv14[1687] = sv14[1386] * sv14[1660];
        sv14[1688] = sv14[1386] * sv14[1661];
        sv14[1689] = sv14[1387] * sv14[1653];
        sv14[1690] = sv14[1387] * sv14[1654];
        sv14[1691] = sv14[1387] * sv14[1655];
        sv14[1692] = sv14[1387] * sv14[1656];
        sv14[1693] = sv14[1387] * sv14[1657];
        sv14[1694] = sv14[1387] * sv14[1658];
        sv14[1695] = sv14[1387] * sv14[1659];
        sv14[1696] = sv14[1387] * sv14[1660];
        sv14[1697] = sv14[1387] * sv14[1661];
        sv14[1698] = sv14[1388] * sv14[1653];
        sv14[1699] = sv14[1388] * sv14[1654];
        sv14[1700] = sv14[1388] * sv14[1655];
        sv14[1701] = sv14[1388] * sv14[1656];
        sv14[1702] = sv14[1388] * sv14[1657];
        sv14[1703] = sv14[1388] * sv14[1658];
        sv14[1704] = sv14[1388] * sv14[1659];
        sv14[1705] = sv14[1388] * sv14[1660];
        sv14[1706] = sv14[1388] * sv14[1661];
        sv14[1707] = sv14[1389] * sv14[1653];
        sv14[1708] = sv14[1389] * sv14[1654];
        sv14[1709] = sv14[1389] * sv14[1655];
        sv14[1710] = sv14[1389] * sv14[1656];
        sv14[1711] = sv14[1389] * sv14[1657];
        sv14[1712] = sv14[1389] * sv14[1658];
        sv14[1713] = sv14[1389] * sv14[1659];
        sv14[1714] = sv14[1389] * sv14[1660];
        sv14[1715] = sv14[1389] * sv14[1661];
        sv14[1716] = sv14[1390] * sv14[1653];
        sv14[1717] = sv14[1390] * sv14[1654];
        sv14[1718] = sv14[1390] * sv14[1655];
        sv14[1719] = sv14[1390] * sv14[1656];
        sv14[1720] = sv14[1390] * sv14[1657];
        sv14[1721] = sv14[1390] * sv14[1658];
        sv14[1722] = sv14[1390] * sv14[1659];
        sv14[1723] = sv14[1390] * sv14[1660];
        sv14[1724] = sv14[1390] * sv14[1661];
        sv14[1725] = sv14[1391] * sv14[1653];
        sv14[1726] = sv14[1391] * sv14[1654];
        sv14[1727] = sv14[1391] * sv14[1655];
        sv14[1728] = sv14[1391] * sv14[1656];
        sv14[1729] = sv14[1391] * sv14[1657];
        sv14[1730] = sv14[1391] * sv14[1658];
        sv14[1731] = sv14[1391] * sv14[1659];
        sv14[1732] = sv14[1391] * sv14[1660];
        sv14[1733] = sv14[1391] * sv14[1661];
        sv14[1734] = sv14[1392] * sv14[1653];
        sv14[1735] = sv14[1392] * sv14[1654];
        sv14[1736] = sv14[1392] * sv14[1655];
        sv14[1737] = sv14[1392] * sv14[1656];
        sv14[1738] = sv14[1392] * sv14[1657];
        sv14[1739] = sv14[1392] * sv14[1658];
        sv14[1740] = sv14[1392] * sv14[1659];
        sv14[1741] = sv14[1392] * sv14[1660];
        sv14[1742] = sv14[1392] * sv14[1661];
        sv14[1743] = sv14[1565] + sv14[1662];
        sv14[1744] = sv14[1566] + sv14[1663];
        sv14[1745] = sv14[1567] + sv14[1664];
        sv14[1746] = sv14[1568] + sv14[1665];
        sv14[1747] = sv14[1569] + sv14[1666];
        sv14[1748] = sv14[1570] + sv14[1667];
        sv14[1749] = sv14[1571] + sv14[1668];
        sv14[1750] = sv14[1572] + sv14[1669];
        sv14[1751] = sv14[1573] + sv14[1670];
        sv14[1752] = sv14[1574] + sv14[1671];
        sv14[1753] = sv14[1575] + sv14[1672];
        sv14[1754] = sv14[1576] + sv14[1673];
        sv14[1755] = sv14[1577] + sv14[1674];
        sv14[1756] = sv14[1578] + sv14[1675];
        sv14[1757] = sv14[1579] + sv14[1676];
        sv14[1758] = sv14[1580] + sv14[1677];
        sv14[1759] = sv14[1581] + sv14[1678];
        sv14[1760] = sv14[1582] + sv14[1679];
        sv14[1761] = sv14[1583] + sv14[1680];
        sv14[1762] = sv14[1584] + sv14[1681];
        sv14[1763] = sv14[1585] + sv14[1682];
        sv14[1764] = sv14[1586] + sv14[1683];
        sv14[1765] = sv14[1587] + sv14[1684];
        sv14[1766] = sv14[1588] + sv14[1685];
        sv14[1767] = sv14[1589] + sv14[1686];
        sv14[1768] = sv14[1590] + sv14[1687];
        sv14[1769] = sv14[1591] + sv14[1688];
        sv14[1770] = sv14[1592] + sv14[1689];
        sv14[1771] = sv14[1593] + sv14[1690];
        sv14[1772] = sv14[1594] + sv14[1691];
        sv14[1773] = sv14[1595] + sv14[1692];
        sv14[1774] = sv14[1596] + sv14[1693];
        sv14[1775] = sv14[1597] + sv14[1694];
        sv14[1776] = sv14[1598] + sv14[1695];
        sv14[1777] = sv14[1599] + sv14[1696];
        sv14[1778] = sv14[1600] + sv14[1697];
        sv14[1779] = sv14[1601] + sv14[1698];
        sv14[1780] = sv14[1602] + sv14[1699];
        sv14[1781] = sv14[1603] + sv14[1700];
        sv14[1782] = sv14[1604] + sv14[1701];
        sv14[1783] = sv14[1605] + sv14[1702];
        sv14[1784] = sv14[1606] + sv14[1703];
        sv14[1785] = sv14[1607] + sv14[1704];
        sv14[1786] = sv14[1608] + sv14[1705];
        sv14[1787] = sv14[1609] + sv14[1706];
        sv14[1788] = sv14[1610] + sv14[1707];
        sv14[1789] = sv14[1611] + sv14[1708];
        sv14[1790] = sv14[1612] + sv14[1709];
        sv14[1791] = sv14[1613] + sv14[1710];
        sv14[1792] = sv14[1614] + sv14[1711];
        sv14[1793] = sv14[1615] + sv14[1712];
        sv14[1794] = sv14[1616] + sv14[1713];
        sv14[1795] = sv14[1617] + sv14[1714];
        sv14[1796] = sv14[1618] + sv14[1715];
        sv14[1797] = sv14[1619] + sv14[1716];
        sv14[1798] = sv14[1620] + sv14[1717];
        sv14[1799] = sv14[1621] + sv14[1718];
        sv14[1800] = sv14[1622] + sv14[1719];
        sv14[1801] = sv14[1623] + sv14[1720];
        sv14[1802] = sv14[1624] + sv14[1721];
        sv14[1803] = sv14[1625] + sv14[1722];
        sv14[1804] = sv14[1626] + sv14[1723];
        sv14[1805] = sv14[1627] + sv14[1724];
        sv14[1806] = sv14[1628] + sv14[1725];
        sv14[1807] = sv14[1629] + sv14[1726];
        sv14[1808] = sv14[1630] + sv14[1727];
        sv14[1809] = sv14[1631] + sv14[1728];
        sv14[1810] = sv14[1632] + sv14[1729];
        sv14[1811] = sv14[1633] + sv14[1730];
        sv14[1812] = sv14[1634] + sv14[1731];
        sv14[1813] = sv14[1635] + sv14[1732];
        sv14[1814] = sv14[1636] + sv14[1733];
        sv14[1815] = sv14[1637] + sv14[1734];
        sv14[1816] = sv14[1638] + sv14[1735];
        sv14[1817] = sv14[1639] + sv14[1736];
        sv14[1818] = sv14[1640] + sv14[1737];
        sv14[1819] = sv14[1641] + sv14[1738];
        sv14[1820] = sv14[1642] + sv14[1739];
        sv14[1821] = sv14[1643] + sv14[1740];
        sv14[1822] = sv14[1644] + sv14[1741];
        sv14[1823] = sv14[1645] + sv14[1742];
        sv14[1824] = std::pow(sv14[1238], -0.3333333333333333) * w[1][0];
        sv14[1825] = sp[69] * (2.0 * sv14[1824]);
        sv14[1826] = sp[70] * (2.0 * sv14[1824]);
        sv14[1827] = sp[71] * (2.0 * sv14[1824]);
        sv14[1828] = sp[72] * (2.0 * sv14[1824]);
        sv14[1829] = sp[73] * (2.0 * sv14[1824]);
        sv14[1830] = sp[74] * (2.0 * sv14[1824]);
        sv14[1831] = sv14[1743] + sv14[1825];
        sv14[1832] = sv14[1744] + sv14[1826];
        sv14[1833] = sv14[1745] + sv14[1827];
        sv14[1834] = sv14[1752] + sv14[1826];
        sv14[1835] = sv14[1753] + sv14[1828];
        sv14[1836] = sv14[1754] + sv14[1829];
        sv14[1837] = sv14[1761] + sv14[1827];
        sv14[1838] = sv14[1762] + sv14[1829];
        sv14[1839] = sv14[1763] + sv14[1830];
        sv14[1840] = sv14[1773] + sv14[1825];
        sv14[1841] = sv14[1774] + sv14[1826];
        sv14[1842] = sv14[1775] + sv14[1827];
        sv14[1843] = sv14[1782] + sv14[1826];
        sv14[1844] = sv14[1783] + sv14[1828];
        sv14[1845] = sv14[1784] + sv14[1829];
        sv14[1846] = sv14[1791] + sv14[1827];
        sv14[1847] = sv14[1792] + sv14[1829];
        sv14[1848] = sv14[1793] + sv14[1830];
        sv14[1849] = sv14[1803] + sv14[1825];
        sv14[1850] = sv14[1804] + sv14[1826];
        sv14[1851] = sv14[1805] + sv14[1827];
        sv14[1852] = sv14[1812] + sv14[1826];
        sv14[1853] = sv14[1813] + sv14[1828];
        sv14[1854] = sv14[1814] + sv14[1829];
        sv14[1855] = sv14[1821] + sv14[1827];
        sv14[1856] = sv14[1822] + sv14[1829];
        sv14[1857] = sv14[1823] + sv14[1830];
        sv14[1858] = sv14[1831] * sp[75];
        sv14[1859] = sv14[1832] * sp[75];
        sv14[1860] = sv14[1833] * sp[75];
        sv14[1861] = sv14[1746] * sp[75];
        sv14[1862] = sv14[1747] * sp[75];
        sv14[1863] = sv14[1748] * sp[75];
        sv14[1864] = sv14[1749] * sp[75];
        sv14[1865] = sv14[1750] * sp[75];
        sv14[1866] = sv14[1751] * sp[75];
        sv14[1867] = sv14[1834] * sp[75];
        sv14[1868] = sv14[1835] * sp[75];
        sv14[1869] = sv14[1836] * sp[75];
        sv14[1870] = sv14[1755] * sp[75];
        sv14[1871] = sv14[1756] * sp[75];
        sv14[1872] = sv14[1757] * sp[75];
        sv14[1873] = sv14[1758] * sp[75];
        sv14[1874] = sv14[1759] * sp[75];
        sv14[1875] = sv14[1760] * sp[75];
        sv14[1876] = sv14[1837] * sp[75];
        sv14[1877] = sv14[1838] * sp[75];
        sv14[1878] = sv14[1839] * sp[75];
        sv14[1879] = sv14[1764] * sp[75];
        sv14[1880] = sv14[1765] * sp[75];
        sv14[1881] = sv14[1766] * sp[75];
        sv14[1882] = sv14[1767] * sp[75];
        sv14[1883] = sv14[1768] * sp[75];
        sv14[1884] = sv14[1769] * sp[75];
        sv14[1885] = sv14[1770] * sp[75];
        sv14[1886] = sv14[1771] * sp[75];
        sv14[1887] = sv14[1772] * sp[75];
        sv14[1888] = sv14[1840] * sp[75];
        sv14[1889] = sv14[1841] * sp[75];
        sv14[1890] = sv14[1842] * sp[75];
        sv14[1891] = sv14[1776] * sp[75];
        sv14[1892] = sv14[1777] * sp[75];
        sv14[1893] = sv14[1778] * sp[75];
        sv14[1894] = sv14[1779] * sp[75];
        sv14[1895] = sv14[1780] * sp[75];
        sv14[1896] = sv14[1781] * sp[75];
        sv14[1897] = sv14[1843] * sp[75];
        sv14[1898] = sv14[1844] * sp[75];
        sv14[1899] = sv14[1845] * sp[75];
        sv14[1900] = sv14[1785] * sp[75];
        sv14[1901] = sv14[1786] * sp[75];
        sv14[1902] = sv14[1787] * sp[75];
        sv14[1903] = sv14[1788] * sp[75];
        sv14[1904] = sv14[1789] * sp[75];
        sv14[1905] = sv14[1790] * sp[75];
        sv14[1906] = sv14[1846] * sp[75];
        sv14[1907] = sv14[1847] * sp[75];
        sv14[1908] = sv14[1848] * sp[75];
        sv14[1909] = sv14[1794] * sp[75];
        sv14[1910] = sv14[1795] * sp[75];
        sv14[1911] = sv14[1796] * sp[75];
        sv14[1912] = sv14[1797] * sp[75];
        sv14[1913] = sv14[1798] * sp[75];
        sv14[1914] = sv14[1799] * sp[75];
        sv14[1915] = sv14[1800] * sp[75];
        sv14[1916] = sv14[1801] * sp[75];
        sv14[1917] = sv14[1802] * sp[75];
        sv14[1918] = sv14[1849] * sp[75];
        sv14[1919] = sv14[1850] * sp[75];
        sv14[1920] = sv14[1851] * sp[75];
        sv14[1921] = sv14[1806] * sp[75];
        sv14[1922] = sv14[1807] * sp[75];
        sv14[1923] = sv14[1808] * sp[75];
        sv14[1924] = sv14[1809] * sp[75];
        sv14[1925] = sv14[1810] * sp[75];
        sv14[1926] = sv14[1811] * sp[75];
        sv14[1927] = sv14[1852] * sp[75];
        sv14[1928] = sv14[1853] * sp[75];
        sv14[1929] = sv14[1854] * sp[75];
        sv14[1930] = sv14[1815] * sp[75];
        sv14[1931] = sv14[1816] * sp[75];
        sv14[1932] = sv14[1817] * sp[75];
        sv14[1933] = sv14[1818] * sp[75];
        sv14[1934] = sv14[1819] * sp[75];
        sv14[1935] = sv14[1820] * sp[75];
        sv14[1936] = sv14[1855] * sp[75];
        sv14[1937] = sv14[1856] * sp[75];
        sv14[1938] = sv14[1857] * sp[75];
        const double fw0 = sv14[1888] * weights14[iq];
        alignas(32) double TF0[7];
        for (int i = 0; i < 7; ++i)
            TF0[i] = fw0 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF0[i][j] += TF0[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw1 = sv14[1889] * weights14[iq];
        alignas(32) double TF1[7];
        for (int i = 0; i < 7; ++i)
            TF1[i] = fw1 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF1[i][j] += TF1[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw2 = sv14[1890] * weights14[iq];
        alignas(32) double TF2[7];
        for (int i = 0; i < 7; ++i)
            TF2[i] = fw2 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF2[i][j] += TF2[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw3 = sv14[1885] * weights14[iq];
        alignas(32) double TF3[7];
        for (int i = 0; i < 7; ++i)
            TF3[i] = fw3 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF3[i][j] += TF3[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw4 = sv14[1886] * weights14[iq];
        alignas(32) double TF4[7];
        for (int i = 0; i < 7; ++i)
            TF4[i] = fw4 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF4[i][j] += TF4[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw5 = sv14[1887] * weights14[iq];
        alignas(32) double TF5[7];
        for (int i = 0; i < 7; ++i)
            TF5[i] = fw5 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF5[i][j] += TF5[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw6 = sv14[1891] * weights14[iq];
        alignas(32) double TF6[7];
        for (int i = 0; i < 7; ++i)
            TF6[i] = fw6 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF6[i][j] += TF6[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw7 = sv14[1892] * weights14[iq];
        alignas(32) double TF7[7];
        for (int i = 0; i < 7; ++i)
            TF7[i] = fw7 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF7[i][j] += TF7[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw8 = sv14[1893] * weights14[iq];
        alignas(32) double TF8[7];
        for (int i = 0; i < 7; ++i)
            TF8[i] = fw8 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF8[i][j] += TF8[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw9 = sv14[1897] * weights14[iq];
        alignas(32) double TF9[7];
        for (int i = 0; i < 7; ++i)
            TF9[i] = fw9 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF9[i][j] += TF9[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw10 = sv14[1898] * weights14[iq];
        alignas(32) double TF10[7];
        for (int i = 0; i < 7; ++i)
            TF10[i] = fw10 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF10[i][j] += TF10[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw11 = sv14[1899] * weights14[iq];
        alignas(32) double TF11[7];
        for (int i = 0; i < 7; ++i)
            TF11[i] = fw11 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF11[i][j] += TF11[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw12 = sv14[1894] * weights14[iq];
        alignas(32) double TF12[7];
        for (int i = 0; i < 7; ++i)
            TF12[i] = fw12 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF12[i][j] += TF12[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw13 = sv14[1895] * weights14[iq];
        alignas(32) double TF13[7];
        for (int i = 0; i < 7; ++i)
            TF13[i] = fw13 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF13[i][j] += TF13[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw14 = sv14[1896] * weights14[iq];
        alignas(32) double TF14[7];
        for (int i = 0; i < 7; ++i)
            TF14[i] = fw14 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF14[i][j] += TF14[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw15 = sv14[1900] * weights14[iq];
        alignas(32) double TF15[7];
        for (int i = 0; i < 7; ++i)
            TF15[i] = fw15 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF15[i][j] += TF15[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw16 = sv14[1901] * weights14[iq];
        alignas(32) double TF16[7];
        for (int i = 0; i < 7; ++i)
            TF16[i] = fw16 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF16[i][j] += TF16[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw17 = sv14[1902] * weights14[iq];
        alignas(32) double TF17[7];
        for (int i = 0; i < 7; ++i)
            TF17[i] = fw17 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF17[i][j] += TF17[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw18 = sv14[1906] * weights14[iq];
        alignas(32) double TF18[7];
        for (int i = 0; i < 7; ++i)
            TF18[i] = fw18 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF18[i][j] += TF18[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw19 = sv14[1907] * weights14[iq];
        alignas(32) double TF19[7];
        for (int i = 0; i < 7; ++i)
            TF19[i] = fw19 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF19[i][j] += TF19[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw20 = sv14[1908] * weights14[iq];
        alignas(32) double TF20[7];
        for (int i = 0; i < 7; ++i)
            TF20[i] = fw20 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF20[i][j] += TF20[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw21 = sv14[1903] * weights14[iq];
        alignas(32) double TF21[7];
        for (int i = 0; i < 7; ++i)
            TF21[i] = fw21 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF21[i][j] += TF21[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw22 = sv14[1904] * weights14[iq];
        alignas(32) double TF22[7];
        for (int i = 0; i < 7; ++i)
            TF22[i] = fw22 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF22[i][j] += TF22[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw23 = sv14[1905] * weights14[iq];
        alignas(32) double TF23[7];
        for (int i = 0; i < 7; ++i)
            TF23[i] = fw23 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF23[i][j] += TF23[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw24 = sv14[1909] * weights14[iq];
        alignas(32) double TF24[7];
        for (int i = 0; i < 7; ++i)
            TF24[i] = fw24 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF24[i][j] += TF24[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw25 = sv14[1910] * weights14[iq];
        alignas(32) double TF25[7];
        for (int i = 0; i < 7; ++i)
            TF25[i] = fw25 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF25[i][j] += TF25[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw26 = sv14[1911] * weights14[iq];
        alignas(32) double TF26[7];
        for (int i = 0; i < 7; ++i)
            TF26[i] = fw26 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF26[i][j] += TF26[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw27 = sv14[1861] * weights14[iq];
        alignas(32) double TF27[7];
        for (int i = 0; i < 7; ++i)
            TF27[i] = fw27 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF27[i][j] += TF27[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw28 = sv14[1862] * weights14[iq];
        alignas(32) double TF28[7];
        for (int i = 0; i < 7; ++i)
            TF28[i] = fw28 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF28[i][j] += TF28[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw29 = sv14[1863] * weights14[iq];
        alignas(32) double TF29[7];
        for (int i = 0; i < 7; ++i)
            TF29[i] = fw29 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF29[i][j] += TF29[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw30 = sv14[1858] * weights14[iq];
        alignas(32) double TF30[7];
        for (int i = 0; i < 7; ++i)
            TF30[i] = fw30 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF30[i][j] += TF30[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw31 = sv14[1859] * weights14[iq];
        alignas(32) double TF31[7];
        for (int i = 0; i < 7; ++i)
            TF31[i] = fw31 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF31[i][j] += TF31[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw32 = sv14[1860] * weights14[iq];
        alignas(32) double TF32[7];
        for (int i = 0; i < 7; ++i)
            TF32[i] = fw32 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF32[i][j] += TF32[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw33 = sv14[1864] * weights14[iq];
        alignas(32) double TF33[7];
        for (int i = 0; i < 7; ++i)
            TF33[i] = fw33 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF33[i][j] += TF33[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw34 = sv14[1865] * weights14[iq];
        alignas(32) double TF34[7];
        for (int i = 0; i < 7; ++i)
            TF34[i] = fw34 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF34[i][j] += TF34[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw35 = sv14[1866] * weights14[iq];
        alignas(32) double TF35[7];
        for (int i = 0; i < 7; ++i)
            TF35[i] = fw35 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF35[i][j] += TF35[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw36 = sv14[1870] * weights14[iq];
        alignas(32) double TF36[7];
        for (int i = 0; i < 7; ++i)
            TF36[i] = fw36 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF36[i][j] += TF36[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw37 = sv14[1871] * weights14[iq];
        alignas(32) double TF37[7];
        for (int i = 0; i < 7; ++i)
            TF37[i] = fw37 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF37[i][j] += TF37[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw38 = sv14[1872] * weights14[iq];
        alignas(32) double TF38[7];
        for (int i = 0; i < 7; ++i)
            TF38[i] = fw38 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF38[i][j] += TF38[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw39 = sv14[1867] * weights14[iq];
        alignas(32) double TF39[7];
        for (int i = 0; i < 7; ++i)
            TF39[i] = fw39 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF39[i][j] += TF39[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw40 = sv14[1868] * weights14[iq];
        alignas(32) double TF40[7];
        for (int i = 0; i < 7; ++i)
            TF40[i] = fw40 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF40[i][j] += TF40[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw41 = sv14[1869] * weights14[iq];
        alignas(32) double TF41[7];
        for (int i = 0; i < 7; ++i)
            TF41[i] = fw41 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF41[i][j] += TF41[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw42 = sv14[1873] * weights14[iq];
        alignas(32) double TF42[7];
        for (int i = 0; i < 7; ++i)
            TF42[i] = fw42 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF42[i][j] += TF42[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw43 = sv14[1874] * weights14[iq];
        alignas(32) double TF43[7];
        for (int i = 0; i < 7; ++i)
            TF43[i] = fw43 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF43[i][j] += TF43[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw44 = sv14[1875] * weights14[iq];
        alignas(32) double TF44[7];
        for (int i = 0; i < 7; ++i)
            TF44[i] = fw44 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF44[i][j] += TF44[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw45 = sv14[1879] * weights14[iq];
        alignas(32) double TF45[7];
        for (int i = 0; i < 7; ++i)
            TF45[i] = fw45 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF45[i][j] += TF45[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw46 = sv14[1880] * weights14[iq];
        alignas(32) double TF46[7];
        for (int i = 0; i < 7; ++i)
            TF46[i] = fw46 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF46[i][j] += TF46[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw47 = sv14[1881] * weights14[iq];
        alignas(32) double TF47[7];
        for (int i = 0; i < 7; ++i)
            TF47[i] = fw47 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF47[i][j] += TF47[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw48 = sv14[1876] * weights14[iq];
        alignas(32) double TF48[7];
        for (int i = 0; i < 7; ++i)
            TF48[i] = fw48 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF48[i][j] += TF48[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw49 = sv14[1877] * weights14[iq];
        alignas(32) double TF49[7];
        for (int i = 0; i < 7; ++i)
            TF49[i] = fw49 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF49[i][j] += TF49[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw50 = sv14[1878] * weights14[iq];
        alignas(32) double TF50[7];
        for (int i = 0; i < 7; ++i)
            TF50[i] = fw50 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF50[i][j] += TF50[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw51 = sv14[1882] * weights14[iq];
        alignas(32) double TF51[7];
        for (int i = 0; i < 7; ++i)
            TF51[i] = fw51 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF51[i][j] += TF51[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw52 = sv14[1883] * weights14[iq];
        alignas(32) double TF52[7];
        for (int i = 0; i < 7; ++i)
            TF52[i] = fw52 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF52[i][j] += TF52[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw53 = sv14[1884] * weights14[iq];
        alignas(32) double TF53[7];
        for (int i = 0; i < 7; ++i)
            TF53[i] = fw53 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF53[i][j] += TF53[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw54 = sv14[1915] * weights14[iq];
        alignas(32) double TF54[7];
        for (int i = 0; i < 7; ++i)
            TF54[i] = fw54 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF54[i][j] += TF54[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw55 = sv14[1916] * weights14[iq];
        alignas(32) double TF55[7];
        for (int i = 0; i < 7; ++i)
            TF55[i] = fw55 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF55[i][j] += TF55[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw56 = sv14[1917] * weights14[iq];
        alignas(32) double TF56[7];
        for (int i = 0; i < 7; ++i)
            TF56[i] = fw56 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF56[i][j] += TF56[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw57 = sv14[1912] * weights14[iq];
        alignas(32) double TF57[7];
        for (int i = 0; i < 7; ++i)
            TF57[i] = fw57 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF57[i][j] += TF57[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw58 = sv14[1913] * weights14[iq];
        alignas(32) double TF58[7];
        for (int i = 0; i < 7; ++i)
            TF58[i] = fw58 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF58[i][j] += TF58[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw59 = sv14[1914] * weights14[iq];
        alignas(32) double TF59[7];
        for (int i = 0; i < 7; ++i)
            TF59[i] = fw59 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF59[i][j] += TF59[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw60 = sv14[1918] * weights14[iq];
        alignas(32) double TF60[7];
        for (int i = 0; i < 7; ++i)
            TF60[i] = fw60 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF60[i][j] += TF60[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw61 = sv14[1919] * weights14[iq];
        alignas(32) double TF61[7];
        for (int i = 0; i < 7; ++i)
            TF61[i] = fw61 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF61[i][j] += TF61[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw62 = sv14[1920] * weights14[iq];
        alignas(32) double TF62[7];
        for (int i = 0; i < 7; ++i)
            TF62[i] = fw62 * FE26_C0_D100_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF62[i][j] += TF62[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw63 = sv14[1924] * weights14[iq];
        alignas(32) double TF63[7];
        for (int i = 0; i < 7; ++i)
            TF63[i] = fw63 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF63[i][j] += TF63[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw64 = sv14[1925] * weights14[iq];
        alignas(32) double TF64[7];
        for (int i = 0; i < 7; ++i)
            TF64[i] = fw64 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF64[i][j] += TF64[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw65 = sv14[1926] * weights14[iq];
        alignas(32) double TF65[7];
        for (int i = 0; i < 7; ++i)
            TF65[i] = fw65 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF65[i][j] += TF65[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw66 = sv14[1921] * weights14[iq];
        alignas(32) double TF66[7];
        for (int i = 0; i < 7; ++i)
            TF66[i] = fw66 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF66[i][j] += TF66[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw67 = sv14[1922] * weights14[iq];
        alignas(32) double TF67[7];
        for (int i = 0; i < 7; ++i)
            TF67[i] = fw67 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF67[i][j] += TF67[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw68 = sv14[1923] * weights14[iq];
        alignas(32) double TF68[7];
        for (int i = 0; i < 7; ++i)
            TF68[i] = fw68 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF68[i][j] += TF68[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw69 = sv14[1927] * weights14[iq];
        alignas(32) double TF69[7];
        for (int i = 0; i < 7; ++i)
            TF69[i] = fw69 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF69[i][j] += TF69[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw70 = sv14[1928] * weights14[iq];
        alignas(32) double TF70[7];
        for (int i = 0; i < 7; ++i)
            TF70[i] = fw70 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF70[i][j] += TF70[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw71 = sv14[1929] * weights14[iq];
        alignas(32) double TF71[7];
        for (int i = 0; i < 7; ++i)
            TF71[i] = fw71 * FE26_C0_D010_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF71[i][j] += TF71[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw72 = sv14[1933] * weights14[iq];
        alignas(32) double TF72[7];
        for (int i = 0; i < 7; ++i)
            TF72[i] = fw72 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF72[i][j] += TF72[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw73 = sv14[1934] * weights14[iq];
        alignas(32) double TF73[7];
        for (int i = 0; i < 7; ++i)
            TF73[i] = fw73 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF73[i][j] += TF73[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw74 = sv14[1935] * weights14[iq];
        alignas(32) double TF74[7];
        for (int i = 0; i < 7; ++i)
            TF74[i] = fw74 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF74[i][j] += TF74[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw75 = sv14[1930] * weights14[iq];
        alignas(32) double TF75[7];
        for (int i = 0; i < 7; ++i)
            TF75[i] = fw75 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF75[i][j] += TF75[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw76 = sv14[1931] * weights14[iq];
        alignas(32) double TF76[7];
        for (int i = 0; i < 7; ++i)
            TF76[i] = fw76 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF76[i][j] += TF76[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw77 = sv14[1932] * weights14[iq];
        alignas(32) double TF77[7];
        for (int i = 0; i < 7; ++i)
            TF77[i] = fw77 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF77[i][j] += TF77[i] * FE26_C0_D001_Q14[0][iq][j];
        const double fw78 = sv14[1936] * weights14[iq];
        alignas(32) double TF78[7];
        for (int i = 0; i < 7; ++i)
            TF78[i] = fw78 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF78[i][j] += TF78[i] * FE26_C0_D100_Q14[0][iq][j];
        const double fw79 = sv14[1937] * weights14[iq];
        alignas(32) double TF79[7];
        for (int i = 0; i < 7; ++i)
            TF79[i] = fw79 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF79[i][j] += TF79[i] * FE26_C0_D010_Q14[0][iq][j];
        const double fw80 = sv14[1938] * weights14[iq];
        alignas(32) double TF80[7];
        for (int i = 0; i < 7; ++i)
            TF80[i] = fw80 * FE26_C0_D001_Q14[0][iq][i];
        for (int i = 0; i < 7; ++i)
            for (int j = 0; j < 7; ++j)
                BF80[i][j] += TF80[i] * FE26_C0_D001_Q14[0][iq][j];
    }
    std::fill(A, A + 900, 0.0);
    static const int DM0[7] = { 0, 1, 5, 6, 7, 8, 9 };
    static const int DM1[7] = { 0, 2, 4, 6, 7, 8, 9 };
    static const int DM2[7] = { 0, 3, 4, 5, 7, 8, 9 };
    static const int DM3[7] = { 10, 11, 15, 16, 17, 18, 19 };
    static const int DM4[7] = { 10, 12, 14, 16, 17, 18, 19 };
    static const int DM5[7] = { 10, 13, 14, 15, 17, 18, 19 };
    static const int DM6[7] = { 20, 21, 25, 26, 27, 28, 29 };
    static const int DM7[7] = { 20, 22, 24, 26, 27, 28, 29 };
    static const int DM8[7] = { 20, 23, 24, 25, 27, 28, 29 };
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM0[j]] += BF0[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM1[j]] += BF1[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM2[j]] += BF2[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM3[j]] += BF3[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM4[j]] += BF4[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM5[j]] += BF5[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM6[j]] += BF6[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM7[j]] += BF7[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM0[i] + DM8[j]] += BF8[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM0[j]] += BF9[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM1[j]] += BF10[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM2[j]] += BF11[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM3[j]] += BF12[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM4[j]] += BF13[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM5[j]] += BF14[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM6[j]] += BF15[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM7[j]] += BF16[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM1[i] + DM8[j]] += BF17[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM0[j]] += BF18[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM1[j]] += BF19[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM2[j]] += BF20[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM3[j]] += BF21[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM4[j]] += BF22[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM5[j]] += BF23[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM6[j]] += BF24[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM7[j]] += BF25[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM2[i] + DM8[j]] += BF26[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM0[j]] += BF27[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM1[j]] += BF28[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM2[j]] += BF29[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM3[j]] += BF30[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM4[j]] += BF31[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM5[j]] += BF32[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM6[j]] += BF33[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM7[j]] += BF34[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM3[i] + DM8[j]] += BF35[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM0[j]] += BF36[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM1[j]] += BF37[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM2[j]] += BF38[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM3[j]] += BF39[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM4[j]] += BF40[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM5[j]] += BF41[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM6[j]] += BF42[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM7[j]] += BF43[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM4[i] + DM8[j]] += BF44[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM0[j]] += BF45[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM1[j]] += BF46[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM2[j]] += BF47[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM3[j]] += BF48[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM4[j]] += BF49[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM5[j]] += BF50[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM6[j]] += BF51[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM7[j]] += BF52[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM5[i] + DM8[j]] += BF53[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM0[j]] += BF54[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM1[j]] += BF55[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM2[j]] += BF56[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM3[j]] += BF57[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM4[j]] += BF58[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM5[j]] += BF59[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM6[j]] += BF60[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM7[j]] += BF61[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM6[i] + DM8[j]] += BF62[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM0[j]] += BF63[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM1[j]] += BF64[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM2[j]] += BF65[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM3[j]] += BF66[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM4[j]] += BF67[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM5[j]] += BF68[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM6[j]] += BF69[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM7[j]] += BF70[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM7[i] + DM8[j]] += BF71[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM0[j]] += BF72[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM1[j]] += BF73[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM2[j]] += BF74[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM3[j]] += BF75[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM4[j]] += BF76[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM5[j]] += BF77[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM6[j]] += BF78[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM7[j]] += BF79[i][j];
    for (int i = 0; i < 7; ++i)
        for (int j = 0; j < 7; ++j)
            A[30 * DM8[i] + DM8[j]] += BF80[i][j];
}


hyperelasticitycarotidiso_cell_integral_2_otherwise::hyperelasticitycarotidiso_cell_integral_2_otherwise() : ufc::cell_integral()
{

}

hyperelasticitycarotidiso_cell_integral_2_otherwise::~hyperelasticitycarotidiso_cell_integral_2_otherwise()
{

}

const std::vector<bool> & hyperelasticitycarotidiso_cell_integral_2_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, false, true, true, true});
return enabled;
}

void hyperelasticitycarotidiso_cell_integral_2_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 24
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE24_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000002, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000006, 0.0, -1.999999999999999, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000005, 1.999999999999999, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000005, 0.0, 1.999999999999999, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991835, -0.5978929390991861, 0.4021070609008202, 2.793678817297555, 0.0, -0.402107060900818, -2.793678817297546 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008201, 0.4021070609008222, 2.391571756396729, -0.4021070609008185, -0.4021070609008175 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008153, 0.402107060900826, -2.39157175639673, -0.4021070609008163, -0.4021070609008194 },
            { 0.5978929390991834, -0.5978929390991863, 2.79367881729755, 0.4021070609008223, 0.0, -2.793678817297547, -0.4021070609008178 },
            { -0.2574914939727679, 0.2574914939727652, 1.25749149397277, 0.2275255180817003, 0.0, -1.257491493972769, -0.2275255180816939 },
            { 0.772474481918307, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972768, -1.257491493972768 },
            { -0.2574914939727679, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891074, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727683, 0.2574914939727655, 0.2275255180816932, 1.257491493972775, 0.0, -0.2275255180816933, -1.25749149397277 } } };
    alignas(32) static const double FE24_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000004, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 0.0, 1.999999999999997, -2.000000000000002 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991842, -0.5978929390991845, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991848, 0.4021070609008187, 0.4021070609008225, -0.4021070609008185, 2.391571756396729, -0.402107060900818 },
            { 0.5978929390991847, -0.5978929390991838, 2.793678817297549, 0.4021070609008207, -2.793678817297548, 0.0, -0.4021070609008185 },
            { 0.5978929390991841, 1.793678817297543, 0.402107060900819, 0.4021070609008253, -0.4021070609008185, -2.39157175639673, -0.4021070609008197 },
            { -0.2574914939727678, 0.2574914939727657, 1.25749149397277, 0.2275255180816988, -1.25749149397277, 0.0, -0.2275255180816941 },
            { 0.7724744819183076, 0.2574914939727661, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727673, 0.2574914939727654, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.25749149397277 },
            { -0.2574914939727672, -0.7724744819183081, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE24_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -1.999999999999996 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -2.000000000000003 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 2.000000000000001 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999996 },
            { 0.5978929390991843, 1.793678817297546, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396731 },
            { -1.793678817297545, -0.5978929390991818, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396727 },
            { 0.5978929390991843, -0.5978929390991823, 2.79367881729755, 0.4021070609008178, -2.793678817297549, -0.4021070609008179, 0.0 },
            { 0.5978929390991838, -0.5978929390991845, 0.4021070609008183, 2.793678817297549, -0.4021070609008183, -2.79367881729755, 0.0 },
            { -0.2574914939727669, -0.7724744819183068, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183075, 0.2574914939727674, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727676, 0.2574914939727681, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727683, 0.2574914939727673, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.2275255180816939, 0.0 } } };
    alignas(32) static const double FE34_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE34_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE34_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE34_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE34_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE34_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE34_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE34_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE34_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE34_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE34_C0_D001_Q14[0][0][1];
    alignas(32) double sp[48];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c1 * J_c5;
    sp[20] = J_c2 * J_c4;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c2 * J_c3;
    sp[24] = J_c0 * J_c5;
    sp[25] = sp[23] + -1 * sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c0 * J_c4;
    sp[28] = J_c1 * J_c3;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c2 * J_c7;
    sp[32] = J_c8 * (-1 * J_c1);
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c0 * J_c8;
    sp[36] = J_c6 * (-1 * J_c2);
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c1 * J_c6;
    sp[40] = J_c0 * J_c7;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w[4][0] * w[5][0];
    sp[44] = std::abs(sp[13]);
    sp[45] = -1 * w[1][0] * sp[44];
    sp[46] = -1 * w[1][1] * sp[44];
    sp[47] = -1 * w[1][2] * sp[44];
    alignas(32) double BF0[7] = {};
    alignas(32) double BF1[7] = {};
    alignas(32) double BF2[7] = {};
    alignas(32) double BF3[7] = {};
    alignas(32) double BF4[7] = {};
    alignas(32) double BF5[7] = {};
    alignas(32) double BF6[7] = {};
    alignas(32) double BF7[7] = {};
    alignas(32) double BF8[7] = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c1 = w[0][10] * FE24_C0_D100_Q14[0][iq][0] + w[0][11] * FE24_C0_D100_Q14[0][iq][1] + w[0][15] * FE24_C0_D100_Q14[0][iq][2] + w[0][16] * FE24_C0_D100_Q14[0][iq][3] + w[0][17] * FE24_C0_D100_Q14[0][iq][4] + w[0][18] * FE24_C0_D100_Q14[0][iq][5] + w[0][19] * FE24_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE24_C0_D010_Q14[0][iq][0] + w[0][12] * FE24_C0_D010_Q14[0][iq][1] + w[0][14] * FE24_C0_D010_Q14[0][iq][2] + w[0][16] * FE24_C0_D010_Q14[0][iq][3] + w[0][17] * FE24_C0_D010_Q14[0][iq][4] + w[0][18] * FE24_C0_D010_Q14[0][iq][5] + w[0][19] * FE24_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE24_C0_D001_Q14[0][iq][0] + w[0][13] * FE24_C0_D001_Q14[0][iq][1] + w[0][14] * FE24_C0_D001_Q14[0][iq][2] + w[0][15] * FE24_C0_D001_Q14[0][iq][3] + w[0][17] * FE24_C0_D001_Q14[0][iq][4] + w[0][18] * FE24_C0_D001_Q14[0][iq][5] + w[0][19] * FE24_C0_D001_Q14[0][iq][6];
        const double w0_d0_c0 = w[0][0] * FE24_C0_D100_Q14[0][iq][0] + w[0][1] * FE24_C0_D100_Q14[0][iq][1] + w[0][5] * FE24_C0_D100_Q14[0][iq][2] + w[0][6] * FE24_C0_D100_Q14[0][iq][3] + w[0][7] * FE24_C0_D100_Q14[0][iq][4] + w[0][8] * FE24_C0_D100_Q14[0][iq][5] + w[0][9] * FE24_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE24_C0_D010_Q14[0][iq][0] + w[0][2] * FE24_C0_D010_Q14[0][iq][1] + w[0][4] * FE24_C0_D010_Q14[0][iq][2] + w[0][6] * FE24_C0_D010_Q14[0][iq][3] + w[0][7] * FE24_C0_D010_Q14[0][iq][4] + w[0][8] * FE24_C0_D010_Q14[0][iq][5] + w[0][9] * FE24_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE24_C0_D001_Q14[0][iq][0] + w[0][3] * FE24_C0_D001_Q14[0][iq][1] + w[0][4] * FE24_C0_D001_Q14[0][iq][2] + w[0][5] * FE24_C0_D001_Q14[0][iq][3] + w[0][7] * FE24_C0_D001_Q14[0][iq][4] + w[0][8] * FE24_C0_D001_Q14[0][iq][5] + w[0][9] * FE24_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE24_C0_D100_Q14[0][iq][0] + w[0][21] * FE24_C0_D100_Q14[0][iq][1] + w[0][25] * FE24_C0_D100_Q14[0][iq][2] + w[0][26] * FE24_C0_D100_Q14[0][iq][3] + w[0][27] * FE24_C0_D100_Q14[0][iq][4] + w[0][28] * FE24_C0_D100_Q14[0][iq][5] + w[0][29] * FE24_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE24_C0_D010_Q14[0][iq][0] + w[0][22] * FE24_C0_D010_Q14[0][iq][1] + w[0][24] * FE24_C0_D010_Q14[0][iq][2] + w[0][26] * FE24_C0_D010_Q14[0][iq][3] + w[0][27] * FE24_C0_D010_Q14[0][iq][4] + w[0][28] * FE24_C0_D010_Q14[0][iq][5] + w[0][29] * FE24_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE24_C0_D001_Q14[0][iq][0] + w[0][23] * FE24_C0_D001_Q14[0][iq][1] + w[0][24] * FE24_C0_D001_Q14[0][iq][2] + w[0][25] * FE24_C0_D001_Q14[0][iq][3] + w[0][27] * FE24_C0_D001_Q14[0][iq][4] + w[0][28] * FE24_C0_D001_Q14[0][iq][5] + w[0][29] * FE24_C0_D001_Q14[0][iq][6];
        alignas(32) double sv14[224];
        sv14[0] = w0_d0_c1 * sp[14];
        sv14[1] = w0_d1_c1 * sp[17];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c1 * sp[18];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = w0_d0_c0 * sp[14];
        sv14[6] = w0_d1_c0 * sp[17];
        sv14[7] = sv14[5] + sv14[6];
        sv14[8] = w0_d2_c0 * sp[18];
        sv14[9] = sv14[7] + sv14[8];
        sv14[10] = (1 + sv14[9]) * (1 + sv14[9]);
        sv14[11] = sv14[4] * sv14[4];
        sv14[12] = sv14[10] + sv14[11];
        sv14[13] = w0_d0_c2 * sp[14];
        sv14[14] = w0_d1_c2 * sp[17];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = w0_d2_c2 * sp[18];
        sv14[17] = sv14[15] + sv14[16];
        sv14[18] = sv14[17] * sv14[17];
        sv14[19] = sv14[12] + sv14[18];
        sv14[20] = w0_d0_c0 * sp[22];
        sv14[21] = w0_d1_c0 * sp[26];
        sv14[22] = sv14[20] + sv14[21];
        sv14[23] = w0_d2_c0 * sp[30];
        sv14[24] = sv14[22] + sv14[23];
        sv14[25] = sv14[24] * sv14[24];
        sv14[26] = w0_d0_c1 * sp[22];
        sv14[27] = w0_d1_c1 * sp[26];
        sv14[28] = sv14[26] + sv14[27];
        sv14[29] = w0_d2_c1 * sp[30];
        sv14[30] = sv14[28] + sv14[29];
        sv14[31] = sv14[30] * sv14[30];
        sv14[32] = sv14[25] + sv14[31];
        sv14[33] = w0_d0_c2 * sp[22];
        sv14[34] = w0_d1_c2 * sp[26];
        sv14[35] = sv14[33] + sv14[34];
        sv14[36] = w0_d2_c2 * sp[30];
        sv14[37] = sv14[35] + sv14[36];
        sv14[38] = (1 + sv14[37]) * (1 + sv14[37]);
        sv14[39] = sv14[32] + sv14[38];
        sv14[40] = w0_d0_c1 * sp[34];
        sv14[41] = w0_d1_c1 * sp[38];
        sv14[42] = sv14[40] + sv14[41];
        sv14[43] = w0_d2_c1 * sp[42];
        sv14[44] = sv14[42] + sv14[43];
        sv14[45] = (1 + sv14[44]) * (1 + sv14[44]);
        sv14[46] = w0_d0_c0 * sp[34];
        sv14[47] = w0_d1_c0 * sp[38];
        sv14[48] = sv14[46] + sv14[47];
        sv14[49] = w0_d2_c0 * sp[42];
        sv14[50] = sv14[48] + sv14[49];
        sv14[51] = sv14[50] * sv14[50];
        sv14[52] = sv14[45] + sv14[51];
        sv14[53] = w0_d0_c2 * sp[34];
        sv14[54] = w0_d1_c2 * sp[38];
        sv14[55] = sv14[53] + sv14[54];
        sv14[56] = w0_d2_c2 * sp[42];
        sv14[57] = sv14[55] + sv14[56];
        sv14[58] = sv14[57] * sv14[57];
        sv14[59] = sv14[52] + sv14[58];
        sv14[60] = sv14[39] * sv14[59];
        sv14[61] = (1 + sv14[44]) * sv14[30];
        sv14[62] = sv14[24] * sv14[50];
        sv14[63] = sv14[61] + sv14[62];
        sv14[64] = (1 + sv14[37]) * sv14[57];
        sv14[65] = sv14[63] + sv14[64];
        sv14[66] = sv14[65] * sv14[65];
        sv14[67] = sv14[60] + -1 * sv14[66];
        sv14[68] = sv14[19] * sv14[67];
        sv14[69] = (1 + sv14[44]) * sv14[4];
        sv14[70] = (1 + sv14[9]) * sv14[50];
        sv14[71] = sv14[69] + sv14[70];
        sv14[72] = sv14[17] * sv14[57];
        sv14[73] = sv14[71] + sv14[72];
        sv14[74] = (1 + sv14[9]) * sv14[24];
        sv14[75] = sv14[30] * sv14[4];
        sv14[76] = sv14[74] + sv14[75];
        sv14[77] = (1 + sv14[37]) * sv14[17];
        sv14[78] = sv14[76] + sv14[77];
        sv14[79] = sv14[78] * sv14[65];
        sv14[80] = sv14[39] * sv14[73];
        sv14[81] = sv14[79] + -1 * sv14[80];
        sv14[82] = sv14[73] * sv14[81];
        sv14[83] = sv14[68] + sv14[82];
        sv14[84] = sv14[65] * sv14[73];
        sv14[85] = sv14[78] * sv14[59];
        sv14[86] = sv14[84] + -1 * sv14[85];
        sv14[87] = sv14[78] * sv14[86];
        sv14[88] = sv14[83] + sv14[87];
        sv14[89] = std::pow(sv14[88], -0.3333333333333333) * w[3][0];
        sv14[90] = sv14[4] * sv14[89];
        sv14[91] = std::pow(sv14[88], -1 + -1 * w[5][0]);
        sv14[92] = std::pow(sv14[88], -1 + w[5][0]);
        sv14[93] = -1 * sv14[91] + sv14[92];
        sv14[94] = sv14[93] * sp[43];
        sv14[95] = sv14[19] + sv14[59];
        sv14[96] = sv14[95] + sv14[39];
        sv14[97] = sv14[96] * (-0.3333333333333333 * w[3][0]);
        sv14[98] = sv14[97] * std::pow(sv14[88], -1.333333333333333);
        sv14[99] = sv14[94] + sv14[98];
        sv14[100] = sv14[88] * sv14[99];
        sv14[101] = sv14[24] * sv14[57];
        sv14[102] = (1 + sv14[37]) * (-1 * sv14[50]);
        sv14[103] = sv14[101] + sv14[102];
        sv14[104] = (1 + sv14[37]) * (1 + sv14[44]);
        sv14[105] = sv14[30] * sv14[57];
        sv14[106] = sv14[104] + -1 * sv14[105];
        sv14[107] = (1 + sv14[9]) * sv14[106];
        sv14[108] = sv14[30] * sv14[17];
        sv14[109] = (1 + sv14[37]) * sv14[4];
        sv14[110] = sv14[108] + -1 * sv14[109];
        sv14[111] = sv14[110] * sv14[50];
        sv14[112] = sv14[107] + sv14[111];
        sv14[113] = sv14[4] * sv14[57];
        sv14[114] = (1 + sv14[44]) * sv14[17];
        sv14[115] = sv14[113] + -1 * sv14[114];
        sv14[116] = sv14[115] * sv14[24];
        sv14[117] = sv14[112] + sv14[116];
        sv14[118] = sv14[103] / sv14[117];
        sv14[119] = sv14[100] * sv14[118];
        sv14[120] = sv14[90] + sv14[119];
        sv14[121] = 2 * sv14[120] * sp[14];
        sv14[122] = 2 * sv14[120] * sp[17];
        sv14[123] = 2 * sv14[120] * sp[18];
        sv14[124] = (1 + sv14[9]) * sv14[89];
        sv14[125] = sv14[106] / sv14[117];
        sv14[126] = sv14[100] * sv14[125];
        sv14[127] = sv14[124] + sv14[126];
        sv14[128] = 2 * sv14[127] * sp[14];
        sv14[129] = 2 * sv14[127] * sp[17];
        sv14[130] = 2 * sv14[127] * sp[18];
        sv14[131] = sv14[17] * sv14[89];
        sv14[132] = sv14[30] * sv14[50];
        sv14[133] = (1 + sv14[44]) * sv14[24];
        sv14[134] = sv14[132] + -1 * sv14[133];
        sv14[135] = sv14[134] / sv14[117];
        sv14[136] = sv14[100] * sv14[135];
        sv14[137] = sv14[131] + sv14[136];
        sv14[138] = 2 * sv14[137] * sp[14];
        sv14[139] = 2 * sv14[137] * sp[17];
        sv14[140] = 2 * sv14[137] * sp[18];
        sv14[141] = sv14[50] * sv14[89];
        sv14[142] = sv14[4] * (-1 * (1 + sv14[37]));
        sv14[143] = sv14[108] + sv14[142];
        sv14[144] = sv14[143] / sv14[117];
        sv14[145] = sv14[100] * sv14[144];
        sv14[146] = sv14[141] + sv14[145];
        sv14[147] = 2 * sv14[146] * sp[34];
        sv14[148] = 2 * sv14[146] * sp[38];
        sv14[149] = 2 * sv14[146] * sp[42];
        sv14[150] = (1 + sv14[44]) * sv14[89];
        sv14[151] = (1 + sv14[37]) * (1 + sv14[9]);
        sv14[152] = sv14[17] * (-1 * sv14[24]);
        sv14[153] = sv14[151] + sv14[152];
        sv14[154] = sv14[153] / sv14[117];
        sv14[155] = sv14[100] * sv14[154];
        sv14[156] = sv14[150] + sv14[155];
        sv14[157] = 2 * sv14[156] * sp[34];
        sv14[158] = 2 * sv14[156] * sp[38];
        sv14[159] = 2 * sv14[156] * sp[42];
        sv14[160] = sv14[57] * sv14[89];
        sv14[161] = sv14[24] * sv14[4];
        sv14[162] = (1 + sv14[9]) * sv14[30];
        sv14[163] = sv14[161] + -1 * sv14[162];
        sv14[164] = sv14[163] / sv14[117];
        sv14[165] = sv14[100] * sv14[164];
        sv14[166] = sv14[160] + sv14[165];
        sv14[167] = 2 * sv14[166] * sp[34];
        sv14[168] = 2 * sv14[166] * sp[38];
        sv14[169] = 2 * sv14[166] * sp[42];
        sv14[170] = sv14[157] + sv14[121];
        sv14[171] = sv14[158] + sv14[122];
        sv14[172] = sv14[123] + sv14[159];
        sv14[173] = sv14[147] + sv14[128];
        sv14[174] = sv14[148] + sv14[129];
        sv14[175] = sv14[130] + sv14[149];
        sv14[176] = sv14[167] + sv14[138];
        sv14[177] = sv14[168] + sv14[139];
        sv14[178] = sv14[140] + sv14[169];
        sv14[179] = sv14[24] * sv14[89];
        sv14[180] = sv14[115] / sv14[117];
        sv14[181] = sv14[100] * sv14[180];
        sv14[182] = sv14[179] + sv14[181];
        sv14[183] = 2 * sv14[182] * sp[22];
        sv14[184] = 2 * sv14[182] * sp[26];
        sv14[185] = 2 * sv14[182] * sp[30];
        sv14[186] = sv14[30] * sv14[89];
        sv14[187] = sv14[17] * sv14[50];
        sv14[188] = (1 + sv14[9]) * sv14[57];
        sv14[189] = sv14[187] + -1 * sv14[188];
        sv14[190] = sv14[189] / sv14[117];
        sv14[191] = sv14[100] * sv14[190];
        sv14[192] = sv14[186] + sv14[191];
        sv14[193] = 2 * sv14[192] * sp[22];
        sv14[194] = 2 * sv14[192] * sp[26];
        sv14[195] = 2 * sv14[192] * sp[30];
        sv14[196] = (1 + sv14[37]) * sv14[89];
        sv14[197] = (1 + sv14[9]) * (1 + sv14[44]);
        sv14[198] = sv14[4] * sv14[50];
        sv14[199] = sv14[197] + -1 * sv14[198];
        sv14[200] = sv14[199] / sv14[117];
        sv14[201] = sv14[100] * sv14[200];
        sv14[202] = sv14[196] + sv14[201];
        sv14[203] = 2 * sv14[202] * sp[22];
        sv14[204] = 2 * sv14[202] * sp[26];
        sv14[205] = 2 * sv14[202] * sp[30];
        sv14[206] = sv14[170] + sv14[193];
        sv14[207] = sv14[171] + sv14[194];
        sv14[208] = sv14[172] + sv14[195];
        sv14[209] = sv14[173] + sv14[183];
        sv14[210] = sv14[174] + sv14[184];
        sv14[211] = sv14[175] + sv14[185];
        sv14[212] = sv14[176] + sv14[203];
        sv14[213] = sv14[177] + sv14[204];
        sv14[214] = sv14[178] + sv14[205];
        sv14[215] = sv14[206] * sp[44];
        sv14[216] = sv14[207] * sp[44];
        sv14[217] = sv14[208] * sp[44];
        sv14[218] = sv14[209] * sp[44];
        sv14[219] = sv14[210] * sp[44];
        sv14[220] = sv14[211] * sp[44];
        sv14[221] = sv14[212] * sp[44];
        sv14[222] = sv14[213] * sp[44];
        sv14[223] = sv14[214] * sp[44];
        const double fw0 = sv14[218] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF0[i] += fw0 * FE24_C0_D100_Q14[0][iq][i];
        const double fw1 = sv14[219] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF1[i] += fw1 * FE24_C0_D010_Q14[0][iq][i];
        const double fw2 = sv14[220] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF2[i] += fw2 * FE24_C0_D001_Q14[0][iq][i];
        const double fw3 = sv14[215] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF3[i] += fw3 * FE24_C0_D100_Q14[0][iq][i];
        const double fw4 = sv14[216] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF4[i] += fw4 * FE24_C0_D010_Q14[0][iq][i];
        const double fw5 = sv14[217] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF5[i] += fw5 * FE24_C0_D001_Q14[0][iq][i];
        const double fw6 = sv14[221] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF6[i] += fw6 * FE24_C0_D100_Q14[0][iq][i];
        const double fw7 = sv14[222] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF7[i] += fw7 * FE24_C0_D010_Q14[0][iq][i];
        const double fw8 = sv14[223] * weights14[iq];
        for (int i = 0; i < 7; ++i)
            BF8[i] += fw8 * FE24_C0_D001_Q14[0][iq][i];
    }
    A[0] = -0.008333333333333318 * sp[45];
    A[1] = -0.008333333333333325 * sp[45];
    A[2] = -0.008333333333333326 * sp[45];
    A[3] = -0.00833333333333333 * sp[45];
    A[4] = 0.03333333333333332 * sp[45];
    A[5] = 0.03333333333333333 * sp[45];
    A[6] = 0.03333333333333332 * sp[45];
    A[7] = 0.03333333333333333 * sp[45];
    A[8] = 0.03333333333333331 * sp[45];
    A[9] = 0.03333333333333333 * sp[45];
    A[10] = -0.008333333333333318 * sp[46];
    A[11] = -0.008333333333333325 * sp[46];
    A[12] = -0.008333333333333326 * sp[46];
    A[13] = -0.00833333333333333 * sp[46];
    A[14] = 0.03333333333333332 * sp[46];
    A[15] = 0.03333333333333333 * sp[46];
    A[16] = 0.03333333333333332 * sp[46];
    A[17] = 0.03333333333333333 * sp[46];
    A[18] = 0.03333333333333331 * sp[46];
    A[19] = 0.03333333333333333 * sp[46];
    A[20] = -0.008333333333333318 * sp[47];
    A[21] = -0.008333333333333325 * sp[47];
    A[22] = -0.008333333333333326 * sp[47];
    A[23] = -0.00833333333333333 * sp[47];
    A[24] = 0.03333333333333332 * sp[47];
    A[25] = 0.03333333333333333 * sp[47];
    A[26] = 0.03333333333333332 * sp[47];
    A[27] = 0.03333333333333333 * sp[47];
    A[28] = 0.03333333333333331 * sp[47];
    A[29] = 0.03333333333333333 * sp[47];
    static const int DM0[7] = { 0, 1, 5, 6, 7, 8, 9 };
    static const int DM1[7] = { 0, 2, 4, 6, 7, 8, 9 };
    static const int DM2[7] = { 0, 3, 4, 5, 7, 8, 9 };
    static const int DM3[7] = { 10, 11, 15, 16, 17, 18, 19 };
    static const int DM4[7] = { 10, 12, 14, 16, 17, 18, 19 };
    static const int DM5[7] = { 10, 13, 14, 15, 17, 18, 19 };
    static const int DM6[7] = { 20, 21, 25, 26, 27, 28, 29 };
    static const int DM7[7] = { 20, 22, 24, 26, 27, 28, 29 };
    static const int DM8[7] = { 20, 23, 24, 25, 27, 28, 29 };
    for (int i = 0; i < 7; ++i)
        A[DM0[i]] += BF0[i];
    for (int i = 0; i < 7; ++i)
        A[DM1[i]] += BF1[i];
    for (int i = 0; i < 7; ++i)
        A[DM2[i]] += BF2[i];
    for (int i = 0; i < 7; ++i)
        A[DM3[i]] += BF3[i];
    for (int i = 0; i < 7; ++i)
        A[DM4[i]] += BF4[i];
    for (int i = 0; i < 7; ++i)
        A[DM5[i]] += BF5[i];
    for (int i = 0; i < 7; ++i)
        A[DM6[i]] += BF6[i];
    for (int i = 0; i < 7; ++i)
        A[DM7[i]] += BF7[i];
    for (int i = 0; i < 7; ++i)
        A[DM8[i]] += BF8[i];
}


hyperelasticitycarotidiso_exterior_facet_integral_2_3::hyperelasticitycarotidiso_exterior_facet_integral_2_3() : ufc::exterior_facet_integral()
{

}

hyperelasticitycarotidiso_exterior_facet_integral_2_3::~hyperelasticitycarotidiso_exterior_facet_integral_2_3()
{

}

const std::vector<bool> & hyperelasticitycarotidiso_exterior_facet_integral_2_3::enabled_coefficients() const
{
static const std::vector<bool> enabled({false, false, true, false, false, false});
return enabled;
}

void hyperelasticitycarotidiso_exterior_facet_integral_2_3::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    std::size_t facet,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE16_C0_D001_F_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[4][10] =
        { { 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.1666666666666664, 0.1666666666666663, 0.0, 0.0, 0.0 },
          { 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.0, 0.0, 0.1666666666666664, 0.1666666666666663, 0.0 },
          { 0.0, 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.0, 0.1666666666666664, 0.0, 0.1666666666666663 },
          { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1666666666666665, 0.0, 0.1666666666666662, 0.1666666666666663 } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[4] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[7] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[10] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[5] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[8] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[11] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[3] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[6] * FE16_C0_D001_F_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE16_C0_D001_F_Q6[0][0][0] + coordinate_dofs[9] * FE16_C0_D001_F_Q6[0][0][1];
    alignas(32) double sp[48];
    sp[0] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[1] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[2] = sp[0] + sp[1];
    sp[3] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[4] = sp[2] + sp[3];
    sp[5] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[6] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[7] = sp[5] + sp[6];
    sp[8] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[9] = sp[7] + sp[8];
    sp[10] = sp[4] * sp[9];
    sp[11] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[12] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[13] = sp[11] + sp[12];
    sp[14] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[15] = sp[13] + sp[14];
    sp[16] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[17] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[18] = sp[16] + sp[17];
    sp[19] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[20] = sp[18] + sp[19];
    sp[21] = sp[15] * sp[20];
    sp[22] = sp[10] + -1 * sp[21];
    sp[23] = sp[22] * sp[22];
    sp[24] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[25] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[26] = sp[24] + sp[25];
    sp[27] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] * sp[20];
    sp[30] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[31] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[32] = sp[30] + sp[31];
    sp[33] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[34] = sp[32] + sp[33];
    sp[35] = sp[34] * sp[9];
    sp[36] = sp[29] + -1 * sp[35];
    sp[37] = sp[36] * sp[36];
    sp[38] = sp[23] + sp[37];
    sp[39] = sp[34] * sp[15];
    sp[40] = sp[4] * sp[28];
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = sp[38] + sp[42];
    sp[44] = std::sqrt(sp[43]);
    sp[45] = -1 * w[2][0] * sp[44];
    sp[46] = -1 * w[2][1] * sp[44];
    sp[47] = -1 * w[2][2] * sp[44];
    A[0] = sp[45] * PI0[facet][0];
    A[1] = sp[45] * PI0[facet][1];
    A[2] = sp[45] * PI0[facet][2];
    A[3] = sp[45] * PI0[facet][3];
    A[4] = sp[45] * PI0[facet][4];
    A[5] = sp[45] * PI0[facet][5];
    A[6] = sp[45] * PI0[facet][6];
    A[7] = sp[45] * PI0[facet][7];
    A[8] = sp[45] * PI0[facet][8];
    A[9] = sp[45] * PI0[facet][9];
    A[10] = sp[46] * PI0[facet][0];
    A[11] = sp[46] * PI0[facet][1];
    A[12] = sp[46] * PI0[facet][2];
    A[13] = sp[46] * PI0[facet][3];
    A[14] = sp[46] * PI0[facet][4];
    A[15] = sp[46] * PI0[facet][5];
    A[16] = sp[46] * PI0[facet][6];
    A[17] = sp[46] * PI0[facet][7];
    A[18] = sp[46] * PI0[facet][8];
    A[19] = sp[46] * PI0[facet][9];
    A[20] = sp[47] * PI0[facet][0];
    A[21] = sp[47] * PI0[facet][1];
    A[22] = sp[47] * PI0[facet][2];
    A[23] = sp[47] * PI0[facet][3];
    A[24] = sp[47] * PI0[facet][4];
    A[25] = sp[47] * PI0[facet][5];
    A[26] = sp[47] * PI0[facet][6];
    A[27] = sp[47] * PI0[facet][7];
    A[28] = sp[47] * PI0[facet][8];
    A[29] = sp[47] * PI0[facet][9];
}


hyperelasticitycarotidiso_cell_integral_3_otherwise::hyperelasticitycarotidiso_cell_integral_3_otherwise() : ufc::cell_integral()
{

}

hyperelasticitycarotidiso_cell_integral_3_otherwise::~hyperelasticitycarotidiso_cell_integral_3_otherwise()
{

}

const std::vector<bool> & hyperelasticitycarotidiso_cell_integral_3_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void hyperelasticitycarotidiso_cell_integral_3_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q14[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q14[0][0][1];
    alignas(32) double sp[15];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = std::abs(sp[13]);
    A[0] = 0.01666666666666666 * sp[14];
    A[1] = 0.008333333333333328 * sp[14];
    A[2] = 0.008333333333333333 * sp[14];
    A[3] = 0.008333333333333331 * sp[14];
    A[4] = 0.008333333333333328 * sp[14];
    A[5] = 0.01666666666666666 * sp[14];
    A[6] = 0.008333333333333328 * sp[14];
    A[7] = 0.00833333333333333 * sp[14];
    A[8] = 0.008333333333333333 * sp[14];
    A[9] = 0.008333333333333328 * sp[14];
    A[10] = 0.01666666666666666 * sp[14];
    A[11] = 0.00833333333333333 * sp[14];
    A[12] = 0.008333333333333331 * sp[14];
    A[13] = 0.00833333333333333 * sp[14];
    A[14] = 0.00833333333333333 * sp[14];
    A[15] = 0.01666666666666666 * sp[14];
}


hyperelasticitycarotidiso_cell_integral_4_otherwise::hyperelasticitycarotidiso_cell_integral_4_otherwise() : ufc::cell_integral()
{

}

hyperelasticitycarotidiso_cell_integral_4_otherwise::~hyperelasticitycarotidiso_cell_integral_4_otherwise()
{

}

const std::vector<bool> & hyperelasticitycarotidiso_cell_integral_4_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
}

void hyperelasticitycarotidiso_cell_integral_4_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 4
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 69
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           4
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights14[14] = { 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.003174603174603167, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.01476497079049678, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512, 0.02213979111426512 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE18_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE18_C0_Q14[1][14][4] =
        { { { 0.0, 0.0, 0.5, 0.5 },
            { 0.0, 0.5, 0.0, 0.5 },
            { 0.0, 0.5, 0.5, 0.0 },
            { 0.5, 0.5, 0.0, 0.0 },
            { 0.5, 0.0, 0.5, 0.0 },
            { 0.5, 0.0, 0.0, 0.5 },
            { 0.1005267652252045, 0.6984197043243864, 0.1005267652252045, 0.1005267652252045 },
            { 0.6984197043243865, 0.1005267652252044, 0.1005267652252045, 0.1005267652252045 },
            { 0.1005267652252046, 0.1005267652252045, 0.1005267652252045, 0.6984197043243865 },
            { 0.1005267652252046, 0.1005267652252045, 0.6984197043243865, 0.1005267652252045 },
            { 0.3143728734931923, 0.05688137952042335, 0.3143728734931922, 0.3143728734931922 },
            { 0.05688137952042346, 0.3143728734931922, 0.3143728734931922, 0.3143728734931922 },
            { 0.3143728734931923, 0.3143728734931921, 0.3143728734931922, 0.05688137952042342 },
            { 0.3143728734931922, 0.3143728734931922, 0.05688137952042344, 0.3143728734931922 } } };
    alignas(32) static const double FE8_C0_D001_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.0, 0.0, -2.000000000000002, -2.0, 0.0 },
            { 1.0, 1.0, 0.0, 2.000000000000009, -2.000000000000001, 0.0, -2.000000000000001 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000006, 0.0, -1.999999999999999, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000005, 1.999999999999999, 0.0, -2.000000000000002 },
            { -1.0, -1.0, 2.000000000000005, 0.0, 1.999999999999999, -2.000000000000002, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.5978929390991835, -0.5978929390991861, 0.4021070609008202, 2.793678817297555, 0.0, -0.402107060900818, -2.793678817297546 },
            { -1.793678817297546, -0.5978929390991861, 0.4021070609008201, 0.4021070609008222, 2.391571756396729, -0.4021070609008185, -0.4021070609008175 },
            { 0.5978929390991836, 1.793678817297544, 0.4021070609008153, 0.402107060900826, -2.39157175639673, -0.4021070609008163, -0.4021070609008194 },
            { 0.5978929390991834, -0.5978929390991863, 2.79367881729755, 0.4021070609008223, 0.0, -2.793678817297547, -0.4021070609008178 },
            { -0.2574914939727679, 0.2574914939727652, 1.25749149397277, 0.2275255180817003, 0.0, -1.257491493972769, -0.2275255180816939 },
            { 0.772474481918307, 0.2574914939727656, 1.257491493972769, 1.257491493972775, -1.029965975891076, -1.257491493972768, -1.257491493972768 },
            { -0.2574914939727679, -0.7724744819183106, 1.257491493972772, 1.257491493972775, 1.029965975891074, -1.257491493972769, -1.257491493972769 },
            { -0.2574914939727683, 0.2574914939727655, 0.2275255180816932, 1.257491493972775, 0.0, -0.2275255180816933, -1.25749149397277 } } };
    alignas(32) static const double FE8_C0_D010_Q14[1][14][7] =
        { { { 1.0, 1.0, 2.000000000000002, 0.0, -2.000000000000001, -2.000000000000001, 0.0 },
            { 1.0, -1.0, 2.000000000000003, 2.000000000000004, -2.000000000000002, 0.0, -2.0 },
            { 1.0, 1.0, 0.0, 2.000000000000007, 0.0, -2.000000000000004, -1.999999999999998 },
            { -1.0, -1.0, 0.0, 2.000000000000008, 0.0, 1.999999999999997, -2.000000000000002 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000001, 2.0, 0.0 },
            { 0.5978929390991842, -0.5978929390991845, 0.4021070609008187, 2.793678817297554, -0.4021070609008185, 0.0, -2.793678817297547 },
            { -1.793678817297546, -0.5978929390991848, 0.4021070609008187, 0.4021070609008225, -0.4021070609008185, 2.391571756396729, -0.402107060900818 },
            { 0.5978929390991847, -0.5978929390991838, 2.793678817297549, 0.4021070609008207, -2.793678817297548, 0.0, -0.4021070609008185 },
            { 0.5978929390991841, 1.793678817297543, 0.402107060900819, 0.4021070609008253, -0.4021070609008185, -2.39157175639673, -0.4021070609008197 },
            { -0.2574914939727678, 0.2574914939727657, 1.25749149397277, 0.2275255180816988, -1.25749149397277, 0.0, -0.2275255180816941 },
            { 0.7724744819183076, 0.2574914939727661, 1.25749149397277, 1.257491493972774, -1.25749149397277, -1.029965975891076, -1.257491493972769 },
            { -0.2574914939727673, 0.2574914939727654, 0.2275255180816944, 1.257491493972776, -0.2275255180816943, 0.0, -1.25749149397277 },
            { -0.2574914939727672, -0.7724744819183081, 1.25749149397277, 1.257491493972773, -1.25749149397277, 1.029965975891074, -1.257491493972769 } } };
    alignas(32) static const double FE8_C0_D100_Q14[1][14][7] =
        { { { 1.0, -1.0, 2.000000000000002, 2.000000000000001, -2.000000000000002, -2.000000000000002, 0.0 },
            { 1.0, 1.0, 2.000000000000003, 0.0, -2.000000000000002, 0.0, -1.999999999999996 },
            { 1.0, 1.0, 0.0, 2.000000000000002, 0.0, -2.000000000000002, -2.000000000000003 },
            { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.0, -1.0, 0.0, 2.000000000000003, 0.0, -2.000000000000004, 2.000000000000001 },
            { -1.0, -1.0, 2.000000000000002, 0.0, -2.000000000000002, 0.0, 1.999999999999996 },
            { 0.5978929390991843, 1.793678817297546, 0.4021070609008183, 0.4021070609008181, -0.4021070609008182, -0.4021070609008184, -2.391571756396731 },
            { -1.793678817297545, -0.5978929390991818, 0.4021070609008187, 0.4021070609008185, -0.4021070609008186, -0.4021070609008188, 2.391571756396727 },
            { 0.5978929390991843, -0.5978929390991823, 2.79367881729755, 0.4021070609008178, -2.793678817297549, -0.4021070609008179, 0.0 },
            { 0.5978929390991838, -0.5978929390991845, 0.4021070609008183, 2.793678817297549, -0.4021070609008183, -2.79367881729755, 0.0 },
            { -0.2574914939727669, -0.7724744819183068, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, 1.029965975891074 },
            { 0.7724744819183075, 0.2574914939727674, 1.25749149397277, 1.25749149397277, -1.25749149397277, -1.25749149397277, -1.029965975891075 },
            { -0.2574914939727676, 0.2574914939727681, 0.2275255180816942, 1.25749149397277, -0.2275255180816941, -1.25749149397277, 0.0 },
            { -0.2574914939727683, 0.2574914939727673, 1.25749149397277, 0.2275255180816939, -1.25749149397277, -0.2275255180816939, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE18_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE18_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE18_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE18_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE18_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE18_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE18_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE18_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE18_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE18_C0_D001_Q14[0][0][1];
    alignas(32) double sp[45];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c1 * J_c5;
    sp[20] = J_c2 * J_c4;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c2 * J_c3;
    sp[24] = J_c0 * J_c5;
    sp[25] = sp[23] + -1 * sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c0 * J_c4;
    sp[28] = J_c1 * J_c3;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c2 * J_c7;
    sp[32] = J_c8 * (-1 * J_c1);
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c0 * J_c8;
    sp[36] = J_c6 * (-1 * J_c2);
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c1 * J_c6;
    sp[40] = J_c0 * J_c7;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = w[2][0] * w[3][0];
    sp[44] = std::abs(sp[13]);
    alignas(32) double BF0[4] = {};
    for (int iq = 0; iq < 14; ++iq)
    {
        // Quadrature loop body setup (num_points=14)
        // Unstructured varying computations for num_points=14
        const double w0_d0_c0 = w[0][0] * FE8_C0_D100_Q14[0][iq][0] + w[0][1] * FE8_C0_D100_Q14[0][iq][1] + w[0][5] * FE8_C0_D100_Q14[0][iq][2] + w[0][6] * FE8_C0_D100_Q14[0][iq][3] + w[0][7] * FE8_C0_D100_Q14[0][iq][4] + w[0][8] * FE8_C0_D100_Q14[0][iq][5] + w[0][9] * FE8_C0_D100_Q14[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE8_C0_D010_Q14[0][iq][0] + w[0][2] * FE8_C0_D010_Q14[0][iq][1] + w[0][4] * FE8_C0_D010_Q14[0][iq][2] + w[0][6] * FE8_C0_D010_Q14[0][iq][3] + w[0][7] * FE8_C0_D010_Q14[0][iq][4] + w[0][8] * FE8_C0_D010_Q14[0][iq][5] + w[0][9] * FE8_C0_D010_Q14[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE8_C0_D001_Q14[0][iq][0] + w[0][3] * FE8_C0_D001_Q14[0][iq][1] + w[0][4] * FE8_C0_D001_Q14[0][iq][2] + w[0][5] * FE8_C0_D001_Q14[0][iq][3] + w[0][7] * FE8_C0_D001_Q14[0][iq][4] + w[0][8] * FE8_C0_D001_Q14[0][iq][5] + w[0][9] * FE8_C0_D001_Q14[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE8_C0_D100_Q14[0][iq][0] + w[0][11] * FE8_C0_D100_Q14[0][iq][1] + w[0][15] * FE8_C0_D100_Q14[0][iq][2] + w[0][16] * FE8_C0_D100_Q14[0][iq][3] + w[0][17] * FE8_C0_D100_Q14[0][iq][4] + w[0][18] * FE8_C0_D100_Q14[0][iq][5] + w[0][19] * FE8_C0_D100_Q14[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE8_C0_D010_Q14[0][iq][0] + w[0][12] * FE8_C0_D010_Q14[0][iq][1] + w[0][14] * FE8_C0_D010_Q14[0][iq][2] + w[0][16] * FE8_C0_D010_Q14[0][iq][3] + w[0][17] * FE8_C0_D010_Q14[0][iq][4] + w[0][18] * FE8_C0_D010_Q14[0][iq][5] + w[0][19] * FE8_C0_D010_Q14[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE8_C0_D001_Q14[0][iq][0] + w[0][13] * FE8_C0_D001_Q14[0][iq][1] + w[0][14] * FE8_C0_D001_Q14[0][iq][2] + w[0][15] * FE8_C0_D001_Q14[0][iq][3] + w[0][17] * FE8_C0_D001_Q14[0][iq][4] + w[0][18] * FE8_C0_D001_Q14[0][iq][5] + w[0][19] * FE8_C0_D001_Q14[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE8_C0_D100_Q14[0][iq][0] + w[0][21] * FE8_C0_D100_Q14[0][iq][1] + w[0][25] * FE8_C0_D100_Q14[0][iq][2] + w[0][26] * FE8_C0_D100_Q14[0][iq][3] + w[0][27] * FE8_C0_D100_Q14[0][iq][4] + w[0][28] * FE8_C0_D100_Q14[0][iq][5] + w[0][29] * FE8_C0_D100_Q14[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE8_C0_D010_Q14[0][iq][0] + w[0][22] * FE8_C0_D010_Q14[0][iq][1] + w[0][24] * FE8_C0_D010_Q14[0][iq][2] + w[0][26] * FE8_C0_D010_Q14[0][iq][3] + w[0][27] * FE8_C0_D010_Q14[0][iq][4] + w[0][28] * FE8_C0_D010_Q14[0][iq][5] + w[0][29] * FE8_C0_D010_Q14[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE8_C0_D001_Q14[0][iq][0] + w[0][23] * FE8_C0_D001_Q14[0][iq][1] + w[0][24] * FE8_C0_D001_Q14[0][iq][2] + w[0][25] * FE8_C0_D001_Q14[0][iq][3] + w[0][27] * FE8_C0_D001_Q14[0][iq][4] + w[0][28] * FE8_C0_D001_Q14[0][iq][5] + w[0][29] * FE8_C0_D001_Q14[0][iq][6];
        alignas(32) double sv14[297];
        sv14[0] = w0_d0_c0 * sp[14];
        sv14[1] = w0_d1_c0 * sp[17];
        sv14[2] = sv14[0] + sv14[1];
        sv14[3] = w0_d2_c0 * sp[18];
        sv14[4] = sv14[2] + sv14[3];
        sv14[5] = (1 + sv14[4]) * (1 + sv14[4]);
        sv14[6] = w0_d0_c1 * sp[14];
        sv14[7] = w0_d1_c1 * sp[17];
        sv14[8] = sv14[6] + sv14[7];
        sv14[9] = w0_d2_c1 * sp[18];
        sv14[10] = sv14[8] + sv14[9];
        sv14[11] = sv14[10] * sv14[10];
        sv14[12] = sv14[5] + sv14[11];
        sv14[13] = w0_d0_c2 * sp[14];
        sv14[14] = w0_d1_c2 * sp[17];
        sv14[15] = sv14[13] + sv14[14];
        sv14[16] = w0_d2_c2 * sp[18];
        sv14[17] = sv14[15] + sv14[16];
        sv14[18] = sv14[17] * sv14[17];
        sv14[19] = sv14[12] + sv14[18];
        sv14[20] = w0_d0_c0 * sp[22];
        sv14[21] = w0_d1_c0 * sp[26];
        sv14[22] = sv14[20] + sv14[21];
        sv14[23] = w0_d2_c0 * sp[30];
        sv14[24] = sv14[22] + sv14[23];
        sv14[25] = sv14[24] * sv14[24];
        sv14[26] = w0_d0_c1 * sp[22];
        sv14[27] = w0_d1_c1 * sp[26];
        sv14[28] = sv14[26] + sv14[27];
        sv14[29] = w0_d2_c1 * sp[30];
        sv14[30] = sv14[28] + sv14[29];
        sv14[31] = sv14[30] * sv14[30];
        sv14[32] = sv14[25] + sv14[31];
        sv14[33] = w0_d0_c2 * sp[22];
        sv14[34] = w0_d1_c2 * sp[26];
        sv14[35] = sv14[33] + sv14[34];
        sv14[36] = w0_d2_c2 * sp[30];
        sv14[37] = sv14[35] + sv14[36];
        sv14[38] = (1 + sv14[37]) * (1 + sv14[37]);
        sv14[39] = sv14[32] + sv14[38];
        sv14[40] = w0_d0_c1 * sp[34];
        sv14[41] = w0_d1_c1 * sp[38];
        sv14[42] = sv14[40] + sv14[41];
        sv14[43] = w0_d2_c1 * sp[42];
        sv14[44] = sv14[42] + sv14[43];
        sv14[45] = (1 + sv14[44]) * (1 + sv14[44]);
        sv14[46] = w0_d0_c0 * sp[34];
        sv14[47] = w0_d1_c0 * sp[38];
        sv14[48] = sv14[46] + sv14[47];
        sv14[49] = w0_d2_c0 * sp[42];
        sv14[50] = sv14[48] + sv14[49];
        sv14[51] = sv14[50] * sv14[50];
        sv14[52] = sv14[45] + sv14[51];
        sv14[53] = w0_d0_c2 * sp[34];
        sv14[54] = w0_d1_c2 * sp[38];
        sv14[55] = sv14[53] + sv14[54];
        sv14[56] = w0_d2_c2 * sp[42];
        sv14[57] = sv14[55] + sv14[56];
        sv14[58] = sv14[57] * sv14[57];
        sv14[59] = sv14[52] + sv14[58];
        sv14[60] = sv14[39] * sv14[59];
        sv14[61] = (1 + sv14[44]) * sv14[30];
        sv14[62] = sv14[24] * sv14[50];
        sv14[63] = sv14[61] + sv14[62];
        sv14[64] = (1 + sv14[37]) * sv14[57];
        sv14[65] = sv14[63] + sv14[64];
        sv14[66] = sv14[65] * sv14[65];
        sv14[67] = sv14[60] + -1 * sv14[66];
        sv14[68] = sv14[19] * sv14[67];
        sv14[69] = (1 + sv14[44]) * sv14[10];
        sv14[70] = (1 + sv14[4]) * sv14[50];
        sv14[71] = sv14[69] + sv14[70];
        sv14[72] = sv14[17] * sv14[57];
        sv14[73] = sv14[71] + sv14[72];
        sv14[74] = (1 + sv14[4]) * sv14[24];
        sv14[75] = sv14[30] * sv14[10];
        sv14[76] = sv14[74] + sv14[75];
        sv14[77] = (1 + sv14[37]) * sv14[17];
        sv14[78] = sv14[76] + sv14[77];
        sv14[79] = sv14[78] * sv14[65];
        sv14[80] = sv14[39] * sv14[73];
        sv14[81] = sv14[79] + -1 * sv14[80];
        sv14[82] = sv14[73] * sv14[81];
        sv14[83] = sv14[68] + sv14[82];
        sv14[84] = sv14[65] * sv14[73];
        sv14[85] = sv14[78] * sv14[59];
        sv14[86] = sv14[84] + -1 * sv14[85];
        sv14[87] = sv14[78] * sv14[86];
        sv14[88] = sv14[83] + sv14[87];
        sv14[89] = std::pow(sv14[88], -1 + -1 * w[3][0]);
        sv14[90] = std::pow(sv14[88], -1 + w[3][0]);
        sv14[91] = -1 * sv14[89] + sv14[90];
        sv14[92] = sv14[91] * sp[43];
        sv14[93] = sv14[19] + sv14[59];
        sv14[94] = sv14[93] + sv14[39];
        sv14[95] = sv14[94] * (-0.3333333333333333 * w[1][0]);
        sv14[96] = sv14[95] * std::pow(sv14[88], -1.333333333333333);
        sv14[97] = sv14[92] + sv14[96];
        sv14[98] = (1 + sv14[37]) * (1 + sv14[44]);
        sv14[99] = sv14[30] * sv14[57];
        sv14[100] = sv14[98] + -1 * sv14[99];
        sv14[101] = (1 + sv14[4]) * sv14[100];
        sv14[102] = sv14[30] * sv14[17];
        sv14[103] = (1 + sv14[37]) * sv14[10];
        sv14[104] = sv14[102] + -1 * sv14[103];
        sv14[105] = sv14[104] * sv14[50];
        sv14[106] = sv14[101] + sv14[105];
        sv14[107] = sv14[10] * sv14[57];
        sv14[108] = (1 + sv14[44]) * sv14[17];
        sv14[109] = sv14[107] + -1 * sv14[108];
        sv14[110] = sv14[109] * sv14[24];
        sv14[111] = sv14[106] + sv14[110];
        sv14[112] = sv14[97] * std::pow(sv14[111], 2);
        sv14[113] = sv14[24] * sv14[57];
        sv14[114] = (1 + sv14[37]) * (-1 * sv14[50]);
        sv14[115] = sv14[113] + sv14[114];
        sv14[116] = sv14[115] / sv14[111];
        sv14[117] = sv14[112] * sv14[116];
        sv14[118] = sv14[117] * sv14[116];
        sv14[119] = sv14[100] / sv14[111];
        sv14[120] = sv14[112] * sv14[119];
        sv14[121] = sv14[120] * sv14[119];
        sv14[122] = sv14[118] + sv14[121];
        sv14[123] = sv14[30] * sv14[50];
        sv14[124] = (1 + sv14[44]) * sv14[24];
        sv14[125] = sv14[123] + -1 * sv14[124];
        sv14[126] = sv14[125] / sv14[111];
        sv14[127] = sv14[112] * sv14[126];
        sv14[128] = sv14[127] * sv14[126];
        sv14[129] = sv14[122] + sv14[128];
        sv14[130] = std::pow(sv14[88], -0.3333333333333333) * w[1][0];
        sv14[131] = sv14[129] + sv14[130];
        sv14[132] = sv14[17] * (1.0 / sv14[111]);
        sv14[133] = sv14[131] * sv14[132];
        sv14[134] = (1 + sv14[37]) * (1 + sv14[4]);
        sv14[135] = sv14[17] * (-1 * sv14[24]);
        sv14[136] = sv14[134] + sv14[135];
        sv14[137] = sv14[136] / sv14[111];
        sv14[138] = sv14[112] * sv14[137];
        sv14[139] = sv14[138] * sv14[116];
        sv14[140] = sv14[10] * (-1 * (1 + sv14[37]));
        sv14[141] = sv14[102] + sv14[140];
        sv14[142] = sv14[141] / sv14[111];
        sv14[143] = sv14[112] * sv14[142];
        sv14[144] = sv14[143] * sv14[119];
        sv14[145] = sv14[139] + sv14[144];
        sv14[146] = sv14[24] * sv14[10];
        sv14[147] = (1 + sv14[4]) * sv14[30];
        sv14[148] = sv14[146] + -1 * sv14[147];
        sv14[149] = sv14[148] / sv14[111];
        sv14[150] = sv14[112] * sv14[149];
        sv14[151] = sv14[150] * sv14[126];
        sv14[152] = sv14[145] + sv14[151];
        sv14[153] = sv14[57] * (1.0 / sv14[111]);
        sv14[154] = sv14[152] * sv14[153];
        sv14[155] = sv14[133] + sv14[154];
        sv14[156] = sv14[17] * sv14[50];
        sv14[157] = (1 + sv14[4]) * sv14[57];
        sv14[158] = sv14[156] + -1 * sv14[157];
        sv14[159] = sv14[158] / sv14[111];
        sv14[160] = sv14[112] * sv14[159];
        sv14[161] = sv14[160] * sv14[116];
        sv14[162] = sv14[109] / sv14[111];
        sv14[163] = sv14[112] * sv14[162];
        sv14[164] = sv14[163] * sv14[119];
        sv14[165] = sv14[161] + sv14[164];
        sv14[166] = (1 + sv14[4]) * (1 + sv14[44]);
        sv14[167] = sv14[10] * sv14[50];
        sv14[168] = sv14[166] + -1 * sv14[167];
        sv14[169] = sv14[168] / sv14[111];
        sv14[170] = sv14[112] * sv14[169];
        sv14[171] = sv14[170] * sv14[126];
        sv14[172] = sv14[165] + sv14[171];
        sv14[173] = (1 + sv14[37]) * (1.0 / sv14[111]);
        sv14[174] = sv14[172] * sv14[173];
        sv14[175] = sv14[155] + sv14[174];
        sv14[176] = sv14[175] * sv14[17];
        sv14[177] = sv14[120] * sv14[142];
        sv14[178] = sv14[117] * sv14[137];
        sv14[179] = sv14[177] + sv14[178];
        sv14[180] = sv14[127] * sv14[149];
        sv14[181] = sv14[179] + sv14[180];
        sv14[182] = sv14[181] * sv14[132];
        sv14[183] = sv14[143] * sv14[142];
        sv14[184] = sv14[138] * sv14[137];
        sv14[185] = sv14[183] + sv14[184];
        sv14[186] = sv14[150] * sv14[149];
        sv14[187] = sv14[185] + sv14[186];
        sv14[188] = sv14[187] + sv14[130];
        sv14[189] = sv14[188] * sv14[153];
        sv14[190] = sv14[182] + sv14[189];
        sv14[191] = sv14[163] * sv14[142];
        sv14[192] = sv14[160] * sv14[137];
        sv14[193] = sv14[191] + sv14[192];
        sv14[194] = sv14[170] * sv14[149];
        sv14[195] = sv14[193] + sv14[194];
        sv14[196] = sv14[195] * sv14[173];
        sv14[197] = sv14[190] + sv14[196];
        sv14[198] = sv14[197] * sv14[57];
        sv14[199] = sv14[176] + sv14[198];
        sv14[200] = sv14[120] * sv14[162];
        sv14[201] = sv14[117] * sv14[159];
        sv14[202] = sv14[200] + sv14[201];
        sv14[203] = sv14[127] * sv14[169];
        sv14[204] = sv14[202] + sv14[203];
        sv14[205] = sv14[204] * sv14[132];
        sv14[206] = sv14[143] * sv14[162];
        sv14[207] = sv14[138] * sv14[159];
        sv14[208] = sv14[206] + sv14[207];
        sv14[209] = sv14[150] * sv14[169];
        sv14[210] = sv14[208] + sv14[209];
        sv14[211] = sv14[210] * sv14[153];
        sv14[212] = sv14[205] + sv14[211];
        sv14[213] = sv14[163] * sv14[162];
        sv14[214] = sv14[160] * sv14[159];
        sv14[215] = sv14[213] + sv14[214];
        sv14[216] = sv14[170] * sv14[169];
        sv14[217] = sv14[215] + sv14[216];
        sv14[218] = sv14[217] + sv14[130];
        sv14[219] = sv14[218] * sv14[173];
        sv14[220] = sv14[212] + sv14[219];
        sv14[221] = (1 + sv14[37]) * sv14[220];
        sv14[222] = sv14[199] + sv14[221];
        sv14[223] = (1 + sv14[44]) * (1.0 / sv14[111]);
        sv14[224] = sv14[188] * sv14[223];
        sv14[225] = sv14[10] * (1.0 / sv14[111]);
        sv14[226] = sv14[181] * sv14[225];
        sv14[227] = sv14[224] + sv14[226];
        sv14[228] = sv14[30] * (1.0 / sv14[111]);
        sv14[229] = sv14[195] * sv14[228];
        sv14[230] = sv14[227] + sv14[229];
        sv14[231] = (1 + sv14[44]) * sv14[230];
        sv14[232] = sv14[152] * sv14[223];
        sv14[233] = sv14[131] * sv14[225];
        sv14[234] = sv14[232] + sv14[233];
        sv14[235] = sv14[172] * sv14[228];
        sv14[236] = sv14[234] + sv14[235];
        sv14[237] = sv14[236] * sv14[10];
        sv14[238] = sv14[231] + sv14[237];
        sv14[239] = sv14[210] * sv14[223];
        sv14[240] = sv14[204] * sv14[225];
        sv14[241] = sv14[239] + sv14[240];
        sv14[242] = sv14[218] * sv14[228];
        sv14[243] = sv14[241] + sv14[242];
        sv14[244] = sv14[243] * sv14[30];
        sv14[245] = sv14[238] + sv14[244];
        sv14[246] = std::pow(sv14[222], 2) + std::pow(sv14[245], 2);
        sv14[247] = (1 + sv14[4]) * (1.0 / sv14[111]);
        sv14[248] = sv14[131] * sv14[247];
        sv14[249] = sv14[50] * (1.0 / sv14[111]);
        sv14[250] = sv14[152] * sv14[249];
        sv14[251] = sv14[248] + sv14[250];
        sv14[252] = sv14[24] * (1.0 / sv14[111]);
        sv14[253] = sv14[172] * sv14[252];
        sv14[254] = sv14[251] + sv14[253];
        sv14[255] = (1 + sv14[4]) * sv14[254];
        sv14[256] = sv14[181] * sv14[247];
        sv14[257] = sv14[188] * sv14[249];
        sv14[258] = sv14[256] + sv14[257];
        sv14[259] = sv14[195] * sv14[252];
        sv14[260] = sv14[258] + sv14[259];
        sv14[261] = sv14[260] * sv14[50];
        sv14[262] = sv14[255] + sv14[261];
        sv14[263] = sv14[204] * sv14[247];
        sv14[264] = sv14[210] * sv14[249];
        sv14[265] = sv14[263] + sv14[264];
        sv14[266] = sv14[218] * sv14[252];
        sv14[267] = sv14[265] + sv14[266];
        sv14[268] = sv14[267] * sv14[24];
        sv14[269] = sv14[262] + sv14[268];
        sv14[270] = sv14[246] + std::pow(sv14[269], 2);
        sv14[271] = sv14[222] * sv14[245];
        sv14[272] = sv14[270] + -1 * sv14[271];
        sv14[273] = sv14[269] * sv14[245];
        sv14[274] = sv14[272] + -1 * sv14[273];
        sv14[275] = sv14[222] * sv14[269];
        sv14[276] = sv14[274] + -1 * sv14[275];
        sv14[277] = sv14[236] * sv14[17];
        sv14[278] = sv14[230] * sv14[57];
        sv14[279] = sv14[277] + sv14[278];
        sv14[280] = (1 + sv14[37]) * sv14[243];
        sv14[281] = sv14[279] + sv14[280];
        sv14[282] = (1 + sv14[4]) * sv14[236];
        sv14[283] = sv14[230] * sv14[50];
        sv14[284] = sv14[282] + sv14[283];
        sv14[285] = sv14[243] * sv14[24];
        sv14[286] = sv14[284] + sv14[285];
        sv14[287] = std::pow(sv14[281], 2) + std::pow(sv14[286], 2);
        sv14[288] = (1 + sv14[4]) * sv14[175];
        sv14[289] = sv14[197] * sv14[50];
        sv14[290] = sv14[288] + sv14[289];
        sv14[291] = sv14[220] * sv14[24];
        sv14[292] = sv14[290] + sv14[291];
        sv14[293] = sv14[287] + std::pow(sv14[292], 2);
        sv14[294] = sv14[276] + 3 * sv14[293];
        sv14[295] = std::sqrt(sv14[294]);
        sv14[296] = sp[44] * sv14[295];
        const double fw0 = sv14[296] * weights14[iq];
        for (int i = 0; i < 4; ++i)
            BF0[i] += fw0 * FE18_C0_Q14[0][iq][i];
    }
    std::fill(A, A + 4, 0.0);
    for (int i = 0; i < 4; ++i)
        A[i] += BF0[i];
}


hyperelasticitycarotidiso_form_0::hyperelasticitycarotidiso_form_0() : ufc::form()
{
    // Do nothing
}

hyperelasticitycarotidiso_form_0::~hyperelasticitycarotidiso_form_0()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_form_0::signature() const
{
    return "2c37991c7aebcfbacf73a84d64192ef091771e486b57fd0134da9b75ac798d294eb174659d0ee12d625e9ed3e41e5389abb68909c41422f4deb83abecebc269e";
}

std::size_t hyperelasticitycarotidiso_form_0::rank() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_0::num_coefficients() const
{
    return 6;
}

std::size_t hyperelasticitycarotidiso_form_0::original_coefficient_position(std::size_t i) const
{
    if (i >= 6)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5};
    return position[i];
}

ufc::finite_element * hyperelasticitycarotidiso_form_0::create_coordinate_finite_element() const
{
    return new hyperelasticitycarotidiso_finite_element_5();
}

ufc::dofmap * hyperelasticitycarotidiso_form_0::create_coordinate_dofmap() const
{
    return new hyperelasticitycarotidiso_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticitycarotidiso_form_0::create_coordinate_mapping() const
{
    return new hyperelasticitycarotidiso_coordinate_mapping_5();
}

ufc::finite_element * hyperelasticitycarotidiso_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_3();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_1();
    case 2:
        return new hyperelasticitycarotidiso_finite_element_1();
    case 3:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 4:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 5:
        return new hyperelasticitycarotidiso_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_3();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_1();
    case 2:
        return new hyperelasticitycarotidiso_dofmap_1();
    case 3:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 4:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 5:
        return new hyperelasticitycarotidiso_dofmap_0();
    default:
        return nullptr;
    }
}

std::size_t hyperelasticitycarotidiso_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_0::max_exterior_facet_subdomain_id() const
{
    return 4;
}

std::size_t hyperelasticitycarotidiso_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticitycarotidiso_form_0::has_cell_integrals() const
{
    return true;
}

bool hyperelasticitycarotidiso_form_0::has_exterior_facet_integrals() const
{
    return true;
}

bool hyperelasticitycarotidiso_form_0::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_0::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_0::has_custom_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_0::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_0::has_interface_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 3:
        return new hyperelasticitycarotidiso_exterior_facet_integral_0_3();
    default:
        return nullptr;
    }
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_0::create_default_cell_integral() const
{
    return new hyperelasticitycarotidiso_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_0::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_0::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_0::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_0::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_0::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_0::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_0::create_default_overlap_integral() const
{
    return nullptr;
}


hyperelasticitycarotidiso_form_1::hyperelasticitycarotidiso_form_1() : ufc::form()
{
    // Do nothing
}

hyperelasticitycarotidiso_form_1::~hyperelasticitycarotidiso_form_1()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_form_1::signature() const
{
    return "ff1a0d380bea53bc148c927b8b072edabf7abd2ed3e5893c5ab527219ade50d63045845943ec1a28f9c2e04a3a88c49927b9bd7eb494dbaf283db183212f0fdb";
}

std::size_t hyperelasticitycarotidiso_form_1::rank() const
{
    return 2;
}

std::size_t hyperelasticitycarotidiso_form_1::num_coefficients() const
{
    return 4;
}

std::size_t hyperelasticitycarotidiso_form_1::original_coefficient_position(std::size_t i) const
{
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
}

ufc::finite_element * hyperelasticitycarotidiso_form_1::create_coordinate_finite_element() const
{
    return new hyperelasticitycarotidiso_finite_element_5();
}

ufc::dofmap * hyperelasticitycarotidiso_form_1::create_coordinate_dofmap() const
{
    return new hyperelasticitycarotidiso_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticitycarotidiso_form_1::create_coordinate_mapping() const
{
    return new hyperelasticitycarotidiso_coordinate_mapping_5();
}

ufc::finite_element * hyperelasticitycarotidiso_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_3();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_3();
    case 2:
        return new hyperelasticitycarotidiso_finite_element_3();
    case 3:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 4:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 5:
        return new hyperelasticitycarotidiso_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_3();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_3();
    case 2:
        return new hyperelasticitycarotidiso_dofmap_3();
    case 3:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 4:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 5:
        return new hyperelasticitycarotidiso_dofmap_0();
    default:
        return nullptr;
    }
}

std::size_t hyperelasticitycarotidiso_form_1::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_1::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_1::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_1::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_1::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_1::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_1::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_1::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticitycarotidiso_form_1::has_cell_integrals() const
{
    return true;
}

bool hyperelasticitycarotidiso_form_1::has_exterior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_1::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_1::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_1::has_custom_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_1::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_1::has_interface_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_1::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_1::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_1::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_1::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_1::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_1::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_1::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_1::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_1::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_1::create_default_cell_integral() const
{
    return new hyperelasticitycarotidiso_cell_integral_1_otherwise();
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_1::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_1::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_1::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_1::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_1::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_1::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_1::create_default_overlap_integral() const
{
    return nullptr;
}


hyperelasticitycarotidiso_form_2::hyperelasticitycarotidiso_form_2() : ufc::form()
{
    // Do nothing
}

hyperelasticitycarotidiso_form_2::~hyperelasticitycarotidiso_form_2()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_form_2::signature() const
{
    return "a2110713f6f0ce63f4b3cc2ad0ea250234c2f5b74314355bda574f56594067f271535e0ba97f11443c8d8757b67e3fa8238caf4949ce0e89c0bfdaef76080848";
}

std::size_t hyperelasticitycarotidiso_form_2::rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_form_2::num_coefficients() const
{
    return 6;
}

std::size_t hyperelasticitycarotidiso_form_2::original_coefficient_position(std::size_t i) const
{
    if (i >= 6)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5};
    return position[i];
}

ufc::finite_element * hyperelasticitycarotidiso_form_2::create_coordinate_finite_element() const
{
    return new hyperelasticitycarotidiso_finite_element_5();
}

ufc::dofmap * hyperelasticitycarotidiso_form_2::create_coordinate_dofmap() const
{
    return new hyperelasticitycarotidiso_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticitycarotidiso_form_2::create_coordinate_mapping() const
{
    return new hyperelasticitycarotidiso_coordinate_mapping_5();
}

ufc::finite_element * hyperelasticitycarotidiso_form_2::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_3();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_3();
    case 2:
        return new hyperelasticitycarotidiso_finite_element_1();
    case 3:
        return new hyperelasticitycarotidiso_finite_element_1();
    case 4:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 5:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 6:
        return new hyperelasticitycarotidiso_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_form_2::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_3();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_3();
    case 2:
        return new hyperelasticitycarotidiso_dofmap_1();
    case 3:
        return new hyperelasticitycarotidiso_dofmap_1();
    case 4:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 5:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 6:
        return new hyperelasticitycarotidiso_dofmap_0();
    default:
        return nullptr;
    }
}

std::size_t hyperelasticitycarotidiso_form_2::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_2::max_exterior_facet_subdomain_id() const
{
    return 4;
}

std::size_t hyperelasticitycarotidiso_form_2::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_2::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_2::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_2::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_2::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_2::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticitycarotidiso_form_2::has_cell_integrals() const
{
    return true;
}

bool hyperelasticitycarotidiso_form_2::has_exterior_facet_integrals() const
{
    return true;
}

bool hyperelasticitycarotidiso_form_2::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_2::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_2::has_custom_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_2::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_2::has_interface_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_2::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_2::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_2::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 3:
        return new hyperelasticitycarotidiso_exterior_facet_integral_2_3();
    default:
        return nullptr;
    }
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_2::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_2::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_2::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_2::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_2::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_2::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_2::create_default_cell_integral() const
{
    return new hyperelasticitycarotidiso_cell_integral_2_otherwise();
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_2::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_2::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_2::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_2::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_2::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_2::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_2::create_default_overlap_integral() const
{
    return nullptr;
}


hyperelasticitycarotidiso_form_3::hyperelasticitycarotidiso_form_3() : ufc::form()
{
    // Do nothing
}

hyperelasticitycarotidiso_form_3::~hyperelasticitycarotidiso_form_3()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_form_3::signature() const
{
    return "104035fa1c66a91e444c7311dbeee4d2c48625ff0632f237e2a16f21116b4eaa0711a8b99aa5406543ef5f8a2fc3c8f6ebc6dc81377f2044934a65ffdb234090";
}

std::size_t hyperelasticitycarotidiso_form_3::rank() const
{
    return 2;
}

std::size_t hyperelasticitycarotidiso_form_3::num_coefficients() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::original_coefficient_position(std::size_t i) const
{
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
}

ufc::finite_element * hyperelasticitycarotidiso_form_3::create_coordinate_finite_element() const
{
    return new hyperelasticitycarotidiso_finite_element_5();
}

ufc::dofmap * hyperelasticitycarotidiso_form_3::create_coordinate_dofmap() const
{
    return new hyperelasticitycarotidiso_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticitycarotidiso_form_3::create_coordinate_mapping() const
{
    return new hyperelasticitycarotidiso_coordinate_mapping_5();
}

ufc::finite_element * hyperelasticitycarotidiso_form_3::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_4();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_4();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_form_3::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_4();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_4();
    default:
        return nullptr;
    }
}

std::size_t hyperelasticitycarotidiso_form_3::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_3::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticitycarotidiso_form_3::has_cell_integrals() const
{
    return true;
}

bool hyperelasticitycarotidiso_form_3::has_exterior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_3::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_3::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_3::has_custom_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_3::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_3::has_interface_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_3::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_3::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_3::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_3::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_3::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_3::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_3::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_3::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_3::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_3::create_default_cell_integral() const
{
    return new hyperelasticitycarotidiso_cell_integral_3_otherwise();
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_3::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_3::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_3::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_3::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_3::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_3::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_3::create_default_overlap_integral() const
{
    return nullptr;
}


hyperelasticitycarotidiso_form_4::hyperelasticitycarotidiso_form_4() : ufc::form()
{
    // Do nothing
}

hyperelasticitycarotidiso_form_4::~hyperelasticitycarotidiso_form_4()
{
    // Do nothing
}

const char * hyperelasticitycarotidiso_form_4::signature() const
{
    return "b2729f7329c9f749fafb285e18854bc56920c602af21c4fb2c15aa38802281b19e4d834dee2e976b78219649dd025a13da6295ac9185357beb69355003be2bdf";
}

std::size_t hyperelasticitycarotidiso_form_4::rank() const
{
    return 1;
}

std::size_t hyperelasticitycarotidiso_form_4::num_coefficients() const
{
    return 4;
}

std::size_t hyperelasticitycarotidiso_form_4::original_coefficient_position(std::size_t i) const
{
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
}

ufc::finite_element * hyperelasticitycarotidiso_form_4::create_coordinate_finite_element() const
{
    return new hyperelasticitycarotidiso_finite_element_5();
}

ufc::dofmap * hyperelasticitycarotidiso_form_4::create_coordinate_dofmap() const
{
    return new hyperelasticitycarotidiso_dofmap_5();
}

ufc::coordinate_mapping * hyperelasticitycarotidiso_form_4::create_coordinate_mapping() const
{
    return new hyperelasticitycarotidiso_coordinate_mapping_5();
}

ufc::finite_element * hyperelasticitycarotidiso_form_4::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_finite_element_4();
    case 1:
        return new hyperelasticitycarotidiso_finite_element_3();
    case 2:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 3:
        return new hyperelasticitycarotidiso_finite_element_0();
    case 4:
        return new hyperelasticitycarotidiso_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * hyperelasticitycarotidiso_form_4::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new hyperelasticitycarotidiso_dofmap_4();
    case 1:
        return new hyperelasticitycarotidiso_dofmap_3();
    case 2:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 3:
        return new hyperelasticitycarotidiso_dofmap_0();
    case 4:
        return new hyperelasticitycarotidiso_dofmap_0();
    default:
        return nullptr;
    }
}

std::size_t hyperelasticitycarotidiso_form_4::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_4::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_4::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_4::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_4::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_4::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_4::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t hyperelasticitycarotidiso_form_4::max_overlap_subdomain_id() const
{
    return 0;
}

bool hyperelasticitycarotidiso_form_4::has_cell_integrals() const
{
    return true;
}

bool hyperelasticitycarotidiso_form_4::has_exterior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_4::has_interior_facet_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_4::has_vertex_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_4::has_custom_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_4::has_cutcell_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_4::has_interface_integrals() const
{
    return false;
}

bool hyperelasticitycarotidiso_form_4::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_4::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_4::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_4::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_4::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_4::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_4::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_4::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_4::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * hyperelasticitycarotidiso_form_4::create_default_cell_integral() const
{
    return new hyperelasticitycarotidiso_cell_integral_4_otherwise();
}

ufc::exterior_facet_integral * hyperelasticitycarotidiso_form_4::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * hyperelasticitycarotidiso_form_4::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * hyperelasticitycarotidiso_form_4::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * hyperelasticitycarotidiso_form_4::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * hyperelasticitycarotidiso_form_4::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * hyperelasticitycarotidiso_form_4::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * hyperelasticitycarotidiso_form_4::create_default_overlap_integral() const
{
    return nullptr;
}

