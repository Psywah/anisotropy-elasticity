# Copyright (C) 2009-2010 Harish Narayanan and Garth N. Wells
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# Modified by Anders Logg 2011
#
# First added:  2009-09-29
# Last changed: 2011-06-28
#
# The bilinear form a(du, v) and linear form L(v) for
# a hyperelastic model.
#
# Compile this form with FFC: ffc -l dolfin -fsplit -fquadrature_degree=2 -feliminate_zeros -fprecompute_basis_const -fprecompute_ip_const HyperElasticity.ufl
# ffc -l dolfin  -fquadrature_degree=1 -feliminate_zeros -fprecompute_basis_const -fprecompute_ip_const -fsplit HyperElasticityA.ufl

# Function spaces
cell = tetrahedron
VecCG = VectorElement("Lagrange", cell, 2)
DG = FiniteElement("Lagrange", cell, 1)

# Trial and test functions
du = TrialFunction(VecCG)     # Incremental displacement
v  = TestFunction(VecCG)      # Test function

# Functions
u = Coefficient(VecCG)        # Displacement from previous iteration
B = VectorConstant(cell)        # Body force per unit volume
#T = VectorConstant(cell)        # Traction force on the boundary

# Structural tensor
vec1 = VectorConstant(cell)
vec2 = VectorConstant(cell)

# Elasticity parameters
c1 = Constant(cell)
epsilon1 = Constant(cell)
epsilon2 = Constant(cell)
alpha1 = Constant(cell)
alpha2 = Constant(cell)
alpha3 = Constant(cell)
alpha4 = Constant(cell)
alpha5 = Constant(cell)
k1 = Constant(cell)
k2 = Constant(cell)

beta1 = Constant(cell)
eta1 = Constant(cell)
delta1 = Constant(cell)
delta2 = Constant(cell)
pressure = Constant(cell)

#
# Kinematics
n = FacetNormal(cell)
d = u.geometric_dimension()
I = Identity(d)                 # Identity tensor
F = I + grad(u)                 # Deformation gradient
C = F.T*F                       # Right Cauchy-Green tensor
C = variable(C)

# Invariants of deformation tensors
I1 = tr(C)
J  = det(F)
I2 = tr(cofac(C))
I3 = det(C)
I3_ = I3**(1./3.)
J4_1 = inner(vec1,C*vec1)
J4_2 = inner(vec2,C*vec2)
#J5_1 = inner(vec1,C*C*vec1)
#J5_2 = inner(vec2,C*C*vec2)

invF = inv(F)
#T = -pressure*cofac(F)*n
T = -pressure*n


# Macauley brackets
eps = 1e-10
mac_1 = J4_1/I3_ -1
mac_2 = J4_2/I3_ -1
cond1 = conditional(mac_1 <= eps, 0, 1)
cond2 = conditional(mac_2 <= eps, 0, 1)

# Stored strain energy density (compressible neo-Hookean model)
#psi_pla = beta1*I1 +eta1*I2+delta1*I3 -delta2*ln(I3)
psi_iso = c1*(I1/I3_ - 3.) + epsilon1*((I3**epsilon2) + 1./(I3**epsilon2)-2.)**alpha5
psi_aniso1 = k1/k2/2.*(exp(k2*mac_1**2) - 1)
psi_aniso2 = k1/k2/2.*(exp(k2*mac_2**2) - 1)

#Pi_iso = psi_iso*dx -  inner(B,u)*dx -  inner(T,u)*ds(1)
#Pi_aniso1 = psi_aniso1*dx
#Pi_aniso2 = psi_aniso2*dx
# Total potential energy
#Pi = Pi_iso + cond1 * Pi_aniso1 + cond2 * Pi_aniso2  
#Pi = psi*(dx(2)+dx(3)+dx(4)) +psi_iso*dx(1)- inner(B, u)*dx - inner(T, u)*ds(1)
Pi= psi_iso*dx -  inner(B,u)*dx -  inner(T,u)*ds(3) + cond1*psi_aniso1*dx + cond2* psi_aniso2*dx
#

# First variation of Pi (directional derivative about u in the direction of v)
#Res_iso = derivative(Pi_iso, u, v)
#Res_aniso1 = derivative(Pi_aniso1, u, v)
#Res_aniso2 = derivative(Pi_aniso2, u, v)
#Res = Res_iso + cond1 * Res_aniso1 +cond2 * Res_aniso2 
Res =derivative(Pi, u, v)

# Compute Jacobian of F
#Jac_iso = derivative(Res_iso, u, du)
#Jac_aniso1 = derivative(Res_aniso1, u, du)
#Jac_aniso2 = derivative(Res_aniso2, u, du)
#Jac = Jac_iso + cond1*Jac_aniso1 +cond2*Jac_aniso2
Jac = derivative(Res, u, du)


# Trial and test functions
p = TrialFunction(DG)     # Incremental displacement
q  = TestFunction(DG)      # Test function

S = 2.*diff(psi_iso, C) +2.*cond1 *diff(psi_aniso1,C) + 2.*cond2*diff(psi_aniso2,C)
#S_pla = diff(psi_pla, C)

sigma = 1./J*F*S*F.T
#sigma_i = 1./J*F*S_pla*F.T

Mass_vms = p*q*dx

#L_vms = sqrt((sigma[1,1]**2 +sigma[2,2]**2+sigma[0,0]**2\
#    -sigma[1,1]*sigma[2,2]-sigma[1,1]*sigma[0,0]-sigma[2,2]*sigma[0,0]\
#    +3*(sigma[1,2]**2+sigma[1,0]**2+sigma[2,0]**2)))*q*(dx(2)+dx(3)+dx(4))\
#    +sqrt((sigma_i[1,1]**2 +sigma_i[2,2]**2+sigma_i[0,0]**2\
#    -sigma_i[1,1]*sigma_i[2,2]-sigma_i[1,1]*sigma_i[0,0]-sigma_i[2,2]*sigma_i[0,0]\
#    +3*(sigma_i[1,2]**2+sigma_i[1,0]**2+sigma_i[2,0]**2)))*q*dx(1)
L_vms = sqrt((sigma[1,1]**2 +sigma[2,2]**2+sigma[0,0]**2\
    -sigma[1,1]*sigma[2,2]-sigma[1,1]*sigma[0,0]-sigma[2,2]*sigma[0,0]\
    +3*(sigma[1,2]**2+sigma[1,0]**2+sigma[2,0]**2)))*q*dx



elements = [VecCG, DG]
forms = [Pi, Jac, Res, Mass_vms, L_vms]

