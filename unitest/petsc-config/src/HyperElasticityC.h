// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   eliminate_zeros:                True
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   optimize:                       False
//   precision:                      15
//   precompute_basis_const:         True
//   precompute_ip_const:            True
//   quadrature_degree:              '6'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          True

#ifndef __HYPERELASTICITYC_H
#define __HYPERELASTICITYC_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class hyperelasticityc_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  hyperelasticityc_finite_element_0();

  /// Destructor
  virtual ~hyperelasticityc_finite_element_0();

  /// Return a string identifying the finite element
  virtual const char* signature() const;

  /// Return the cell shape
  virtual ufc::shape cell_shape() const;

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const;

  /// Return the rank of the value space
  virtual std::size_t value_rank() const;

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const;

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation);

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation);

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation);

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation);

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const;

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const;

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const;

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const;

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const;

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const;

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::finite_element* create() const;

};

/// This class defines the interface for a finite element.

class hyperelasticityc_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  hyperelasticityc_finite_element_1();

  /// Destructor
  virtual ~hyperelasticityc_finite_element_1();

  /// Return a string identifying the finite element
  virtual const char* signature() const;

  /// Return the cell shape
  virtual ufc::shape cell_shape() const;

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const;

  /// Return the rank of the value space
  virtual std::size_t value_rank() const;

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const;

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation);

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation);

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation);

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation);

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const;

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const;

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const;

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const;

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const;

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const;

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::finite_element* create() const;

};

/// This class defines the interface for a finite element.

class hyperelasticityc_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  hyperelasticityc_finite_element_2();

  /// Destructor
  virtual ~hyperelasticityc_finite_element_2();

  /// Return a string identifying the finite element
  virtual const char* signature() const;

  /// Return the cell shape
  virtual ufc::shape cell_shape() const;

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const;

  /// Return the rank of the value space
  virtual std::size_t value_rank() const;

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const;

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation);

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation);

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation);

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation);

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const;

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const;

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const;

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const;

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const;

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const;

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::finite_element* create() const;

};

/// This class defines the interface for a finite element.

class hyperelasticityc_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  hyperelasticityc_finite_element_3();

  /// Destructor
  virtual ~hyperelasticityc_finite_element_3();

  /// Return a string identifying the finite element
  virtual const char* signature() const;

  /// Return the cell shape
  virtual ufc::shape cell_shape() const;

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const;

  /// Return the rank of the value space
  virtual std::size_t value_rank() const;

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const;

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation);

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation);

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation);

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation);

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const;

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const;

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const;

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const;

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const;

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const;

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::finite_element* create() const;

};

/// This class defines the interface for a finite element.

class hyperelasticityc_finite_element_4: public ufc::finite_element
{
public:

  /// Constructor
  hyperelasticityc_finite_element_4();

  /// Destructor
  virtual ~hyperelasticityc_finite_element_4();

  /// Return a string identifying the finite element
  virtual const char* signature() const;

  /// Return the cell shape
  virtual ufc::shape cell_shape() const;

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const;

  /// Return the rank of the value space
  virtual std::size_t value_rank() const;

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const;

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation);

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation);

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation);

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation);

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const;

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const;

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const;

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const;

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const;

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const;

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::finite_element* create() const;

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class hyperelasticityc_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  hyperelasticityc_dofmap_0();

  /// Destructor
  virtual ~hyperelasticityc_dofmap_0();

  /// Return a string identifying the dofmap
  virtual const char* signature() const;

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const;

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const;

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const;

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const;

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const;

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const;

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const;

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const;

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* coordinates,
                                    const double* vertex_coordinates) const;

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const;

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::dofmap* create() const;

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class hyperelasticityc_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  hyperelasticityc_dofmap_1();

  /// Destructor
  virtual ~hyperelasticityc_dofmap_1();

  /// Return a string identifying the dofmap
  virtual const char* signature() const;

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const;

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const;

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const;

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const;

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const;

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const;

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const;

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const;

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* coordinates,
                                    const double* vertex_coordinates) const;

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const;

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::dofmap* create() const;

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class hyperelasticityc_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  hyperelasticityc_dofmap_2();

  /// Destructor
  virtual ~hyperelasticityc_dofmap_2();

  /// Return a string identifying the dofmap
  virtual const char* signature() const;

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const;

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const;

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const;

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const;

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const;

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const;

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const;

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const;

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* coordinates,
                                    const double* vertex_coordinates) const;

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const;

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::dofmap* create() const;

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class hyperelasticityc_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  hyperelasticityc_dofmap_3();

  /// Destructor
  virtual ~hyperelasticityc_dofmap_3();

  /// Return a string identifying the dofmap
  virtual const char* signature() const;

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const;

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const;

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const;

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const;

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const;

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const;

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const;

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const;

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* coordinates,
                                    const double* vertex_coordinates) const;

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const;

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::dofmap* create() const;

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class hyperelasticityc_dofmap_4: public ufc::dofmap
{
public:

  /// Constructor
  hyperelasticityc_dofmap_4();

  /// Destructor
  virtual ~hyperelasticityc_dofmap_4();

  /// Return a string identifying the dofmap
  virtual const char* signature() const;

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const;

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const;

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const;

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const;

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const;

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const;

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const;

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const;

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const;

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const;

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* coordinates,
                                    const double* vertex_coordinates) const;

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const;

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const;

  /// Create a new class instance
  virtual ufc::dofmap* create() const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_0_1: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_0_1();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_0_1();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_0_2: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_0_2();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_0_2();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_0_3: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_0_3();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_0_3();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_0_4: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_0_4();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_0_4();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_1_1: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_1_1();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_1_1();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_1_2: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_1_2();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_1_2();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_1_3: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_1_3();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_1_3();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_1_4: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_1_4();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_1_4();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_1_otherwise();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_1_otherwise();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class hyperelasticityc_exterior_facet_integral_1_1: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  hyperelasticityc_exterior_facet_integral_1_1();

  /// Destructor
  virtual ~hyperelasticityc_exterior_facet_integral_1_1();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_2_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_2_otherwise();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_2_otherwise();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_3_1: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_3_1();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_3_1();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_3_2: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_3_2();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_3_2();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_3_3: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_3_3();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_3_3();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class hyperelasticityc_cell_integral_3_4: public ufc::cell_integral
{
public:

  /// Constructor
  hyperelasticityc_cell_integral_3_4();

  /// Destructor
  virtual ~hyperelasticityc_cell_integral_3_4();

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const;

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const;

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class hyperelasticityc_form_0: public ufc::form
{
public:

  /// Constructor
  hyperelasticityc_form_0();

  /// Destructor
  virtual ~hyperelasticityc_form_0();

  /// Return a string identifying the form
  virtual const char* signature() const;


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const;

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const;

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const;


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const;

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const;


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const;

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const;

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const;

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const;

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const;


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const;

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const;

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const;

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const;

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const;


  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const;

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const;

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const;

  /// Create a new vertex integral on sub domain i
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t i) const;

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const;


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const;

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const;

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const;

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const;

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const;
};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class hyperelasticityc_form_1: public ufc::form
{
public:

  /// Constructor
  hyperelasticityc_form_1();

  /// Destructor
  virtual ~hyperelasticityc_form_1();

  /// Return a string identifying the form
  virtual const char* signature() const;


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const;

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const;

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const;


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const;

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const;


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const;

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const;

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const;

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const;

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const;


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const;

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const;

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const;

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const;

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const;


  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const;

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const;

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const;

  /// Create a new vertex integral on sub domain i
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t i) const;

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const;


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const;

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const;

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const;

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const;

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const;
};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class hyperelasticityc_form_2: public ufc::form
{
public:

  /// Constructor
  hyperelasticityc_form_2();

  /// Destructor
  virtual ~hyperelasticityc_form_2();

  /// Return a string identifying the form
  virtual const char* signature() const;


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const;

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const;

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const;


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const;

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const;


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const;

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const;

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const;

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const;

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const;


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const;

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const;

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const;

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const;

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const;


  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const;

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const;

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const;

  /// Create a new vertex integral on sub domain i
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t i) const;

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const;


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const;

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const;

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const;

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const;

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const;
};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class hyperelasticityc_form_3: public ufc::form
{
public:

  /// Constructor
  hyperelasticityc_form_3();

  /// Destructor
  virtual ~hyperelasticityc_form_3();

  /// Return a string identifying the form
  virtual const char* signature() const;


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const;

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const;

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const;


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const;

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const;


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const;

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const;

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const;

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const;

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const;


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const;

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const;

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const;

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const;

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const;


  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const;

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const;

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const;

  /// Create a new vertex integral on sub domain i
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t i) const;

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const;


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const;

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const;

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const;

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const;

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const;
};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>

namespace HyperElasticityC
{

class CoefficientSpace_B: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_B(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_B(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_B(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_B(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_T: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_T(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_T(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_T(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_T(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_alpha3: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_alpha3(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_alpha3(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_alpha3(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_alpha3(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_alpha4: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_alpha4(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_alpha4(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_alpha4(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_alpha4(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_beta1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_beta1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_beta1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_c1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_c1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_c1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_c1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_c1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_delta1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_delta1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_delta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_delta1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_delta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_delta2: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_delta2(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_delta2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_delta2(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_delta2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_epsilon1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_epsilon1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_epsilon1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_epsilon1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_epsilon1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_epsilon2: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_epsilon2(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_epsilon2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_epsilon2(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_epsilon2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_eta1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eta1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eta1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_u: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_u(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_u(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_vec1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_vec1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_vec1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_vec1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_vec1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_vec2: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_vec2(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_vec2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_vec2(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_vec2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_Jac_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Jac_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Jac_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Jac_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Jac_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_Jac_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Jac_FunctionSpace_1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Jac_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Jac_FunctionSpace_1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Jac_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_u Form_Jac_FunctionSpace_2;

typedef CoefficientSpace_vec1 Form_Jac_FunctionSpace_3;

typedef CoefficientSpace_vec2 Form_Jac_FunctionSpace_4;

typedef CoefficientSpace_c1 Form_Jac_FunctionSpace_5;

typedef CoefficientSpace_epsilon1 Form_Jac_FunctionSpace_6;

typedef CoefficientSpace_epsilon2 Form_Jac_FunctionSpace_7;

typedef CoefficientSpace_alpha3 Form_Jac_FunctionSpace_8;

typedef CoefficientSpace_alpha4 Form_Jac_FunctionSpace_9;

typedef CoefficientSpace_beta1 Form_Jac_FunctionSpace_10;

typedef CoefficientSpace_eta1 Form_Jac_FunctionSpace_11;

typedef CoefficientSpace_delta1 Form_Jac_FunctionSpace_12;

typedef CoefficientSpace_delta2 Form_Jac_FunctionSpace_13;

class Form_Jac: public dolfin::Form
{
public:

  // Constructor
  Form_Jac(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0):
    dolfin::Form(2, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_0());
  }

  // Constructor
  Form_Jac(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& vec1, const dolfin::GenericFunction& vec2, const dolfin::GenericFunction& c1, const dolfin::GenericFunction& epsilon1, const dolfin::GenericFunction& epsilon2, const dolfin::GenericFunction& alpha3, const dolfin::GenericFunction& alpha4, const dolfin::GenericFunction& beta1, const dolfin::GenericFunction& eta1, const dolfin::GenericFunction& delta1, const dolfin::GenericFunction& delta2):
    dolfin::Form(2, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->u = u;
    this->vec1 = vec1;
    this->vec2 = vec2;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->alpha3 = alpha3;
    this->alpha4 = alpha4;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_0());
  }

  // Constructor
  Form_Jac(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> vec1, std::shared_ptr<const dolfin::GenericFunction> vec2, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> alpha3, std::shared_ptr<const dolfin::GenericFunction> alpha4, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(2, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->u = *u;
    this->vec1 = *vec1;
    this->vec2 = *vec2;
    this->c1 = *c1;
    this->epsilon1 = *epsilon1;
    this->epsilon2 = *epsilon2;
    this->alpha3 = *alpha3;
    this->alpha4 = *alpha4;
    this->beta1 = *beta1;
    this->eta1 = *eta1;
    this->delta1 = *delta1;
    this->delta2 = *delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_0());
  }

  // Constructor
  Form_Jac(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_0());
  }

  // Constructor
  Form_Jac(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& vec1, const dolfin::GenericFunction& vec2, const dolfin::GenericFunction& c1, const dolfin::GenericFunction& epsilon1, const dolfin::GenericFunction& epsilon2, const dolfin::GenericFunction& alpha3, const dolfin::GenericFunction& alpha4, const dolfin::GenericFunction& beta1, const dolfin::GenericFunction& eta1, const dolfin::GenericFunction& delta1, const dolfin::GenericFunction& delta2):
    dolfin::Form(2, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u = u;
    this->vec1 = vec1;
    this->vec2 = vec2;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->alpha3 = alpha3;
    this->alpha4 = alpha4;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_0());
  }

  // Constructor
  Form_Jac(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> vec1, std::shared_ptr<const dolfin::GenericFunction> vec2, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> alpha3, std::shared_ptr<const dolfin::GenericFunction> alpha4, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(2, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u = *u;
    this->vec1 = *vec1;
    this->vec2 = *vec2;
    this->c1 = *c1;
    this->epsilon1 = *epsilon1;
    this->epsilon2 = *epsilon2;
    this->alpha3 = *alpha3;
    this->alpha4 = *alpha4;
    this->beta1 = *beta1;
    this->eta1 = *eta1;
    this->delta1 = *delta1;
    this->delta2 = *delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_0());
  }

  // Destructor
  ~Form_Jac()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "vec1")
      return 1;
    else if (name == "vec2")
      return 2;
    else if (name == "c1")
      return 3;
    else if (name == "epsilon1")
      return 4;
    else if (name == "epsilon2")
      return 5;
    else if (name == "alpha3")
      return 6;
    else if (name == "alpha4")
      return 7;
    else if (name == "beta1")
      return 8;
    else if (name == "eta1")
      return 9;
    else if (name == "delta1")
      return 10;
    else if (name == "delta2")
      return 11;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "vec1";
    case 2:
      return "vec2";
    case 3:
      return "c1";
    case 4:
      return "epsilon1";
    case 5:
      return "epsilon2";
    case 6:
      return "alpha3";
    case 7:
      return "alpha4";
    case 8:
      return "beta1";
    case 9:
      return "eta1";
    case 10:
      return "delta1";
    case 11:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jac_FunctionSpace_0 TestSpace;
  typedef Form_Jac_FunctionSpace_1 TrialSpace;
  typedef Form_Jac_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_Jac_FunctionSpace_3 CoefficientSpace_vec1;
  typedef Form_Jac_FunctionSpace_4 CoefficientSpace_vec2;
  typedef Form_Jac_FunctionSpace_5 CoefficientSpace_c1;
  typedef Form_Jac_FunctionSpace_6 CoefficientSpace_epsilon1;
  typedef Form_Jac_FunctionSpace_7 CoefficientSpace_epsilon2;
  typedef Form_Jac_FunctionSpace_8 CoefficientSpace_alpha3;
  typedef Form_Jac_FunctionSpace_9 CoefficientSpace_alpha4;
  typedef Form_Jac_FunctionSpace_10 CoefficientSpace_beta1;
  typedef Form_Jac_FunctionSpace_11 CoefficientSpace_eta1;
  typedef Form_Jac_FunctionSpace_12 CoefficientSpace_delta1;
  typedef Form_Jac_FunctionSpace_13 CoefficientSpace_delta2;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner vec1;
  dolfin::CoefficientAssigner vec2;
  dolfin::CoefficientAssigner c1;
  dolfin::CoefficientAssigner epsilon1;
  dolfin::CoefficientAssigner epsilon2;
  dolfin::CoefficientAssigner alpha3;
  dolfin::CoefficientAssigner alpha4;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner eta1;
  dolfin::CoefficientAssigner delta1;
  dolfin::CoefficientAssigner delta2;
};

class Form_Res_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Res_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Res_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Res_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Res_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_u Form_Res_FunctionSpace_1;

typedef CoefficientSpace_B Form_Res_FunctionSpace_2;

typedef CoefficientSpace_T Form_Res_FunctionSpace_3;

typedef CoefficientSpace_vec1 Form_Res_FunctionSpace_4;

typedef CoefficientSpace_vec2 Form_Res_FunctionSpace_5;

typedef CoefficientSpace_c1 Form_Res_FunctionSpace_6;

typedef CoefficientSpace_epsilon1 Form_Res_FunctionSpace_7;

typedef CoefficientSpace_epsilon2 Form_Res_FunctionSpace_8;

typedef CoefficientSpace_alpha3 Form_Res_FunctionSpace_9;

typedef CoefficientSpace_alpha4 Form_Res_FunctionSpace_10;

typedef CoefficientSpace_beta1 Form_Res_FunctionSpace_11;

typedef CoefficientSpace_eta1 Form_Res_FunctionSpace_12;

typedef CoefficientSpace_delta1 Form_Res_FunctionSpace_13;

typedef CoefficientSpace_delta2 Form_Res_FunctionSpace_14;

class Form_Res: public dolfin::Form
{
public:

  // Constructor
  Form_Res(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 14), u(*this, 0), B(*this, 1), T(*this, 2), vec1(*this, 3), vec2(*this, 4), c1(*this, 5), epsilon1(*this, 6), epsilon2(*this, 7), alpha3(*this, 8), alpha4(*this, 9), beta1(*this, 10), eta1(*this, 11), delta1(*this, 12), delta2(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_1());
  }

  // Constructor
  Form_Res(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& B, const dolfin::GenericFunction& T, const dolfin::GenericFunction& vec1, const dolfin::GenericFunction& vec2, const dolfin::GenericFunction& c1, const dolfin::GenericFunction& epsilon1, const dolfin::GenericFunction& epsilon2, const dolfin::GenericFunction& alpha3, const dolfin::GenericFunction& alpha4, const dolfin::GenericFunction& beta1, const dolfin::GenericFunction& eta1, const dolfin::GenericFunction& delta1, const dolfin::GenericFunction& delta2):
    dolfin::Form(1, 14), u(*this, 0), B(*this, 1), T(*this, 2), vec1(*this, 3), vec2(*this, 4), c1(*this, 5), epsilon1(*this, 6), epsilon2(*this, 7), alpha3(*this, 8), alpha4(*this, 9), beta1(*this, 10), eta1(*this, 11), delta1(*this, 12), delta2(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = u;
    this->B = B;
    this->T = T;
    this->vec1 = vec1;
    this->vec2 = vec2;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->alpha3 = alpha3;
    this->alpha4 = alpha4;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_1());
  }

  // Constructor
  Form_Res(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> B, std::shared_ptr<const dolfin::GenericFunction> T, std::shared_ptr<const dolfin::GenericFunction> vec1, std::shared_ptr<const dolfin::GenericFunction> vec2, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> alpha3, std::shared_ptr<const dolfin::GenericFunction> alpha4, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(1, 14), u(*this, 0), B(*this, 1), T(*this, 2), vec1(*this, 3), vec2(*this, 4), c1(*this, 5), epsilon1(*this, 6), epsilon2(*this, 7), alpha3(*this, 8), alpha4(*this, 9), beta1(*this, 10), eta1(*this, 11), delta1(*this, 12), delta2(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = *u;
    this->B = *B;
    this->T = *T;
    this->vec1 = *vec1;
    this->vec2 = *vec2;
    this->c1 = *c1;
    this->epsilon1 = *epsilon1;
    this->epsilon2 = *epsilon2;
    this->alpha3 = *alpha3;
    this->alpha4 = *alpha4;
    this->beta1 = *beta1;
    this->eta1 = *eta1;
    this->delta1 = *delta1;
    this->delta2 = *delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_1());
  }

  // Constructor
  Form_Res(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 14), u(*this, 0), B(*this, 1), T(*this, 2), vec1(*this, 3), vec2(*this, 4), c1(*this, 5), epsilon1(*this, 6), epsilon2(*this, 7), alpha3(*this, 8), alpha4(*this, 9), beta1(*this, 10), eta1(*this, 11), delta1(*this, 12), delta2(*this, 13)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_1());
  }

  // Constructor
  Form_Res(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& B, const dolfin::GenericFunction& T, const dolfin::GenericFunction& vec1, const dolfin::GenericFunction& vec2, const dolfin::GenericFunction& c1, const dolfin::GenericFunction& epsilon1, const dolfin::GenericFunction& epsilon2, const dolfin::GenericFunction& alpha3, const dolfin::GenericFunction& alpha4, const dolfin::GenericFunction& beta1, const dolfin::GenericFunction& eta1, const dolfin::GenericFunction& delta1, const dolfin::GenericFunction& delta2):
    dolfin::Form(1, 14), u(*this, 0), B(*this, 1), T(*this, 2), vec1(*this, 3), vec2(*this, 4), c1(*this, 5), epsilon1(*this, 6), epsilon2(*this, 7), alpha3(*this, 8), alpha4(*this, 9), beta1(*this, 10), eta1(*this, 11), delta1(*this, 12), delta2(*this, 13)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->B = B;
    this->T = T;
    this->vec1 = vec1;
    this->vec2 = vec2;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->alpha3 = alpha3;
    this->alpha4 = alpha4;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_1());
  }

  // Constructor
  Form_Res(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> B, std::shared_ptr<const dolfin::GenericFunction> T, std::shared_ptr<const dolfin::GenericFunction> vec1, std::shared_ptr<const dolfin::GenericFunction> vec2, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> alpha3, std::shared_ptr<const dolfin::GenericFunction> alpha4, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(1, 14), u(*this, 0), B(*this, 1), T(*this, 2), vec1(*this, 3), vec2(*this, 4), c1(*this, 5), epsilon1(*this, 6), epsilon2(*this, 7), alpha3(*this, 8), alpha4(*this, 9), beta1(*this, 10), eta1(*this, 11), delta1(*this, 12), delta2(*this, 13)
  {
    _function_spaces[0] = V0;

    this->u = *u;
    this->B = *B;
    this->T = *T;
    this->vec1 = *vec1;
    this->vec2 = *vec2;
    this->c1 = *c1;
    this->epsilon1 = *epsilon1;
    this->epsilon2 = *epsilon2;
    this->alpha3 = *alpha3;
    this->alpha4 = *alpha4;
    this->beta1 = *beta1;
    this->eta1 = *eta1;
    this->delta1 = *delta1;
    this->delta2 = *delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_1());
  }

  // Destructor
  ~Form_Res()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "B")
      return 1;
    else if (name == "T")
      return 2;
    else if (name == "vec1")
      return 3;
    else if (name == "vec2")
      return 4;
    else if (name == "c1")
      return 5;
    else if (name == "epsilon1")
      return 6;
    else if (name == "epsilon2")
      return 7;
    else if (name == "alpha3")
      return 8;
    else if (name == "alpha4")
      return 9;
    else if (name == "beta1")
      return 10;
    else if (name == "eta1")
      return 11;
    else if (name == "delta1")
      return 12;
    else if (name == "delta2")
      return 13;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "B";
    case 2:
      return "T";
    case 3:
      return "vec1";
    case 4:
      return "vec2";
    case 5:
      return "c1";
    case 6:
      return "epsilon1";
    case 7:
      return "epsilon2";
    case 8:
      return "alpha3";
    case 9:
      return "alpha4";
    case 10:
      return "beta1";
    case 11:
      return "eta1";
    case 12:
      return "delta1";
    case 13:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Res_FunctionSpace_0 TestSpace;
  typedef Form_Res_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_Res_FunctionSpace_2 CoefficientSpace_B;
  typedef Form_Res_FunctionSpace_3 CoefficientSpace_T;
  typedef Form_Res_FunctionSpace_4 CoefficientSpace_vec1;
  typedef Form_Res_FunctionSpace_5 CoefficientSpace_vec2;
  typedef Form_Res_FunctionSpace_6 CoefficientSpace_c1;
  typedef Form_Res_FunctionSpace_7 CoefficientSpace_epsilon1;
  typedef Form_Res_FunctionSpace_8 CoefficientSpace_epsilon2;
  typedef Form_Res_FunctionSpace_9 CoefficientSpace_alpha3;
  typedef Form_Res_FunctionSpace_10 CoefficientSpace_alpha4;
  typedef Form_Res_FunctionSpace_11 CoefficientSpace_beta1;
  typedef Form_Res_FunctionSpace_12 CoefficientSpace_eta1;
  typedef Form_Res_FunctionSpace_13 CoefficientSpace_delta1;
  typedef Form_Res_FunctionSpace_14 CoefficientSpace_delta2;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner B;
  dolfin::CoefficientAssigner T;
  dolfin::CoefficientAssigner vec1;
  dolfin::CoefficientAssigner vec2;
  dolfin::CoefficientAssigner c1;
  dolfin::CoefficientAssigner epsilon1;
  dolfin::CoefficientAssigner epsilon2;
  dolfin::CoefficientAssigner alpha3;
  dolfin::CoefficientAssigner alpha4;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner eta1;
  dolfin::CoefficientAssigner delta1;
  dolfin::CoefficientAssigner delta2;
};

class Form_Mass_vms_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Mass_vms_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Mass_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Mass_vms_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Mass_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_Mass_vms_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Mass_vms_FunctionSpace_1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Mass_vms_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_Mass_vms_FunctionSpace_1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_Mass_vms_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_Mass_vms: public dolfin::Form
{
public:

  // Constructor
  Form_Mass_vms(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_2());
  }

  // Constructor
  Form_Mass_vms(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_2());
  }

  // Destructor
  ~Form_Mass_vms()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Mass_vms_FunctionSpace_0 TestSpace;
  typedef Form_Mass_vms_FunctionSpace_1 TrialSpace;

  // Coefficients
};

class Form_L_vms_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_vms_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_vms_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new hyperelasticityc_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new hyperelasticityc_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_u Form_L_vms_FunctionSpace_1;

typedef CoefficientSpace_vec1 Form_L_vms_FunctionSpace_2;

typedef CoefficientSpace_vec2 Form_L_vms_FunctionSpace_3;

typedef CoefficientSpace_c1 Form_L_vms_FunctionSpace_4;

typedef CoefficientSpace_epsilon1 Form_L_vms_FunctionSpace_5;

typedef CoefficientSpace_epsilon2 Form_L_vms_FunctionSpace_6;

typedef CoefficientSpace_alpha3 Form_L_vms_FunctionSpace_7;

typedef CoefficientSpace_alpha4 Form_L_vms_FunctionSpace_8;

typedef CoefficientSpace_beta1 Form_L_vms_FunctionSpace_9;

typedef CoefficientSpace_eta1 Form_L_vms_FunctionSpace_10;

typedef CoefficientSpace_delta1 Form_L_vms_FunctionSpace_11;

typedef CoefficientSpace_delta2 Form_L_vms_FunctionSpace_12;

class Form_L_vms: public dolfin::Form
{
public:

  // Constructor
  Form_L_vms(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_3());
  }

  // Constructor
  Form_L_vms(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& vec1, const dolfin::GenericFunction& vec2, const dolfin::GenericFunction& c1, const dolfin::GenericFunction& epsilon1, const dolfin::GenericFunction& epsilon2, const dolfin::GenericFunction& alpha3, const dolfin::GenericFunction& alpha4, const dolfin::GenericFunction& beta1, const dolfin::GenericFunction& eta1, const dolfin::GenericFunction& delta1, const dolfin::GenericFunction& delta2):
    dolfin::Form(1, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = u;
    this->vec1 = vec1;
    this->vec2 = vec2;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->alpha3 = alpha3;
    this->alpha4 = alpha4;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_3());
  }

  // Constructor
  Form_L_vms(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> vec1, std::shared_ptr<const dolfin::GenericFunction> vec2, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> alpha3, std::shared_ptr<const dolfin::GenericFunction> alpha4, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(1, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = *u;
    this->vec1 = *vec1;
    this->vec2 = *vec2;
    this->c1 = *c1;
    this->epsilon1 = *epsilon1;
    this->epsilon2 = *epsilon2;
    this->alpha3 = *alpha3;
    this->alpha4 = *alpha4;
    this->beta1 = *beta1;
    this->eta1 = *eta1;
    this->delta1 = *delta1;
    this->delta2 = *delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_3());
  }

  // Constructor
  Form_L_vms(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_3());
  }

  // Constructor
  Form_L_vms(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& vec1, const dolfin::GenericFunction& vec2, const dolfin::GenericFunction& c1, const dolfin::GenericFunction& epsilon1, const dolfin::GenericFunction& epsilon2, const dolfin::GenericFunction& alpha3, const dolfin::GenericFunction& alpha4, const dolfin::GenericFunction& beta1, const dolfin::GenericFunction& eta1, const dolfin::GenericFunction& delta1, const dolfin::GenericFunction& delta2):
    dolfin::Form(1, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->vec1 = vec1;
    this->vec2 = vec2;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->alpha3 = alpha3;
    this->alpha4 = alpha4;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_3());
  }

  // Constructor
  Form_L_vms(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> vec1, std::shared_ptr<const dolfin::GenericFunction> vec2, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> alpha3, std::shared_ptr<const dolfin::GenericFunction> alpha4, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(1, 12), u(*this, 0), vec1(*this, 1), vec2(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), alpha3(*this, 6), alpha4(*this, 7), beta1(*this, 8), eta1(*this, 9), delta1(*this, 10), delta2(*this, 11)
  {
    _function_spaces[0] = V0;

    this->u = *u;
    this->vec1 = *vec1;
    this->vec2 = *vec2;
    this->c1 = *c1;
    this->epsilon1 = *epsilon1;
    this->epsilon2 = *epsilon2;
    this->alpha3 = *alpha3;
    this->alpha4 = *alpha4;
    this->beta1 = *beta1;
    this->eta1 = *eta1;
    this->delta1 = *delta1;
    this->delta2 = *delta2;

    _ufc_form = std::shared_ptr<const ufc::form>(new hyperelasticityc_form_3());
  }

  // Destructor
  ~Form_L_vms()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "vec1")
      return 1;
    else if (name == "vec2")
      return 2;
    else if (name == "c1")
      return 3;
    else if (name == "epsilon1")
      return 4;
    else if (name == "epsilon2")
      return 5;
    else if (name == "alpha3")
      return 6;
    else if (name == "alpha4")
      return 7;
    else if (name == "beta1")
      return 8;
    else if (name == "eta1")
      return 9;
    else if (name == "delta1")
      return 10;
    else if (name == "delta2")
      return 11;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "vec1";
    case 2:
      return "vec2";
    case 3:
      return "c1";
    case 4:
      return "epsilon1";
    case 5:
      return "epsilon2";
    case 6:
      return "alpha3";
    case 7:
      return "alpha4";
    case 8:
      return "beta1";
    case 9:
      return "eta1";
    case 10:
      return "delta1";
    case 11:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_vms_FunctionSpace_0 TestSpace;
  typedef Form_L_vms_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_L_vms_FunctionSpace_2 CoefficientSpace_vec1;
  typedef Form_L_vms_FunctionSpace_3 CoefficientSpace_vec2;
  typedef Form_L_vms_FunctionSpace_4 CoefficientSpace_c1;
  typedef Form_L_vms_FunctionSpace_5 CoefficientSpace_epsilon1;
  typedef Form_L_vms_FunctionSpace_6 CoefficientSpace_epsilon2;
  typedef Form_L_vms_FunctionSpace_7 CoefficientSpace_alpha3;
  typedef Form_L_vms_FunctionSpace_8 CoefficientSpace_alpha4;
  typedef Form_L_vms_FunctionSpace_9 CoefficientSpace_beta1;
  typedef Form_L_vms_FunctionSpace_10 CoefficientSpace_eta1;
  typedef Form_L_vms_FunctionSpace_11 CoefficientSpace_delta1;
  typedef Form_L_vms_FunctionSpace_12 CoefficientSpace_delta2;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner vec1;
  dolfin::CoefficientAssigner vec2;
  dolfin::CoefficientAssigner c1;
  dolfin::CoefficientAssigner epsilon1;
  dolfin::CoefficientAssigner epsilon2;
  dolfin::CoefficientAssigner alpha3;
  dolfin::CoefficientAssigner alpha4;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner eta1;
  dolfin::CoefficientAssigner delta1;
  dolfin::CoefficientAssigner delta2;
};


}

#endif
