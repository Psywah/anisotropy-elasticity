# Copyright (C) 2009-2010 Harish Narayanan and Garth N. Wells
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# Modified by Anders Logg 2011
#
# First added:  2009-09-29
# Last changed: 2011-06-28
#
# The bilinear form a(du, v) and linear form L(v) for
# a hyperelastic model.
#
# Compile this form with FFC: ffc -l dolfin -fsplit -fquadrature_degree=2 -feliminate_zeros -fprecompute_basis_const -fprecompute_ip_const HyperElasticity.ufl
# ffc -l dolfin  -fquadrature_degree=1 -feliminate_zeros -fprecompute_basis_const -fprecompute_ip_const -fsplit HyperElasticityA.ufl

# Function spaces
VecCG = VectorElement("Lagrange", tetrahedron, 2)
DG = FiniteElement("DG", tetrahedron, 0)

# Trial and test functions
du = TrialFunction(VecCG)     # Incremental displacement
v  = TestFunction(VecCG)      # Test function

# Functions
u = Coefficient(VecCG)        # Displacement from previous iteration
B = VectorConstant(tetrahedron)        # Body force per unit volume
T = VectorConstant(tetrahedron)        # Traction force on the boundary

# Structural tensor
#vec1 = VectorConstant(tetrahedron)
#vec2 = VectorConstant(tetrahedron)

# Elasticity parameters
c1 = Constant(tetrahedron)
epsilon1 = Constant(tetrahedron)
epsilon2 = Constant(tetrahedron)
#alpha1 = Constant(tetrahedron)
#alpha2 = Constant(tetrahedron)
#alpha3 = Constant(tetrahedron)
#alpha4 = Constant(tetrahedron)

beta1 = Constant(tetrahedron)
eta1 = Constant(tetrahedron)
delta1 = Constant(tetrahedron)
delta2 = Constant(tetrahedron)

#
# Kinematics
d = u.geometric_dimension()
I = Identity(d)                 # Identity tensor
F = I + grad(u)                 # Deformation gradient
C = F.T*F                       # Right Cauchy-Green tensor
C = variable(C)

# Invariants of deformation tensors
I1 = tr(C)
J  = det(F)
I2 = tr(cofac(C))
I3 = det(C)
I3_ = I3**(1./3.)
#J4_1 = inner(vec1,C*vec1)
#J4_2 = inner(vec2,C*vec2)
#J5_1 = inner(vec1,C*C*vec1)
#J5_2 = inner(vec2,C*C*vec2)

# Macauley brackets
#eps = 1e-10
#mac_1 = (I1*J4_1 - J5_1 -2)
#mac_2 = (I1*J4_2 - J5_2 -2)
#mac1 = conditional(mac_1 <= eps, 0., (abs(mac_1)+eps)**alpha2)
#mac2 = conditional(mac_2 <= eps, 0., (abs(mac_2)+eps)**alpha2)

# Stored strain energy density (compressible neo-Hookean model)
#psi = (mu/2)*(I1 - 3) - mu*ln(J) + (lmbda/2)*(ln(J))**2
psi = c1*(I1/I3_ -3.) + epsilon1*((I3**epsilon2) + 1./(I3**epsilon2)-2.)\
#       + alpha1*(mac1+mac2)
psi_iso = beta1*I1 +eta1*I2+delta1*I3 -delta2*ln(I3)

# Total potential energy
#Pi = psi*(dx(2)+dx(3)+dx(4)) +psi_iso*dx(1)- inner(B, u)*dx - inner(T, u)*ds(1)
#Pi = psi_iso*dx - inner(B, u)*dx - inner(T, u)*ds(3)
Pi = psi_iso*dx(1) +psi*dx(2) - inner(B, u)*dx - inner(T, u)*ds(3)

# First variation of Pi (directional derivative about u in the direction of v)
Res = derivative(Pi, u, v)

# Compute Jacobian of F
Jac = derivative(Res, u, du)


# Trial and test functions
p = TrialFunction(DG)     # Incremental displacement
q  = TestFunction(DG)      # Test function

S_iso = diff(psi_iso, C)
S = diff(psi, C)

sigma = 1./J*F*S*F.T
sigma_iso = 1./J*F*S_iso*F.T

Mass_vms = p*q*dx

L_vms = sqrt((sigma[1,1]**2 +sigma[2,2]**2+sigma[0,0]**2\
    -sigma[1,1]*sigma[2,2]-sigma[1,1]*sigma[0,0]-sigma[2,2]*sigma[0,0]\
    +3*(sigma[1,2]**2+sigma[1,0]**2+sigma[2,0]**2)))*q*dx(2)\
    +sqrt((sigma_iso[1,1]**2 +sigma_iso[2,2]**2+sigma_iso[0,0]**2\
    -sigma_iso[1,1]*sigma_iso[2,2]-sigma_iso[1,1]*sigma_iso[0,0]-sigma_iso[2,2]*sigma_iso[0,0]\
    +3*(sigma_iso[1,2]**2+sigma_iso[1,0]**2+sigma_iso[2,0]**2)))*q*dx(1)

elements = [VecCG, DG]
forms = [Jac, Res, Mass_vms, L_vms]

