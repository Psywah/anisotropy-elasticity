// This code conforms with the UFC specification version 2017.2.0.dev0
// and was automatically generated by FFC version 2017.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   eliminate_zeros:                True
//   epsilon:                        1e-14
//   error_control:                  False
//   external_include_dirs:          ''
//   external_includes:              ''
//   external_libraries:             ''
//   external_library_dirs:          ''
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   precompute_basis_const:         True
//   precompute_ip_const:            True
//   quadrature_degree:              4
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          True

#ifndef __HYPERELASTICITYCAROTIDISO_H
#define __HYPERELASTICITYCAROTIDISO_H
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class hyperelasticitycarotidiso_finite_element_0: public ufc::finite_element
{
public:

  hyperelasticitycarotidiso_finite_element_0();

  ~hyperelasticitycarotidiso_finite_element_0() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class hyperelasticitycarotidiso_finite_element_1: public ufc::finite_element
{
public:

  hyperelasticitycarotidiso_finite_element_1();

  ~hyperelasticitycarotidiso_finite_element_1() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class hyperelasticitycarotidiso_finite_element_2: public ufc::finite_element
{
public:

  hyperelasticitycarotidiso_finite_element_2();

  ~hyperelasticitycarotidiso_finite_element_2() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class hyperelasticitycarotidiso_finite_element_3: public ufc::finite_element
{
public:

  hyperelasticitycarotidiso_finite_element_3();

  ~hyperelasticitycarotidiso_finite_element_3() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class hyperelasticitycarotidiso_finite_element_4: public ufc::finite_element
{
public:

  hyperelasticitycarotidiso_finite_element_4();

  ~hyperelasticitycarotidiso_finite_element_4() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class hyperelasticitycarotidiso_finite_element_5: public ufc::finite_element
{
public:

  hyperelasticitycarotidiso_finite_element_5();

  ~hyperelasticitycarotidiso_finite_element_5() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class hyperelasticitycarotidiso_finite_element_6: public ufc::finite_element
{
public:

  hyperelasticitycarotidiso_finite_element_6();

  ~hyperelasticitycarotidiso_finite_element_6() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class hyperelasticitycarotidiso_dofmap_0: public ufc::dofmap
{
public:

  hyperelasticitycarotidiso_dofmap_0();

  ~hyperelasticitycarotidiso_dofmap_0() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class hyperelasticitycarotidiso_dofmap_1: public ufc::dofmap
{
public:

  hyperelasticitycarotidiso_dofmap_1();

  ~hyperelasticitycarotidiso_dofmap_1() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class hyperelasticitycarotidiso_dofmap_2: public ufc::dofmap
{
public:

  hyperelasticitycarotidiso_dofmap_2();

  ~hyperelasticitycarotidiso_dofmap_2() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class hyperelasticitycarotidiso_dofmap_3: public ufc::dofmap
{
public:

  hyperelasticitycarotidiso_dofmap_3();

  ~hyperelasticitycarotidiso_dofmap_3() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class hyperelasticitycarotidiso_dofmap_4: public ufc::dofmap
{
public:

  hyperelasticitycarotidiso_dofmap_4();

  ~hyperelasticitycarotidiso_dofmap_4() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class hyperelasticitycarotidiso_dofmap_5: public ufc::dofmap
{
public:

  hyperelasticitycarotidiso_dofmap_5();

  ~hyperelasticitycarotidiso_dofmap_5() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class hyperelasticitycarotidiso_dofmap_6: public ufc::dofmap
{
public:

  hyperelasticitycarotidiso_dofmap_6();

  ~hyperelasticitycarotidiso_dofmap_6() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class hyperelasticitycarotidiso_coordinate_mapping_5: public ufc::coordinate_mapping
{
public:

  hyperelasticitycarotidiso_coordinate_mapping_5();

  ~hyperelasticitycarotidiso_coordinate_mapping_5() override;

  const char * signature() const final override;

  ufc::coordinate_mapping * create() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t topological_dimension() const final override;

  ufc::shape cell_shape() const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override;

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override;

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override;

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override;

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override;

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override;

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override;

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override;

};


class hyperelasticitycarotidiso_cell_integral_0_1: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_0_1();

  ~hyperelasticitycarotidiso_cell_integral_0_1() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_cell_integral_0_2: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_0_2();

  ~hyperelasticitycarotidiso_cell_integral_0_2() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_cell_integral_1_1: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_1_1();

  ~hyperelasticitycarotidiso_cell_integral_1_1() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_cell_integral_1_2: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_1_2();

  ~hyperelasticitycarotidiso_cell_integral_1_2() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_1_otherwise();

  ~hyperelasticitycarotidiso_cell_integral_1_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_exterior_facet_integral_1_3: public ufc::exterior_facet_integral
{
public:

  hyperelasticitycarotidiso_exterior_facet_integral_1_3();

  ~hyperelasticitycarotidiso_exterior_facet_integral_1_3() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_cell_integral_2_otherwise: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_2_otherwise();

  ~hyperelasticitycarotidiso_cell_integral_2_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_cell_integral_3_1: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_3_1();

  ~hyperelasticitycarotidiso_cell_integral_3_1() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_cell_integral_3_2: public ufc::cell_integral
{
public:

  hyperelasticitycarotidiso_cell_integral_3_2();

  ~hyperelasticitycarotidiso_cell_integral_3_2() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class hyperelasticitycarotidiso_form_0: public ufc::form
{
public:

  hyperelasticitycarotidiso_form_0();

  ~hyperelasticitycarotidiso_form_0() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class hyperelasticitycarotidiso_form_1: public ufc::form
{
public:

  hyperelasticitycarotidiso_form_1();

  ~hyperelasticitycarotidiso_form_1() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class hyperelasticitycarotidiso_form_2: public ufc::form
{
public:

  hyperelasticitycarotidiso_form_2();

  ~hyperelasticitycarotidiso_form_2() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class hyperelasticitycarotidiso_form_3: public ufc::form
{
public:

  hyperelasticitycarotidiso_form_3();

  ~hyperelasticitycarotidiso_form_3() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace HyperElasticityCarotidIso
{

class CoefficientSpace_B: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_B(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_B(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_T: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_T(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_T(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_beta1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_c1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_c1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_c1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_delta1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_delta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_delta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_delta2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_delta2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_delta2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_epsilon1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_epsilon1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_epsilon1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_epsilon2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_epsilon2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_epsilon2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_eta1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_eta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_eta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jac_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jac_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jac_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jac_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jac_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jac_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jac_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jac_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jac_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Jac_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jac_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jac_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_Jac_FunctionSpace_2;

typedef CoefficientSpace_c1 Form_Jac_FunctionSpace_3;

typedef CoefficientSpace_epsilon1 Form_Jac_FunctionSpace_4;

typedef CoefficientSpace_epsilon2 Form_Jac_FunctionSpace_5;

typedef CoefficientSpace_beta1 Form_Jac_FunctionSpace_6;

typedef CoefficientSpace_eta1 Form_Jac_FunctionSpace_7;

typedef CoefficientSpace_delta1 Form_Jac_FunctionSpace_8;

typedef CoefficientSpace_delta2 Form_Jac_FunctionSpace_9;

class Form_Jac: public dolfin::Form
{
public:

  // Constructor
  Form_Jac(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 8), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const hyperelasticitycarotidiso_form_0>();
  }

  // Constructor
  Form_Jac(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(2, 8), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u = u;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::make_shared<const hyperelasticitycarotidiso_form_0>();
  }

  // Destructor
  ~Form_Jac()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "c1")
      return 1;
    else if (name == "epsilon1")
      return 2;
    else if (name == "epsilon2")
      return 3;
    else if (name == "beta1")
      return 4;
    else if (name == "eta1")
      return 5;
    else if (name == "delta1")
      return 6;
    else if (name == "delta2")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "c1";
    case 2:
      return "epsilon1";
    case 3:
      return "epsilon2";
    case 4:
      return "beta1";
    case 5:
      return "eta1";
    case 6:
      return "delta1";
    case 7:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jac_FunctionSpace_0 TestSpace;
  typedef Form_Jac_FunctionSpace_1 TrialSpace;
  typedef Form_Jac_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jac_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Jac_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_Jac_FunctionSpace_3 CoefficientSpace_c1;
  typedef Form_Jac_FunctionSpace_4 CoefficientSpace_epsilon1;
  typedef Form_Jac_FunctionSpace_5 CoefficientSpace_epsilon2;
  typedef Form_Jac_FunctionSpace_6 CoefficientSpace_beta1;
  typedef Form_Jac_FunctionSpace_7 CoefficientSpace_eta1;
  typedef Form_Jac_FunctionSpace_8 CoefficientSpace_delta1;
  typedef Form_Jac_FunctionSpace_9 CoefficientSpace_delta2;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner c1;
  dolfin::CoefficientAssigner epsilon1;
  dolfin::CoefficientAssigner epsilon2;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner eta1;
  dolfin::CoefficientAssigner delta1;
  dolfin::CoefficientAssigner delta2;
};

class MultiMeshForm_Jac: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Jac(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jac(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Jac(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::MultiMeshForm(V1, V0), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jac(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

  }

  // Destructor
  ~MultiMeshForm_Jac()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "c1")
      return 1;
    else if (name == "epsilon1")
      return 2;
    else if (name == "epsilon2")
      return 3;
    else if (name == "beta1")
      return 4;
    else if (name == "eta1")
      return 5;
    else if (name == "delta1")
      return 6;
    else if (name == "delta2")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "c1";
    case 2:
      return "epsilon1";
    case 3:
      return "epsilon2";
    case 4:
      return "beta1";
    case 5:
      return "eta1";
    case 6:
      return "delta1";
    case 7:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jac_FunctionSpace_0 TestSpace;
  typedef Form_Jac_FunctionSpace_1 TrialSpace;
  typedef Form_Jac_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jac_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Jac_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_Jac_FunctionSpace_3 CoefficientSpace_c1;
  typedef Form_Jac_FunctionSpace_4 CoefficientSpace_epsilon1;
  typedef Form_Jac_FunctionSpace_5 CoefficientSpace_epsilon2;
  typedef Form_Jac_FunctionSpace_6 CoefficientSpace_beta1;
  typedef Form_Jac_FunctionSpace_7 CoefficientSpace_eta1;
  typedef Form_Jac_FunctionSpace_8 CoefficientSpace_delta1;
  typedef Form_Jac_FunctionSpace_9 CoefficientSpace_delta2;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner c1;
  dolfin::MultiMeshCoefficientAssigner epsilon1;
  dolfin::MultiMeshCoefficientAssigner epsilon2;
  dolfin::MultiMeshCoefficientAssigner beta1;
  dolfin::MultiMeshCoefficientAssigner eta1;
  dolfin::MultiMeshCoefficientAssigner delta1;
  dolfin::MultiMeshCoefficientAssigner delta2;
};

class Form_Res_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Res_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Res_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Res_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Res_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Res_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_Res_FunctionSpace_1;

typedef CoefficientSpace_B Form_Res_FunctionSpace_2;

typedef CoefficientSpace_T Form_Res_FunctionSpace_3;

typedef CoefficientSpace_c1 Form_Res_FunctionSpace_4;

typedef CoefficientSpace_epsilon1 Form_Res_FunctionSpace_5;

typedef CoefficientSpace_epsilon2 Form_Res_FunctionSpace_6;

typedef CoefficientSpace_beta1 Form_Res_FunctionSpace_7;

typedef CoefficientSpace_eta1 Form_Res_FunctionSpace_8;

typedef CoefficientSpace_delta1 Form_Res_FunctionSpace_9;

typedef CoefficientSpace_delta2 Form_Res_FunctionSpace_10;

class Form_Res: public dolfin::Form
{
public:

  // Constructor
  Form_Res(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 10), u(*this, 0), B(*this, 1), T(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), beta1(*this, 6), eta1(*this, 7), delta1(*this, 8), delta2(*this, 9)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const hyperelasticitycarotidiso_form_1>();
  }

  // Constructor
  Form_Res(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> B, std::shared_ptr<const dolfin::GenericFunction> T, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(1, 10), u(*this, 0), B(*this, 1), T(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), beta1(*this, 6), eta1(*this, 7), delta1(*this, 8), delta2(*this, 9)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->B = B;
    this->T = T;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::make_shared<const hyperelasticitycarotidiso_form_1>();
  }

  // Destructor
  ~Form_Res()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "B")
      return 1;
    else if (name == "T")
      return 2;
    else if (name == "c1")
      return 3;
    else if (name == "epsilon1")
      return 4;
    else if (name == "epsilon2")
      return 5;
    else if (name == "beta1")
      return 6;
    else if (name == "eta1")
      return 7;
    else if (name == "delta1")
      return 8;
    else if (name == "delta2")
      return 9;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "B";
    case 2:
      return "T";
    case 3:
      return "c1";
    case 4:
      return "epsilon1";
    case 5:
      return "epsilon2";
    case 6:
      return "beta1";
    case 7:
      return "eta1";
    case 8:
      return "delta1";
    case 9:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Res_FunctionSpace_0 TestSpace;
  typedef Form_Res_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Res_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_Res_FunctionSpace_2 CoefficientSpace_B;
  typedef Form_Res_FunctionSpace_3 CoefficientSpace_T;
  typedef Form_Res_FunctionSpace_4 CoefficientSpace_c1;
  typedef Form_Res_FunctionSpace_5 CoefficientSpace_epsilon1;
  typedef Form_Res_FunctionSpace_6 CoefficientSpace_epsilon2;
  typedef Form_Res_FunctionSpace_7 CoefficientSpace_beta1;
  typedef Form_Res_FunctionSpace_8 CoefficientSpace_eta1;
  typedef Form_Res_FunctionSpace_9 CoefficientSpace_delta1;
  typedef Form_Res_FunctionSpace_10 CoefficientSpace_delta2;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner B;
  dolfin::CoefficientAssigner T;
  dolfin::CoefficientAssigner c1;
  dolfin::CoefficientAssigner epsilon1;
  dolfin::CoefficientAssigner epsilon2;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner eta1;
  dolfin::CoefficientAssigner delta1;
  dolfin::CoefficientAssigner delta2;
};

class MultiMeshForm_Res: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Res(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u(*this, 0), B(*this, 1), T(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), beta1(*this, 6), eta1(*this, 7), delta1(*this, 8), delta2(*this, 9)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Res(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Res(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> B, std::shared_ptr<const dolfin::GenericFunction> T, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::MultiMeshForm(V0), u(*this, 0), B(*this, 1), T(*this, 2), c1(*this, 3), epsilon1(*this, 4), epsilon2(*this, 5), beta1(*this, 6), eta1(*this, 7), delta1(*this, 8), delta2(*this, 9)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Res(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->B = B;
    this->T = T;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

  }

  // Destructor
  ~MultiMeshForm_Res()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "B")
      return 1;
    else if (name == "T")
      return 2;
    else if (name == "c1")
      return 3;
    else if (name == "epsilon1")
      return 4;
    else if (name == "epsilon2")
      return 5;
    else if (name == "beta1")
      return 6;
    else if (name == "eta1")
      return 7;
    else if (name == "delta1")
      return 8;
    else if (name == "delta2")
      return 9;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "B";
    case 2:
      return "T";
    case 3:
      return "c1";
    case 4:
      return "epsilon1";
    case 5:
      return "epsilon2";
    case 6:
      return "beta1";
    case 7:
      return "eta1";
    case 8:
      return "delta1";
    case 9:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Res_FunctionSpace_0 TestSpace;
  typedef Form_Res_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Res_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_Res_FunctionSpace_2 CoefficientSpace_B;
  typedef Form_Res_FunctionSpace_3 CoefficientSpace_T;
  typedef Form_Res_FunctionSpace_4 CoefficientSpace_c1;
  typedef Form_Res_FunctionSpace_5 CoefficientSpace_epsilon1;
  typedef Form_Res_FunctionSpace_6 CoefficientSpace_epsilon2;
  typedef Form_Res_FunctionSpace_7 CoefficientSpace_beta1;
  typedef Form_Res_FunctionSpace_8 CoefficientSpace_eta1;
  typedef Form_Res_FunctionSpace_9 CoefficientSpace_delta1;
  typedef Form_Res_FunctionSpace_10 CoefficientSpace_delta2;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner B;
  dolfin::MultiMeshCoefficientAssigner T;
  dolfin::MultiMeshCoefficientAssigner c1;
  dolfin::MultiMeshCoefficientAssigner epsilon1;
  dolfin::MultiMeshCoefficientAssigner epsilon2;
  dolfin::MultiMeshCoefficientAssigner beta1;
  dolfin::MultiMeshCoefficientAssigner eta1;
  dolfin::MultiMeshCoefficientAssigner delta1;
  dolfin::MultiMeshCoefficientAssigner delta2;
};

class Form_Mass_vms_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Mass_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Mass_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Mass_vms_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Mass_vms_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Mass_vms_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Mass_vms_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Mass_vms_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Mass_vms_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Mass_vms_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Mass_vms_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Mass_vms_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Mass_vms: public dolfin::Form
{
public:

  // Constructor
  Form_Mass_vms(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const hyperelasticitycarotidiso_form_2>();
  }

  // Destructor
  ~Form_Mass_vms()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Mass_vms_FunctionSpace_0 TestSpace;
  typedef Form_Mass_vms_FunctionSpace_1 TrialSpace;
  typedef Form_Mass_vms_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Mass_vms_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_Mass_vms: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Mass_vms(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Mass_vms(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_Mass_vms()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Mass_vms_FunctionSpace_0 TestSpace;
  typedef Form_Mass_vms_FunctionSpace_1 TrialSpace;
  typedef Form_Mass_vms_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Mass_vms_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_vms_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_vms_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticitycarotidiso_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticitycarotidiso_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_vms_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_vms_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_vms_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_L_vms_FunctionSpace_1;

typedef CoefficientSpace_c1 Form_L_vms_FunctionSpace_2;

typedef CoefficientSpace_epsilon1 Form_L_vms_FunctionSpace_3;

typedef CoefficientSpace_epsilon2 Form_L_vms_FunctionSpace_4;

typedef CoefficientSpace_beta1 Form_L_vms_FunctionSpace_5;

typedef CoefficientSpace_eta1 Form_L_vms_FunctionSpace_6;

typedef CoefficientSpace_delta1 Form_L_vms_FunctionSpace_7;

typedef CoefficientSpace_delta2 Form_L_vms_FunctionSpace_8;

class Form_L_vms: public dolfin::Form
{
public:

  // Constructor
  Form_L_vms(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 8), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const hyperelasticitycarotidiso_form_3>();
  }

  // Constructor
  Form_L_vms(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::Form(1, 8), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

    _ufc_form = std::make_shared<const hyperelasticitycarotidiso_form_3>();
  }

  // Destructor
  ~Form_L_vms()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "c1")
      return 1;
    else if (name == "epsilon1")
      return 2;
    else if (name == "epsilon2")
      return 3;
    else if (name == "beta1")
      return 4;
    else if (name == "eta1")
      return 5;
    else if (name == "delta1")
      return 6;
    else if (name == "delta2")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "c1";
    case 2:
      return "epsilon1";
    case 3:
      return "epsilon2";
    case 4:
      return "beta1";
    case 5:
      return "eta1";
    case 6:
      return "delta1";
    case 7:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_vms_FunctionSpace_0 TestSpace;
  typedef Form_L_vms_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_vms_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_L_vms_FunctionSpace_2 CoefficientSpace_c1;
  typedef Form_L_vms_FunctionSpace_3 CoefficientSpace_epsilon1;
  typedef Form_L_vms_FunctionSpace_4 CoefficientSpace_epsilon2;
  typedef Form_L_vms_FunctionSpace_5 CoefficientSpace_beta1;
  typedef Form_L_vms_FunctionSpace_6 CoefficientSpace_eta1;
  typedef Form_L_vms_FunctionSpace_7 CoefficientSpace_delta1;
  typedef Form_L_vms_FunctionSpace_8 CoefficientSpace_delta2;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner c1;
  dolfin::CoefficientAssigner epsilon1;
  dolfin::CoefficientAssigner epsilon2;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner eta1;
  dolfin::CoefficientAssigner delta1;
  dolfin::CoefficientAssigner delta2;
};

class MultiMeshForm_L_vms: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L_vms(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L_vms(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L_vms(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> c1, std::shared_ptr<const dolfin::GenericFunction> epsilon1, std::shared_ptr<const dolfin::GenericFunction> epsilon2, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> eta1, std::shared_ptr<const dolfin::GenericFunction> delta1, std::shared_ptr<const dolfin::GenericFunction> delta2):
    dolfin::MultiMeshForm(V0), u(*this, 0), c1(*this, 1), epsilon1(*this, 2), epsilon2(*this, 3), beta1(*this, 4), eta1(*this, 5), delta1(*this, 6), delta2(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L_vms(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->c1 = c1;
    this->epsilon1 = epsilon1;
    this->epsilon2 = epsilon2;
    this->beta1 = beta1;
    this->eta1 = eta1;
    this->delta1 = delta1;
    this->delta2 = delta2;

  }

  // Destructor
  ~MultiMeshForm_L_vms()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "c1")
      return 1;
    else if (name == "epsilon1")
      return 2;
    else if (name == "epsilon2")
      return 3;
    else if (name == "beta1")
      return 4;
    else if (name == "eta1")
      return 5;
    else if (name == "delta1")
      return 6;
    else if (name == "delta2")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "c1";
    case 2:
      return "epsilon1";
    case 3:
      return "epsilon2";
    case 4:
      return "beta1";
    case 5:
      return "eta1";
    case 6:
      return "delta1";
    case 7:
      return "delta2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_vms_FunctionSpace_0 TestSpace;
  typedef Form_L_vms_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_vms_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_L_vms_FunctionSpace_2 CoefficientSpace_c1;
  typedef Form_L_vms_FunctionSpace_3 CoefficientSpace_epsilon1;
  typedef Form_L_vms_FunctionSpace_4 CoefficientSpace_epsilon2;
  typedef Form_L_vms_FunctionSpace_5 CoefficientSpace_beta1;
  typedef Form_L_vms_FunctionSpace_6 CoefficientSpace_eta1;
  typedef Form_L_vms_FunctionSpace_7 CoefficientSpace_delta1;
  typedef Form_L_vms_FunctionSpace_8 CoefficientSpace_delta2;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner c1;
  dolfin::MultiMeshCoefficientAssigner epsilon1;
  dolfin::MultiMeshCoefficientAssigner epsilon2;
  dolfin::MultiMeshCoefficientAssigner beta1;
  dolfin::MultiMeshCoefficientAssigner eta1;
  dolfin::MultiMeshCoefficientAssigner delta1;
  dolfin::MultiMeshCoefficientAssigner delta2;
};


}

#endif
